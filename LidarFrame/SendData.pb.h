// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SendData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SendData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SendData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SendData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SendData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SendData_2eproto;
namespace com {
namespace caspe {
namespace devicemanagement {
namespace util {
class AlarmList;
class AlarmListDefaultTypeInternal;
extern AlarmListDefaultTypeInternal _AlarmList_default_instance_;
class AlarmList_Alarm;
class AlarmList_AlarmDefaultTypeInternal;
extern AlarmList_AlarmDefaultTypeInternal _AlarmList_Alarm_default_instance_;
class Alg;
class AlgDefaultTypeInternal;
extern AlgDefaultTypeInternal _Alg_default_instance_;
class Collect;
class CollectDefaultTypeInternal;
extern CollectDefaultTypeInternal _Collect_default_instance_;
class CollectComplete;
class CollectCompleteDefaultTypeInternal;
extern CollectCompleteDefaultTypeInternal _CollectComplete_default_instance_;
class CollectReply;
class CollectReplyDefaultTypeInternal;
extern CollectReplyDefaultTypeInternal _CollectReply_default_instance_;
class Collect_PartList;
class Collect_PartListDefaultTypeInternal;
extern Collect_PartListDefaultTypeInternal _Collect_PartList_default_instance_;
class Collect_StopCondition;
class Collect_StopConditionDefaultTypeInternal;
extern Collect_StopConditionDefaultTypeInternal _Collect_StopCondition_default_instance_;
class DetailLog;
class DetailLogDefaultTypeInternal;
extern DetailLogDefaultTypeInternal _DetailLog_default_instance_;
class ProcessInfo;
class ProcessInfoDefaultTypeInternal;
extern ProcessInfoDefaultTypeInternal _ProcessInfo_default_instance_;
class Ready;
class ReadyDefaultTypeInternal;
extern ReadyDefaultTypeInternal _Ready_default_instance_;
class SendData;
class SendDataDefaultTypeInternal;
extern SendDataDefaultTypeInternal _SendData_default_instance_;
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Signal_Channel;
class Signal_ChannelDefaultTypeInternal;
extern Signal_ChannelDefaultTypeInternal _Signal_Channel_default_instance_;
class StatusReport;
class StatusReportDefaultTypeInternal;
extern StatusReportDefaultTypeInternal _StatusReport_default_instance_;
class StatusReport_Status;
class StatusReport_StatusDefaultTypeInternal;
extern StatusReport_StatusDefaultTypeInternal _StatusReport_Status_default_instance_;
class SuspendReply;
class SuspendReplyDefaultTypeInternal;
extern SuspendReplyDefaultTypeInternal _SuspendReply_default_instance_;
class SysParam;
class SysParamDefaultTypeInternal;
extern SysParamDefaultTypeInternal _SysParam_default_instance_;
class SysParam_DefogTiming;
class SysParam_DefogTimingDefaultTypeInternal;
extern SysParam_DefogTimingDefaultTypeInternal _SysParam_DefogTiming_default_instance_;
class SysParam_HeaterTiming;
class SysParam_HeaterTimingDefaultTypeInternal;
extern SysParam_HeaterTimingDefaultTypeInternal _SysParam_HeaterTiming_default_instance_;
}  // namespace util
}  // namespace devicemanagement
}  // namespace caspe
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::caspe::devicemanagement::util::AlarmList* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::AlarmList>(Arena*);
template<> ::com::caspe::devicemanagement::util::AlarmList_Alarm* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::AlarmList_Alarm>(Arena*);
template<> ::com::caspe::devicemanagement::util::Alg* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::Alg>(Arena*);
template<> ::com::caspe::devicemanagement::util::Collect* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::Collect>(Arena*);
template<> ::com::caspe::devicemanagement::util::CollectComplete* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::CollectComplete>(Arena*);
template<> ::com::caspe::devicemanagement::util::CollectReply* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::CollectReply>(Arena*);
template<> ::com::caspe::devicemanagement::util::Collect_PartList* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::Collect_PartList>(Arena*);
template<> ::com::caspe::devicemanagement::util::Collect_StopCondition* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::Collect_StopCondition>(Arena*);
template<> ::com::caspe::devicemanagement::util::DetailLog* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::DetailLog>(Arena*);
template<> ::com::caspe::devicemanagement::util::ProcessInfo* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::ProcessInfo>(Arena*);
template<> ::com::caspe::devicemanagement::util::Ready* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::Ready>(Arena*);
template<> ::com::caspe::devicemanagement::util::SendData* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::SendData>(Arena*);
template<> ::com::caspe::devicemanagement::util::Signal* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::Signal>(Arena*);
template<> ::com::caspe::devicemanagement::util::Signal_Channel* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::Signal_Channel>(Arena*);
template<> ::com::caspe::devicemanagement::util::StatusReport* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::StatusReport>(Arena*);
template<> ::com::caspe::devicemanagement::util::StatusReport_Status* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::StatusReport_Status>(Arena*);
template<> ::com::caspe::devicemanagement::util::SuspendReply* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::SuspendReply>(Arena*);
template<> ::com::caspe::devicemanagement::util::SysParam* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::SysParam>(Arena*);
template<> ::com::caspe::devicemanagement::util::SysParam_DefogTiming* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::SysParam_DefogTiming>(Arena*);
template<> ::com::caspe::devicemanagement::util::SysParam_HeaterTiming* Arena::CreateMaybeMessage<::com::caspe::devicemanagement::util::SysParam_HeaterTiming>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace caspe {
namespace devicemanagement {
namespace util {

// ===================================================================

class Ready PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.Ready) */ {
 public:
  inline Ready() : Ready(nullptr) {};
  virtual ~Ready();

  Ready(const Ready& from);
  Ready(Ready&& from) noexcept
    : Ready() {
    *this = ::std::move(from);
  }

  inline Ready& operator=(const Ready& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ready& operator=(Ready&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ready& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ready* internal_default_instance() {
    return reinterpret_cast<const Ready*>(
               &_Ready_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ready& a, Ready& b) {
    a.Swap(&b);
  }
  inline void Swap(Ready* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ready* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ready* New() const final {
    return CreateMaybeMessage<Ready>(nullptr);
  }

  Ready* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ready>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ready& from);
  void MergeFrom(const Ready& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ready* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.Ready";
  }
  protected:
  explicit Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentModeFieldNumber = 1,
    kLonFieldNumber = 2,
    kLatFieldNumber = 3,
  };
  // string currentMode = 1;
  void clear_currentmode();
  const std::string& currentmode() const;
  void set_currentmode(const std::string& value);
  void set_currentmode(std::string&& value);
  void set_currentmode(const char* value);
  void set_currentmode(const char* value, size_t size);
  std::string* mutable_currentmode();
  std::string* release_currentmode();
  void set_allocated_currentmode(std::string* currentmode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_currentmode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_currentmode(
      std::string* currentmode);
  private:
  const std::string& _internal_currentmode() const;
  void _internal_set_currentmode(const std::string& value);
  std::string* _internal_mutable_currentmode();
  public:

  // float lon = 2;
  void clear_lon();
  float lon() const;
  void set_lon(float value);
  private:
  float _internal_lon() const;
  void _internal_set_lon(float value);
  public:

  // float lat = 3;
  void clear_lat();
  float lat() const;
  void set_lat(float value);
  private:
  float _internal_lat() const;
  void _internal_set_lat(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.Ready)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentmode_;
  float lon_;
  float lat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class DetailLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.DetailLog) */ {
 public:
  inline DetailLog() : DetailLog(nullptr) {};
  virtual ~DetailLog();

  DetailLog(const DetailLog& from);
  DetailLog(DetailLog&& from) noexcept
    : DetailLog() {
    *this = ::std::move(from);
  }

  inline DetailLog& operator=(const DetailLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailLog& operator=(DetailLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailLog* internal_default_instance() {
    return reinterpret_cast<const DetailLog*>(
               &_DetailLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetailLog& a, DetailLog& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailLog* New() const final {
    return CreateMaybeMessage<DetailLog>(nullptr);
  }

  DetailLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailLog& from);
  void MergeFrom(const DetailLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.DetailLog";
  }
  protected:
  explicit DetailLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogContentFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
  };
  // string logContent = 1;
  void clear_logcontent();
  const std::string& logcontent() const;
  void set_logcontent(const std::string& value);
  void set_logcontent(std::string&& value);
  void set_logcontent(const char* value);
  void set_logcontent(const char* value, size_t size);
  std::string* mutable_logcontent();
  std::string* release_logcontent();
  void set_allocated_logcontent(std::string* logcontent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_logcontent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_logcontent(
      std::string* logcontent);
  private:
  const std::string& _internal_logcontent() const;
  void _internal_set_logcontent(const std::string& value);
  std::string* _internal_mutable_logcontent();
  public:

  // string createTime = 2;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_createtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_createtime(
      std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.DetailLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logcontent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class Collect_StopCondition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.Collect.StopCondition) */ {
 public:
  inline Collect_StopCondition() : Collect_StopCondition(nullptr) {};
  virtual ~Collect_StopCondition();

  Collect_StopCondition(const Collect_StopCondition& from);
  Collect_StopCondition(Collect_StopCondition&& from) noexcept
    : Collect_StopCondition() {
    *this = ::std::move(from);
  }

  inline Collect_StopCondition& operator=(const Collect_StopCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collect_StopCondition& operator=(Collect_StopCondition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collect_StopCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collect_StopCondition* internal_default_instance() {
    return reinterpret_cast<const Collect_StopCondition*>(
               &_Collect_StopCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Collect_StopCondition& a, Collect_StopCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(Collect_StopCondition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collect_StopCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collect_StopCondition* New() const final {
    return CreateMaybeMessage<Collect_StopCondition>(nullptr);
  }

  Collect_StopCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collect_StopCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collect_StopCondition& from);
  void MergeFrom(const Collect_StopCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collect_StopCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.Collect.StopCondition";
  }
  protected:
  explicit Collect_StopCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 1,
  };
  // string counts = 1;
  void clear_counts();
  const std::string& counts() const;
  void set_counts(const std::string& value);
  void set_counts(std::string&& value);
  void set_counts(const char* value);
  void set_counts(const char* value, size_t size);
  std::string* mutable_counts();
  std::string* release_counts();
  void set_allocated_counts(std::string* counts);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_counts();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_counts(
      std::string* counts);
  private:
  const std::string& _internal_counts() const;
  void _internal_set_counts(const std::string& value);
  std::string* _internal_mutable_counts();
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.Collect.StopCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class Collect_PartList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.Collect.PartList) */ {
 public:
  inline Collect_PartList() : Collect_PartList(nullptr) {};
  virtual ~Collect_PartList();

  Collect_PartList(const Collect_PartList& from);
  Collect_PartList(Collect_PartList&& from) noexcept
    : Collect_PartList() {
    *this = ::std::move(from);
  }

  inline Collect_PartList& operator=(const Collect_PartList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collect_PartList& operator=(Collect_PartList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collect_PartList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collect_PartList* internal_default_instance() {
    return reinterpret_cast<const Collect_PartList*>(
               &_Collect_PartList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Collect_PartList& a, Collect_PartList& b) {
    a.Swap(&b);
  }
  inline void Swap(Collect_PartList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collect_PartList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collect_PartList* New() const final {
    return CreateMaybeMessage<Collect_PartList>(nullptr);
  }

  Collect_PartList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collect_PartList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collect_PartList& from);
  void MergeFrom(const Collect_PartList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collect_PartList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.Collect.PartList";
  }
  protected:
  explicit Collect_PartList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHAngleFieldNumber = 1,
    kVAngleFieldNumber = 2,
    kSAngleFieldNumber = 3,
    kEAngleFieldNumber = 4,
    kIAngleFieldNumber = 5,
    kIntervalFieldNumber = 6,
    kScanningFieldNumber = 7,
    kStopCondtionFieldNumber = 8,
  };
  // string hAngle = 1;
  void clear_hangle();
  const std::string& hangle() const;
  void set_hangle(const std::string& value);
  void set_hangle(std::string&& value);
  void set_hangle(const char* value);
  void set_hangle(const char* value, size_t size);
  std::string* mutable_hangle();
  std::string* release_hangle();
  void set_allocated_hangle(std::string* hangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hangle(
      std::string* hangle);
  private:
  const std::string& _internal_hangle() const;
  void _internal_set_hangle(const std::string& value);
  std::string* _internal_mutable_hangle();
  public:

  // string vAngle = 2;
  void clear_vangle();
  const std::string& vangle() const;
  void set_vangle(const std::string& value);
  void set_vangle(std::string&& value);
  void set_vangle(const char* value);
  void set_vangle(const char* value, size_t size);
  std::string* mutable_vangle();
  std::string* release_vangle();
  void set_allocated_vangle(std::string* vangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vangle(
      std::string* vangle);
  private:
  const std::string& _internal_vangle() const;
  void _internal_set_vangle(const std::string& value);
  std::string* _internal_mutable_vangle();
  public:

  // string sAngle = 3;
  void clear_sangle();
  const std::string& sangle() const;
  void set_sangle(const std::string& value);
  void set_sangle(std::string&& value);
  void set_sangle(const char* value);
  void set_sangle(const char* value, size_t size);
  std::string* mutable_sangle();
  std::string* release_sangle();
  void set_allocated_sangle(std::string* sangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sangle(
      std::string* sangle);
  private:
  const std::string& _internal_sangle() const;
  void _internal_set_sangle(const std::string& value);
  std::string* _internal_mutable_sangle();
  public:

  // string eAngle = 4;
  void clear_eangle();
  const std::string& eangle() const;
  void set_eangle(const std::string& value);
  void set_eangle(std::string&& value);
  void set_eangle(const char* value);
  void set_eangle(const char* value, size_t size);
  std::string* mutable_eangle();
  std::string* release_eangle();
  void set_allocated_eangle(std::string* eangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_eangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_eangle(
      std::string* eangle);
  private:
  const std::string& _internal_eangle() const;
  void _internal_set_eangle(const std::string& value);
  std::string* _internal_mutable_eangle();
  public:

  // string iAngle = 5;
  void clear_iangle();
  const std::string& iangle() const;
  void set_iangle(const std::string& value);
  void set_iangle(std::string&& value);
  void set_iangle(const char* value);
  void set_iangle(const char* value, size_t size);
  std::string* mutable_iangle();
  std::string* release_iangle();
  void set_allocated_iangle(std::string* iangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_iangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_iangle(
      std::string* iangle);
  private:
  const std::string& _internal_iangle() const;
  void _internal_set_iangle(const std::string& value);
  std::string* _internal_mutable_iangle();
  public:

  // string interval = 6;
  void clear_interval();
  const std::string& interval() const;
  void set_interval(const std::string& value);
  void set_interval(std::string&& value);
  void set_interval(const char* value);
  void set_interval(const char* value, size_t size);
  std::string* mutable_interval();
  std::string* release_interval();
  void set_allocated_interval(std::string* interval);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interval();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interval(
      std::string* interval);
  private:
  const std::string& _internal_interval() const;
  void _internal_set_interval(const std::string& value);
  std::string* _internal_mutable_interval();
  public:

  // string scanning = 7;
  void clear_scanning();
  const std::string& scanning() const;
  void set_scanning(const std::string& value);
  void set_scanning(std::string&& value);
  void set_scanning(const char* value);
  void set_scanning(const char* value, size_t size);
  std::string* mutable_scanning();
  std::string* release_scanning();
  void set_allocated_scanning(std::string* scanning);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scanning();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scanning(
      std::string* scanning);
  private:
  const std::string& _internal_scanning() const;
  void _internal_set_scanning(const std::string& value);
  std::string* _internal_mutable_scanning();
  public:

  // .com.caspe.devicemanagement.util.Collect.StopCondition stopCondtion = 8;
  bool has_stopcondtion() const;
  private:
  bool _internal_has_stopcondtion() const;
  public:
  void clear_stopcondtion();
  const ::com::caspe::devicemanagement::util::Collect_StopCondition& stopcondtion() const;
  ::com::caspe::devicemanagement::util::Collect_StopCondition* release_stopcondtion();
  ::com::caspe::devicemanagement::util::Collect_StopCondition* mutable_stopcondtion();
  void set_allocated_stopcondtion(::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondtion);
  private:
  const ::com::caspe::devicemanagement::util::Collect_StopCondition& _internal_stopcondtion() const;
  ::com::caspe::devicemanagement::util::Collect_StopCondition* _internal_mutable_stopcondtion();
  public:
  void unsafe_arena_set_allocated_stopcondtion(
      ::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondtion);
  ::com::caspe::devicemanagement::util::Collect_StopCondition* unsafe_arena_release_stopcondtion();

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.Collect.PartList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interval_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scanning_;
  ::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondtion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class Collect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.Collect) */ {
 public:
  inline Collect() : Collect(nullptr) {};
  virtual ~Collect();

  Collect(const Collect& from);
  Collect(Collect&& from) noexcept
    : Collect() {
    *this = ::std::move(from);
  }

  inline Collect& operator=(const Collect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collect& operator=(Collect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collect* internal_default_instance() {
    return reinterpret_cast<const Collect*>(
               &_Collect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Collect& a, Collect& b) {
    a.Swap(&b);
  }
  inline void Swap(Collect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collect* New() const final {
    return CreateMaybeMessage<Collect>(nullptr);
  }

  Collect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collect& from);
  void MergeFrom(const Collect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.Collect";
  }
  protected:
  explicit Collect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Collect_StopCondition StopCondition;
  typedef Collect_PartList PartList;

  // accessors -------------------------------------------------------

  enum : int {
    kPartListsFieldNumber = 6,
    kCollectModeFieldNumber = 1,
    kNorthAngleFieldNumber = 2,
    kStopConditionFieldNumber = 5,
    kPulseCountFieldNumber = 3,
    kPointDistanceFieldNumber = 4,
  };
  // repeated .com.caspe.devicemanagement.util.Collect.PartList partLists = 6;
  int partlists_size() const;
  private:
  int _internal_partlists_size() const;
  public:
  void clear_partlists();
  ::com::caspe::devicemanagement::util::Collect_PartList* mutable_partlists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Collect_PartList >*
      mutable_partlists();
  private:
  const ::com::caspe::devicemanagement::util::Collect_PartList& _internal_partlists(int index) const;
  ::com::caspe::devicemanagement::util::Collect_PartList* _internal_add_partlists();
  public:
  const ::com::caspe::devicemanagement::util::Collect_PartList& partlists(int index) const;
  ::com::caspe::devicemanagement::util::Collect_PartList* add_partlists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Collect_PartList >&
      partlists() const;

  // string collectMode = 1;
  void clear_collectmode();
  const std::string& collectmode() const;
  void set_collectmode(const std::string& value);
  void set_collectmode(std::string&& value);
  void set_collectmode(const char* value);
  void set_collectmode(const char* value, size_t size);
  std::string* mutable_collectmode();
  std::string* release_collectmode();
  void set_allocated_collectmode(std::string* collectmode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collectmode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collectmode(
      std::string* collectmode);
  private:
  const std::string& _internal_collectmode() const;
  void _internal_set_collectmode(const std::string& value);
  std::string* _internal_mutable_collectmode();
  public:

  // string northAngle = 2;
  void clear_northangle();
  const std::string& northangle() const;
  void set_northangle(const std::string& value);
  void set_northangle(std::string&& value);
  void set_northangle(const char* value);
  void set_northangle(const char* value, size_t size);
  std::string* mutable_northangle();
  std::string* release_northangle();
  void set_allocated_northangle(std::string* northangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_northangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_northangle(
      std::string* northangle);
  private:
  const std::string& _internal_northangle() const;
  void _internal_set_northangle(const std::string& value);
  std::string* _internal_mutable_northangle();
  public:

  // .com.caspe.devicemanagement.util.Collect.StopCondition stopCondition = 5;
  bool has_stopcondition() const;
  private:
  bool _internal_has_stopcondition() const;
  public:
  void clear_stopcondition();
  const ::com::caspe::devicemanagement::util::Collect_StopCondition& stopcondition() const;
  ::com::caspe::devicemanagement::util::Collect_StopCondition* release_stopcondition();
  ::com::caspe::devicemanagement::util::Collect_StopCondition* mutable_stopcondition();
  void set_allocated_stopcondition(::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondition);
  private:
  const ::com::caspe::devicemanagement::util::Collect_StopCondition& _internal_stopcondition() const;
  ::com::caspe::devicemanagement::util::Collect_StopCondition* _internal_mutable_stopcondition();
  public:
  void unsafe_arena_set_allocated_stopcondition(
      ::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondition);
  ::com::caspe::devicemanagement::util::Collect_StopCondition* unsafe_arena_release_stopcondition();

  // int32 pulseCount = 3;
  void clear_pulsecount();
  ::PROTOBUF_NAMESPACE_ID::int32 pulsecount() const;
  void set_pulsecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pulsecount() const;
  void _internal_set_pulsecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pointDistance = 4;
  void clear_pointdistance();
  float pointdistance() const;
  void set_pointdistance(float value);
  private:
  float _internal_pointdistance() const;
  void _internal_set_pointdistance(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.Collect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Collect_PartList > partlists_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectmode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr northangle_;
  ::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondition_;
  ::PROTOBUF_NAMESPACE_ID::int32 pulsecount_;
  float pointdistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class ProcessInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.ProcessInfo) */ {
 public:
  inline ProcessInfo() : ProcessInfo(nullptr) {};
  virtual ~ProcessInfo();

  ProcessInfo(const ProcessInfo& from);
  ProcessInfo(ProcessInfo&& from) noexcept
    : ProcessInfo() {
    *this = ::std::move(from);
  }

  inline ProcessInfo& operator=(const ProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessInfo& operator=(ProcessInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessInfo* internal_default_instance() {
    return reinterpret_cast<const ProcessInfo*>(
               &_ProcessInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProcessInfo& a, ProcessInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessInfo* New() const final {
    return CreateMaybeMessage<ProcessInfo>(nullptr);
  }

  ProcessInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessInfo& from);
  void MergeFrom(const ProcessInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.ProcessInfo";
  }
  protected:
  explicit ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kProcessIdFieldNumber = 2,
    kSAngleFieldNumber = 3,
    kEAngleFieldNumber = 4,
  };
  // string mode = 1;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mode(
      std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // string processId = 2;
  void clear_processid();
  const std::string& processid() const;
  void set_processid(const std::string& value);
  void set_processid(std::string&& value);
  void set_processid(const char* value);
  void set_processid(const char* value, size_t size);
  std::string* mutable_processid();
  std::string* release_processid();
  void set_allocated_processid(std::string* processid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_processid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_processid(
      std::string* processid);
  private:
  const std::string& _internal_processid() const;
  void _internal_set_processid(const std::string& value);
  std::string* _internal_mutable_processid();
  public:

  // string sAngle = 3;
  void clear_sangle();
  const std::string& sangle() const;
  void set_sangle(const std::string& value);
  void set_sangle(std::string&& value);
  void set_sangle(const char* value);
  void set_sangle(const char* value, size_t size);
  std::string* mutable_sangle();
  std::string* release_sangle();
  void set_allocated_sangle(std::string* sangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sangle(
      std::string* sangle);
  private:
  const std::string& _internal_sangle() const;
  void _internal_set_sangle(const std::string& value);
  std::string* _internal_mutable_sangle();
  public:

  // string eAngle = 4;
  void clear_eangle();
  const std::string& eangle() const;
  void set_eangle(const std::string& value);
  void set_eangle(std::string&& value);
  void set_eangle(const char* value);
  void set_eangle(const char* value, size_t size);
  std::string* mutable_eangle();
  std::string* release_eangle();
  void set_allocated_eangle(std::string* eangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_eangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_eangle(
      std::string* eangle);
  private:
  const std::string& _internal_eangle() const;
  void _internal_set_eangle(const std::string& value);
  std::string* _internal_mutable_eangle();
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.ProcessInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eangle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class CollectReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.CollectReply) */ {
 public:
  inline CollectReply() : CollectReply(nullptr) {};
  virtual ~CollectReply();

  CollectReply(const CollectReply& from);
  CollectReply(CollectReply&& from) noexcept
    : CollectReply() {
    *this = ::std::move(from);
  }

  inline CollectReply& operator=(const CollectReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectReply& operator=(CollectReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectReply* internal_default_instance() {
    return reinterpret_cast<const CollectReply*>(
               &_CollectReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CollectReply& a, CollectReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectReply* New() const final {
    return CreateMaybeMessage<CollectReply>(nullptr);
  }

  CollectReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectReply& from);
  void MergeFrom(const CollectReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.CollectReply";
  }
  protected:
  explicit CollectReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 1,
  };
  // .com.caspe.devicemanagement.util.ProcessInfo process = 1;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::com::caspe::devicemanagement::util::ProcessInfo& process() const;
  ::com::caspe::devicemanagement::util::ProcessInfo* release_process();
  ::com::caspe::devicemanagement::util::ProcessInfo* mutable_process();
  void set_allocated_process(::com::caspe::devicemanagement::util::ProcessInfo* process);
  private:
  const ::com::caspe::devicemanagement::util::ProcessInfo& _internal_process() const;
  ::com::caspe::devicemanagement::util::ProcessInfo* _internal_mutable_process();
  public:
  void unsafe_arena_set_allocated_process(
      ::com::caspe::devicemanagement::util::ProcessInfo* process);
  ::com::caspe::devicemanagement::util::ProcessInfo* unsafe_arena_release_process();

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.CollectReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::caspe::devicemanagement::util::ProcessInfo* process_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class SuspendReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.SuspendReply) */ {
 public:
  inline SuspendReply() : SuspendReply(nullptr) {};
  virtual ~SuspendReply();

  SuspendReply(const SuspendReply& from);
  SuspendReply(SuspendReply&& from) noexcept
    : SuspendReply() {
    *this = ::std::move(from);
  }

  inline SuspendReply& operator=(const SuspendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendReply& operator=(SuspendReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuspendReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuspendReply* internal_default_instance() {
    return reinterpret_cast<const SuspendReply*>(
               &_SuspendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SuspendReply& a, SuspendReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuspendReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuspendReply* New() const final {
    return CreateMaybeMessage<SuspendReply>(nullptr);
  }

  SuspendReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuspendReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuspendReply& from);
  void MergeFrom(const SuspendReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuspendReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.SuspendReply";
  }
  protected:
  explicit SuspendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHAngleFieldNumber = 3,
    kVAngleFieldNumber = 4,
  };
  // string hAngle = 3;
  void clear_hangle();
  const std::string& hangle() const;
  void set_hangle(const std::string& value);
  void set_hangle(std::string&& value);
  void set_hangle(const char* value);
  void set_hangle(const char* value, size_t size);
  std::string* mutable_hangle();
  std::string* release_hangle();
  void set_allocated_hangle(std::string* hangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hangle(
      std::string* hangle);
  private:
  const std::string& _internal_hangle() const;
  void _internal_set_hangle(const std::string& value);
  std::string* _internal_mutable_hangle();
  public:

  // string vAngle = 4;
  void clear_vangle();
  const std::string& vangle() const;
  void set_vangle(const std::string& value);
  void set_vangle(std::string&& value);
  void set_vangle(const char* value);
  void set_vangle(const char* value, size_t size);
  std::string* mutable_vangle();
  std::string* release_vangle();
  void set_allocated_vangle(std::string* vangle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vangle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vangle(
      std::string* vangle);
  private:
  const std::string& _internal_vangle() const;
  void _internal_set_vangle(const std::string& value);
  std::string* _internal_mutable_vangle();
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.SuspendReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vangle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class CollectComplete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.CollectComplete) */ {
 public:
  inline CollectComplete() : CollectComplete(nullptr) {};
  virtual ~CollectComplete();

  CollectComplete(const CollectComplete& from);
  CollectComplete(CollectComplete&& from) noexcept
    : CollectComplete() {
    *this = ::std::move(from);
  }

  inline CollectComplete& operator=(const CollectComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectComplete& operator=(CollectComplete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectComplete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectComplete* internal_default_instance() {
    return reinterpret_cast<const CollectComplete*>(
               &_CollectComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CollectComplete& a, CollectComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectComplete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectComplete* New() const final {
    return CreateMaybeMessage<CollectComplete>(nullptr);
  }

  CollectComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectComplete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectComplete& from);
  void MergeFrom(const CollectComplete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectComplete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.CollectComplete";
  }
  protected:
  explicit CollectComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kProcessFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reason(
      std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .com.caspe.devicemanagement.util.ProcessInfo process = 1;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::com::caspe::devicemanagement::util::ProcessInfo& process() const;
  ::com::caspe::devicemanagement::util::ProcessInfo* release_process();
  ::com::caspe::devicemanagement::util::ProcessInfo* mutable_process();
  void set_allocated_process(::com::caspe::devicemanagement::util::ProcessInfo* process);
  private:
  const ::com::caspe::devicemanagement::util::ProcessInfo& _internal_process() const;
  ::com::caspe::devicemanagement::util::ProcessInfo* _internal_mutable_process();
  public:
  void unsafe_arena_set_allocated_process(
      ::com::caspe::devicemanagement::util::ProcessInfo* process);
  ::com::caspe::devicemanagement::util::ProcessInfo* unsafe_arena_release_process();

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.CollectComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::com::caspe::devicemanagement::util::ProcessInfo* process_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class StatusReport_Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.StatusReport.Status) */ {
 public:
  inline StatusReport_Status() : StatusReport_Status(nullptr) {};
  virtual ~StatusReport_Status();

  StatusReport_Status(const StatusReport_Status& from);
  StatusReport_Status(StatusReport_Status&& from) noexcept
    : StatusReport_Status() {
    *this = ::std::move(from);
  }

  inline StatusReport_Status& operator=(const StatusReport_Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusReport_Status& operator=(StatusReport_Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusReport_Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusReport_Status* internal_default_instance() {
    return reinterpret_cast<const StatusReport_Status*>(
               &_StatusReport_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StatusReport_Status& a, StatusReport_Status& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusReport_Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusReport_Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusReport_Status* New() const final {
    return CreateMaybeMessage<StatusReport_Status>(nullptr);
  }

  StatusReport_Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusReport_Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusReport_Status& from);
  void MergeFrom(const StatusReport_Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusReport_Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.StatusReport.Status";
  }
  protected:
  explicit StatusReport_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string error = 3;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error(
      std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.StatusReport.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class StatusReport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.StatusReport) */ {
 public:
  inline StatusReport() : StatusReport(nullptr) {};
  virtual ~StatusReport();

  StatusReport(const StatusReport& from);
  StatusReport(StatusReport&& from) noexcept
    : StatusReport() {
    *this = ::std::move(from);
  }

  inline StatusReport& operator=(const StatusReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusReport& operator=(StatusReport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusReport* internal_default_instance() {
    return reinterpret_cast<const StatusReport*>(
               &_StatusReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StatusReport& a, StatusReport& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusReport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusReport* New() const final {
    return CreateMaybeMessage<StatusReport>(nullptr);
  }

  StatusReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusReport& from);
  void MergeFrom(const StatusReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.StatusReport";
  }
  protected:
  explicit StatusReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StatusReport_Status Status;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .com.caspe.devicemanagement.util.StatusReport.Status status = 1;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::com::caspe::devicemanagement::util::StatusReport_Status* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::StatusReport_Status >*
      mutable_status();
  private:
  const ::com::caspe::devicemanagement::util::StatusReport_Status& _internal_status(int index) const;
  ::com::caspe::devicemanagement::util::StatusReport_Status* _internal_add_status();
  public:
  const ::com::caspe::devicemanagement::util::StatusReport_Status& status(int index) const;
  ::com::caspe::devicemanagement::util::StatusReport_Status* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::StatusReport_Status >&
      status() const;

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.StatusReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::StatusReport_Status > status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class Alg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.Alg) */ {
 public:
  inline Alg() : Alg(nullptr) {};
  virtual ~Alg();

  Alg(const Alg& from);
  Alg(Alg&& from) noexcept
    : Alg() {
    *this = ::std::move(from);
  }

  inline Alg& operator=(const Alg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alg& operator=(Alg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Alg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alg* internal_default_instance() {
    return reinterpret_cast<const Alg*>(
               &_Alg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Alg& a, Alg& b) {
    a.Swap(&b);
  }
  inline void Swap(Alg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Alg* New() const final {
    return CreateMaybeMessage<Alg>(nullptr);
  }

  Alg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Alg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Alg& from);
  void MergeFrom(const Alg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.Alg";
  }
  protected:
  explicit Alg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtinAlgorithmTypeFieldNumber = 1,
    kFixCloudyExtinFieldNumber = 2,
    kFixReferHeightFieldNumber = 4,
    kDenoisingExtinFieldNumber = 5,
    kSignalSplicingFieldNumber = 6,
    kDenoisingFieldNumber = 10,
    kEchoDefaultFieldNumber = 12,
    kSmoothFieldNumber = 15,
    kVisibilityDefaultFieldNumber = 24,
    kVisibilityOutCloudFieldNumber = 25,
    kAodDefaultFieldNumber = 28,
    kAodOutCloudFieldNumber = 29,
    kOverlapCorrectFieldNumber = 32,
    kCloudExtThreshFieldNumber = 3,
    kSnrThreshExtinFieldNumber = 7,
    kRefHeight532FieldNumber = 8,
    kDepolFactorFieldNumber = 9,
    kSnrThreshDepolFieldNumber = 11,
    kEchoStartFieldNumber = 13,
    kEchoEndFieldNumber = 14,
    kSmoothTimesFieldNumber = 16,
    kWindowLengthFieldNumber = 17,
    kPm10RatioAFieldNumber = 18,
    kPm10RatioBFieldNumber = 19,
    kPm10RatioCFieldNumber = 20,
    kPm25RatioAFieldNumber = 21,
    kPm25RatioBFieldNumber = 22,
    kPm25RatioCFieldNumber = 23,
    kVisibilityStartHFieldNumber = 26,
    kVisibilityEndHFieldNumber = 27,
    kAodStartLimitFieldNumber = 30,
    kAodEndLimitFieldNumber = 31,
    kExtinCoeaFieldNumber = 33,
    kExtinCoebFieldNumber = 34,
    kRemovePointFieldNumber = 35,
    kEmptyDistanceFieldNumber = 36,
  };
  // string extinAlgorithmType = 1;
  void clear_extinalgorithmtype();
  const std::string& extinalgorithmtype() const;
  void set_extinalgorithmtype(const std::string& value);
  void set_extinalgorithmtype(std::string&& value);
  void set_extinalgorithmtype(const char* value);
  void set_extinalgorithmtype(const char* value, size_t size);
  std::string* mutable_extinalgorithmtype();
  std::string* release_extinalgorithmtype();
  void set_allocated_extinalgorithmtype(std::string* extinalgorithmtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_extinalgorithmtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_extinalgorithmtype(
      std::string* extinalgorithmtype);
  private:
  const std::string& _internal_extinalgorithmtype() const;
  void _internal_set_extinalgorithmtype(const std::string& value);
  std::string* _internal_mutable_extinalgorithmtype();
  public:

  // string fixCloudyExtin = 2;
  void clear_fixcloudyextin();
  const std::string& fixcloudyextin() const;
  void set_fixcloudyextin(const std::string& value);
  void set_fixcloudyextin(std::string&& value);
  void set_fixcloudyextin(const char* value);
  void set_fixcloudyextin(const char* value, size_t size);
  std::string* mutable_fixcloudyextin();
  std::string* release_fixcloudyextin();
  void set_allocated_fixcloudyextin(std::string* fixcloudyextin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fixcloudyextin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fixcloudyextin(
      std::string* fixcloudyextin);
  private:
  const std::string& _internal_fixcloudyextin() const;
  void _internal_set_fixcloudyextin(const std::string& value);
  std::string* _internal_mutable_fixcloudyextin();
  public:

  // string fixReferHeight = 4;
  void clear_fixreferheight();
  const std::string& fixreferheight() const;
  void set_fixreferheight(const std::string& value);
  void set_fixreferheight(std::string&& value);
  void set_fixreferheight(const char* value);
  void set_fixreferheight(const char* value, size_t size);
  std::string* mutable_fixreferheight();
  std::string* release_fixreferheight();
  void set_allocated_fixreferheight(std::string* fixreferheight);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fixreferheight();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fixreferheight(
      std::string* fixreferheight);
  private:
  const std::string& _internal_fixreferheight() const;
  void _internal_set_fixreferheight(const std::string& value);
  std::string* _internal_mutable_fixreferheight();
  public:

  // string denoisingExtin = 5;
  void clear_denoisingextin();
  const std::string& denoisingextin() const;
  void set_denoisingextin(const std::string& value);
  void set_denoisingextin(std::string&& value);
  void set_denoisingextin(const char* value);
  void set_denoisingextin(const char* value, size_t size);
  std::string* mutable_denoisingextin();
  std::string* release_denoisingextin();
  void set_allocated_denoisingextin(std::string* denoisingextin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_denoisingextin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_denoisingextin(
      std::string* denoisingextin);
  private:
  const std::string& _internal_denoisingextin() const;
  void _internal_set_denoisingextin(const std::string& value);
  std::string* _internal_mutable_denoisingextin();
  public:

  // string signalSplicing = 6;
  void clear_signalsplicing();
  const std::string& signalsplicing() const;
  void set_signalsplicing(const std::string& value);
  void set_signalsplicing(std::string&& value);
  void set_signalsplicing(const char* value);
  void set_signalsplicing(const char* value, size_t size);
  std::string* mutable_signalsplicing();
  std::string* release_signalsplicing();
  void set_allocated_signalsplicing(std::string* signalsplicing);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signalsplicing();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signalsplicing(
      std::string* signalsplicing);
  private:
  const std::string& _internal_signalsplicing() const;
  void _internal_set_signalsplicing(const std::string& value);
  std::string* _internal_mutable_signalsplicing();
  public:

  // string denoising = 10;
  void clear_denoising();
  const std::string& denoising() const;
  void set_denoising(const std::string& value);
  void set_denoising(std::string&& value);
  void set_denoising(const char* value);
  void set_denoising(const char* value, size_t size);
  std::string* mutable_denoising();
  std::string* release_denoising();
  void set_allocated_denoising(std::string* denoising);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_denoising();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_denoising(
      std::string* denoising);
  private:
  const std::string& _internal_denoising() const;
  void _internal_set_denoising(const std::string& value);
  std::string* _internal_mutable_denoising();
  public:

  // string echoDefault = 12;
  void clear_echodefault();
  const std::string& echodefault() const;
  void set_echodefault(const std::string& value);
  void set_echodefault(std::string&& value);
  void set_echodefault(const char* value);
  void set_echodefault(const char* value, size_t size);
  std::string* mutable_echodefault();
  std::string* release_echodefault();
  void set_allocated_echodefault(std::string* echodefault);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_echodefault();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_echodefault(
      std::string* echodefault);
  private:
  const std::string& _internal_echodefault() const;
  void _internal_set_echodefault(const std::string& value);
  std::string* _internal_mutable_echodefault();
  public:

  // string smooth = 15;
  void clear_smooth();
  const std::string& smooth() const;
  void set_smooth(const std::string& value);
  void set_smooth(std::string&& value);
  void set_smooth(const char* value);
  void set_smooth(const char* value, size_t size);
  std::string* mutable_smooth();
  std::string* release_smooth();
  void set_allocated_smooth(std::string* smooth);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_smooth();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_smooth(
      std::string* smooth);
  private:
  const std::string& _internal_smooth() const;
  void _internal_set_smooth(const std::string& value);
  std::string* _internal_mutable_smooth();
  public:

  // string visibilityDefault = 24;
  void clear_visibilitydefault();
  const std::string& visibilitydefault() const;
  void set_visibilitydefault(const std::string& value);
  void set_visibilitydefault(std::string&& value);
  void set_visibilitydefault(const char* value);
  void set_visibilitydefault(const char* value, size_t size);
  std::string* mutable_visibilitydefault();
  std::string* release_visibilitydefault();
  void set_allocated_visibilitydefault(std::string* visibilitydefault);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_visibilitydefault();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_visibilitydefault(
      std::string* visibilitydefault);
  private:
  const std::string& _internal_visibilitydefault() const;
  void _internal_set_visibilitydefault(const std::string& value);
  std::string* _internal_mutable_visibilitydefault();
  public:

  // string visibilityOutCloud = 25;
  void clear_visibilityoutcloud();
  const std::string& visibilityoutcloud() const;
  void set_visibilityoutcloud(const std::string& value);
  void set_visibilityoutcloud(std::string&& value);
  void set_visibilityoutcloud(const char* value);
  void set_visibilityoutcloud(const char* value, size_t size);
  std::string* mutable_visibilityoutcloud();
  std::string* release_visibilityoutcloud();
  void set_allocated_visibilityoutcloud(std::string* visibilityoutcloud);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_visibilityoutcloud();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_visibilityoutcloud(
      std::string* visibilityoutcloud);
  private:
  const std::string& _internal_visibilityoutcloud() const;
  void _internal_set_visibilityoutcloud(const std::string& value);
  std::string* _internal_mutable_visibilityoutcloud();
  public:

  // string aodDefault = 28;
  void clear_aoddefault();
  const std::string& aoddefault() const;
  void set_aoddefault(const std::string& value);
  void set_aoddefault(std::string&& value);
  void set_aoddefault(const char* value);
  void set_aoddefault(const char* value, size_t size);
  std::string* mutable_aoddefault();
  std::string* release_aoddefault();
  void set_allocated_aoddefault(std::string* aoddefault);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_aoddefault();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aoddefault(
      std::string* aoddefault);
  private:
  const std::string& _internal_aoddefault() const;
  void _internal_set_aoddefault(const std::string& value);
  std::string* _internal_mutable_aoddefault();
  public:

  // string aodOutCloud = 29;
  void clear_aodoutcloud();
  const std::string& aodoutcloud() const;
  void set_aodoutcloud(const std::string& value);
  void set_aodoutcloud(std::string&& value);
  void set_aodoutcloud(const char* value);
  void set_aodoutcloud(const char* value, size_t size);
  std::string* mutable_aodoutcloud();
  std::string* release_aodoutcloud();
  void set_allocated_aodoutcloud(std::string* aodoutcloud);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_aodoutcloud();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aodoutcloud(
      std::string* aodoutcloud);
  private:
  const std::string& _internal_aodoutcloud() const;
  void _internal_set_aodoutcloud(const std::string& value);
  std::string* _internal_mutable_aodoutcloud();
  public:

  // string overlapCorrect = 32;
  void clear_overlapcorrect();
  const std::string& overlapcorrect() const;
  void set_overlapcorrect(const std::string& value);
  void set_overlapcorrect(std::string&& value);
  void set_overlapcorrect(const char* value);
  void set_overlapcorrect(const char* value, size_t size);
  std::string* mutable_overlapcorrect();
  std::string* release_overlapcorrect();
  void set_allocated_overlapcorrect(std::string* overlapcorrect);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_overlapcorrect();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_overlapcorrect(
      std::string* overlapcorrect);
  private:
  const std::string& _internal_overlapcorrect() const;
  void _internal_set_overlapcorrect(const std::string& value);
  std::string* _internal_mutable_overlapcorrect();
  public:

  // float cloudExtThresh = 3;
  void clear_cloudextthresh();
  float cloudextthresh() const;
  void set_cloudextthresh(float value);
  private:
  float _internal_cloudextthresh() const;
  void _internal_set_cloudextthresh(float value);
  public:

  // float snrThreshExtin = 7;
  void clear_snrthreshextin();
  float snrthreshextin() const;
  void set_snrthreshextin(float value);
  private:
  float _internal_snrthreshextin() const;
  void _internal_set_snrthreshextin(float value);
  public:

  // float refHeight532 = 8;
  void clear_refheight532();
  float refheight532() const;
  void set_refheight532(float value);
  private:
  float _internal_refheight532() const;
  void _internal_set_refheight532(float value);
  public:

  // float depolFactor = 9;
  void clear_depolfactor();
  float depolfactor() const;
  void set_depolfactor(float value);
  private:
  float _internal_depolfactor() const;
  void _internal_set_depolfactor(float value);
  public:

  // float snrThreshDepol = 11;
  void clear_snrthreshdepol();
  float snrthreshdepol() const;
  void set_snrthreshdepol(float value);
  private:
  float _internal_snrthreshdepol() const;
  void _internal_set_snrthreshdepol(float value);
  public:

  // float echoStart = 13;
  void clear_echostart();
  float echostart() const;
  void set_echostart(float value);
  private:
  float _internal_echostart() const;
  void _internal_set_echostart(float value);
  public:

  // float echoEnd = 14;
  void clear_echoend();
  float echoend() const;
  void set_echoend(float value);
  private:
  float _internal_echoend() const;
  void _internal_set_echoend(float value);
  public:

  // int32 smoothTimes = 16;
  void clear_smoothtimes();
  ::PROTOBUF_NAMESPACE_ID::int32 smoothtimes() const;
  void set_smoothtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_smoothtimes() const;
  void _internal_set_smoothtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 windowLength = 17;
  void clear_windowlength();
  ::PROTOBUF_NAMESPACE_ID::int32 windowlength() const;
  void set_windowlength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_windowlength() const;
  void _internal_set_windowlength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pm10RatioA = 18;
  void clear_pm10ratioa();
  float pm10ratioa() const;
  void set_pm10ratioa(float value);
  private:
  float _internal_pm10ratioa() const;
  void _internal_set_pm10ratioa(float value);
  public:

  // float pm10RatioB = 19;
  void clear_pm10ratiob();
  float pm10ratiob() const;
  void set_pm10ratiob(float value);
  private:
  float _internal_pm10ratiob() const;
  void _internal_set_pm10ratiob(float value);
  public:

  // float pm10RatioC = 20;
  void clear_pm10ratioc();
  float pm10ratioc() const;
  void set_pm10ratioc(float value);
  private:
  float _internal_pm10ratioc() const;
  void _internal_set_pm10ratioc(float value);
  public:

  // float pm25RatioA = 21;
  void clear_pm25ratioa();
  float pm25ratioa() const;
  void set_pm25ratioa(float value);
  private:
  float _internal_pm25ratioa() const;
  void _internal_set_pm25ratioa(float value);
  public:

  // float pm25RatioB = 22;
  void clear_pm25ratiob();
  float pm25ratiob() const;
  void set_pm25ratiob(float value);
  private:
  float _internal_pm25ratiob() const;
  void _internal_set_pm25ratiob(float value);
  public:

  // float pm25RatioC = 23;
  void clear_pm25ratioc();
  float pm25ratioc() const;
  void set_pm25ratioc(float value);
  private:
  float _internal_pm25ratioc() const;
  void _internal_set_pm25ratioc(float value);
  public:

  // float visibilityStartH = 26;
  void clear_visibilitystarth();
  float visibilitystarth() const;
  void set_visibilitystarth(float value);
  private:
  float _internal_visibilitystarth() const;
  void _internal_set_visibilitystarth(float value);
  public:

  // float visibilityEndH = 27;
  void clear_visibilityendh();
  float visibilityendh() const;
  void set_visibilityendh(float value);
  private:
  float _internal_visibilityendh() const;
  void _internal_set_visibilityendh(float value);
  public:

  // float aodStartLimit = 30;
  void clear_aodstartlimit();
  float aodstartlimit() const;
  void set_aodstartlimit(float value);
  private:
  float _internal_aodstartlimit() const;
  void _internal_set_aodstartlimit(float value);
  public:

  // float aodEndLimit = 31;
  void clear_aodendlimit();
  float aodendlimit() const;
  void set_aodendlimit(float value);
  private:
  float _internal_aodendlimit() const;
  void _internal_set_aodendlimit(float value);
  public:

  // float extinCoea = 33;
  void clear_extincoea();
  float extincoea() const;
  void set_extincoea(float value);
  private:
  float _internal_extincoea() const;
  void _internal_set_extincoea(float value);
  public:

  // float extinCoeb = 34;
  void clear_extincoeb();
  float extincoeb() const;
  void set_extincoeb(float value);
  private:
  float _internal_extincoeb() const;
  void _internal_set_extincoeb(float value);
  public:

  // int32 removePoint = 35;
  void clear_removepoint();
  ::PROTOBUF_NAMESPACE_ID::int32 removepoint() const;
  void set_removepoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_removepoint() const;
  void _internal_set_removepoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float emptyDistance = 36;
  void clear_emptydistance();
  float emptydistance() const;
  void set_emptydistance(float value);
  private:
  float _internal_emptydistance() const;
  void _internal_set_emptydistance(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.Alg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extinalgorithmtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixcloudyextin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixreferheight_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denoisingextin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalsplicing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denoising_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echodefault_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smooth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visibilitydefault_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visibilityoutcloud_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aoddefault_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aodoutcloud_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overlapcorrect_;
  float cloudextthresh_;
  float snrthreshextin_;
  float refheight532_;
  float depolfactor_;
  float snrthreshdepol_;
  float echostart_;
  float echoend_;
  ::PROTOBUF_NAMESPACE_ID::int32 smoothtimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 windowlength_;
  float pm10ratioa_;
  float pm10ratiob_;
  float pm10ratioc_;
  float pm25ratioa_;
  float pm25ratiob_;
  float pm25ratioc_;
  float visibilitystarth_;
  float visibilityendh_;
  float aodstartlimit_;
  float aodendlimit_;
  float extincoea_;
  float extincoeb_;
  ::PROTOBUF_NAMESPACE_ID::int32 removepoint_;
  float emptydistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class AlarmList_Alarm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.AlarmList.Alarm) */ {
 public:
  inline AlarmList_Alarm() : AlarmList_Alarm(nullptr) {};
  virtual ~AlarmList_Alarm();

  AlarmList_Alarm(const AlarmList_Alarm& from);
  AlarmList_Alarm(AlarmList_Alarm&& from) noexcept
    : AlarmList_Alarm() {
    *this = ::std::move(from);
  }

  inline AlarmList_Alarm& operator=(const AlarmList_Alarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmList_Alarm& operator=(AlarmList_Alarm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmList_Alarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmList_Alarm* internal_default_instance() {
    return reinterpret_cast<const AlarmList_Alarm*>(
               &_AlarmList_Alarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AlarmList_Alarm& a, AlarmList_Alarm& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmList_Alarm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmList_Alarm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmList_Alarm* New() const final {
    return CreateMaybeMessage<AlarmList_Alarm>(nullptr);
  }

  AlarmList_Alarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmList_Alarm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmList_Alarm& from);
  void MergeFrom(const AlarmList_Alarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmList_Alarm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.AlarmList.Alarm";
  }
  protected:
  explicit AlarmList_Alarm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kCategoryNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kAlarmTimeFieldNumber = 4,
  };
  // string level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_level();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level(
      std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string categoryName = 2;
  void clear_categoryname();
  const std::string& categoryname() const;
  void set_categoryname(const std::string& value);
  void set_categoryname(std::string&& value);
  void set_categoryname(const char* value);
  void set_categoryname(const char* value, size_t size);
  std::string* mutable_categoryname();
  std::string* release_categoryname();
  void set_allocated_categoryname(std::string* categoryname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_categoryname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_categoryname(
      std::string* categoryname);
  private:
  const std::string& _internal_categoryname() const;
  void _internal_set_categoryname(const std::string& value);
  std::string* _internal_mutable_categoryname();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_desc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string alarmTime = 4;
  void clear_alarmtime();
  const std::string& alarmtime() const;
  void set_alarmtime(const std::string& value);
  void set_alarmtime(std::string&& value);
  void set_alarmtime(const char* value);
  void set_alarmtime(const char* value, size_t size);
  std::string* mutable_alarmtime();
  std::string* release_alarmtime();
  void set_allocated_alarmtime(std::string* alarmtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_alarmtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_alarmtime(
      std::string* alarmtime);
  private:
  const std::string& _internal_alarmtime() const;
  void _internal_set_alarmtime(const std::string& value);
  std::string* _internal_mutable_alarmtime();
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.AlarmList.Alarm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr categoryname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alarmtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class AlarmList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.AlarmList) */ {
 public:
  inline AlarmList() : AlarmList(nullptr) {};
  virtual ~AlarmList();

  AlarmList(const AlarmList& from);
  AlarmList(AlarmList&& from) noexcept
    : AlarmList() {
    *this = ::std::move(from);
  }

  inline AlarmList& operator=(const AlarmList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmList& operator=(AlarmList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmList* internal_default_instance() {
    return reinterpret_cast<const AlarmList*>(
               &_AlarmList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AlarmList& a, AlarmList& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmList* New() const final {
    return CreateMaybeMessage<AlarmList>(nullptr);
  }

  AlarmList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmList& from);
  void MergeFrom(const AlarmList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.AlarmList";
  }
  protected:
  explicit AlarmList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlarmList_Alarm Alarm;

  // accessors -------------------------------------------------------

  enum : int {
    kAlarmFieldNumber = 1,
  };
  // repeated .com.caspe.devicemanagement.util.AlarmList.Alarm alarm = 1;
  int alarm_size() const;
  private:
  int _internal_alarm_size() const;
  public:
  void clear_alarm();
  ::com::caspe::devicemanagement::util::AlarmList_Alarm* mutable_alarm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::AlarmList_Alarm >*
      mutable_alarm();
  private:
  const ::com::caspe::devicemanagement::util::AlarmList_Alarm& _internal_alarm(int index) const;
  ::com::caspe::devicemanagement::util::AlarmList_Alarm* _internal_add_alarm();
  public:
  const ::com::caspe::devicemanagement::util::AlarmList_Alarm& alarm(int index) const;
  ::com::caspe::devicemanagement::util::AlarmList_Alarm* add_alarm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::AlarmList_Alarm >&
      alarm() const;

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.AlarmList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::AlarmList_Alarm > alarm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class Signal_Channel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.Signal.Channel) */ {
 public:
  inline Signal_Channel() : Signal_Channel(nullptr) {};
  virtual ~Signal_Channel();

  Signal_Channel(const Signal_Channel& from);
  Signal_Channel(Signal_Channel&& from) noexcept
    : Signal_Channel() {
    *this = ::std::move(from);
  }

  inline Signal_Channel& operator=(const Signal_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal_Channel& operator=(Signal_Channel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signal_Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal_Channel* internal_default_instance() {
    return reinterpret_cast<const Signal_Channel*>(
               &_Signal_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Signal_Channel& a, Signal_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal_Channel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal_Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signal_Channel* New() const final {
    return CreateMaybeMessage<Signal_Channel>(nullptr);
  }

  Signal_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signal_Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signal_Channel& from);
  void MergeFrom(const Signal_Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal_Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.Signal.Channel";
  }
  protected:
  explicit Signal_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kChannelNameFieldNumber = 1,
    kPointCountFieldNumber = 2,
    kSpaceResolutionFieldNumber = 3,
    kWaveLengthFieldNumber = 4,
    kAdcBitFieldNumber = 5,
    kPulseCountFieldNumber = 6,
  };
  // repeated int64 data = 7;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_data();

  // string channelName = 1;
  void clear_channelname();
  const std::string& channelname() const;
  void set_channelname(const std::string& value);
  void set_channelname(std::string&& value);
  void set_channelname(const char* value);
  void set_channelname(const char* value, size_t size);
  std::string* mutable_channelname();
  std::string* release_channelname();
  void set_allocated_channelname(std::string* channelname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channelname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channelname(
      std::string* channelname);
  private:
  const std::string& _internal_channelname() const;
  void _internal_set_channelname(const std::string& value);
  std::string* _internal_mutable_channelname();
  public:

  // int32 pointCount = 2;
  void clear_pointcount();
  ::PROTOBUF_NAMESPACE_ID::int32 pointcount() const;
  void set_pointcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pointcount() const;
  void _internal_set_pointcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float spaceResolution = 3;
  void clear_spaceresolution();
  float spaceresolution() const;
  void set_spaceresolution(float value);
  private:
  float _internal_spaceresolution() const;
  void _internal_set_spaceresolution(float value);
  public:

  // int32 waveLength = 4;
  void clear_wavelength();
  ::PROTOBUF_NAMESPACE_ID::int32 wavelength() const;
  void set_wavelength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wavelength() const;
  void _internal_set_wavelength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 adcBit = 5;
  void clear_adcbit();
  ::PROTOBUF_NAMESPACE_ID::int32 adcbit() const;
  void set_adcbit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adcbit() const;
  void _internal_set_adcbit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pulseCount = 6;
  void clear_pulsecount();
  ::PROTOBUF_NAMESPACE_ID::int32 pulsecount() const;
  void set_pulsecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pulsecount() const;
  void _internal_set_pulsecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.Signal.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelname_;
  ::PROTOBUF_NAMESPACE_ID::int32 pointcount_;
  float spaceresolution_;
  ::PROTOBUF_NAMESPACE_ID::int32 wavelength_;
  ::PROTOBUF_NAMESPACE_ID::int32 adcbit_;
  ::PROTOBUF_NAMESPACE_ID::int32 pulsecount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class Signal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {};
  virtual ~Signal();

  Signal(const Signal& from);
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signal* New() const final {
    return CreateMaybeMessage<Signal>(nullptr);
  }

  Signal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.Signal";
  }
  protected:
  explicit Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Signal_Channel Channel;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .com.caspe.devicemanagement.util.Signal.Channel channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::com::caspe::devicemanagement::util::Signal_Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Signal_Channel >*
      mutable_channels();
  private:
  const ::com::caspe::devicemanagement::util::Signal_Channel& _internal_channels(int index) const;
  ::com::caspe::devicemanagement::util::Signal_Channel* _internal_add_channels();
  public:
  const ::com::caspe::devicemanagement::util::Signal_Channel& channels(int index) const;
  ::com::caspe::devicemanagement::util::Signal_Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Signal_Channel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.Signal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Signal_Channel > channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class SysParam_DefogTiming PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.SysParam.DefogTiming) */ {
 public:
  inline SysParam_DefogTiming() : SysParam_DefogTiming(nullptr) {};
  virtual ~SysParam_DefogTiming();

  SysParam_DefogTiming(const SysParam_DefogTiming& from);
  SysParam_DefogTiming(SysParam_DefogTiming&& from) noexcept
    : SysParam_DefogTiming() {
    *this = ::std::move(from);
  }

  inline SysParam_DefogTiming& operator=(const SysParam_DefogTiming& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysParam_DefogTiming& operator=(SysParam_DefogTiming&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SysParam_DefogTiming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysParam_DefogTiming* internal_default_instance() {
    return reinterpret_cast<const SysParam_DefogTiming*>(
               &_SysParam_DefogTiming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SysParam_DefogTiming& a, SysParam_DefogTiming& b) {
    a.Swap(&b);
  }
  inline void Swap(SysParam_DefogTiming* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysParam_DefogTiming* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysParam_DefogTiming* New() const final {
    return CreateMaybeMessage<SysParam_DefogTiming>(nullptr);
  }

  SysParam_DefogTiming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysParam_DefogTiming>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SysParam_DefogTiming& from);
  void MergeFrom(const SysParam_DefogTiming& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SysParam_DefogTiming* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.SysParam.DefogTiming";
  }
  protected:
  explicit SysParam_DefogTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // string start = 1;
  void clear_start();
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start(
      std::string* start);
  private:
  const std::string& _internal_start() const;
  void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string end = 2;
  void clear_end();
  const std::string& end() const;
  void set_end(const std::string& value);
  void set_end(std::string&& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  std::string* mutable_end();
  std::string* release_end();
  void set_allocated_end(std::string* end);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end(
      std::string* end);
  private:
  const std::string& _internal_end() const;
  void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.SysParam.DefogTiming)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class SysParam_HeaterTiming PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.SysParam.HeaterTiming) */ {
 public:
  inline SysParam_HeaterTiming() : SysParam_HeaterTiming(nullptr) {};
  virtual ~SysParam_HeaterTiming();

  SysParam_HeaterTiming(const SysParam_HeaterTiming& from);
  SysParam_HeaterTiming(SysParam_HeaterTiming&& from) noexcept
    : SysParam_HeaterTiming() {
    *this = ::std::move(from);
  }

  inline SysParam_HeaterTiming& operator=(const SysParam_HeaterTiming& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysParam_HeaterTiming& operator=(SysParam_HeaterTiming&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SysParam_HeaterTiming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysParam_HeaterTiming* internal_default_instance() {
    return reinterpret_cast<const SysParam_HeaterTiming*>(
               &_SysParam_HeaterTiming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SysParam_HeaterTiming& a, SysParam_HeaterTiming& b) {
    a.Swap(&b);
  }
  inline void Swap(SysParam_HeaterTiming* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysParam_HeaterTiming* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysParam_HeaterTiming* New() const final {
    return CreateMaybeMessage<SysParam_HeaterTiming>(nullptr);
  }

  SysParam_HeaterTiming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysParam_HeaterTiming>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SysParam_HeaterTiming& from);
  void MergeFrom(const SysParam_HeaterTiming& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SysParam_HeaterTiming* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.SysParam.HeaterTiming";
  }
  protected:
  explicit SysParam_HeaterTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // string start = 1;
  void clear_start();
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start(
      std::string* start);
  private:
  const std::string& _internal_start() const;
  void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string end = 2;
  void clear_end();
  const std::string& end() const;
  void set_end(const std::string& value);
  void set_end(std::string&& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  std::string* mutable_end();
  std::string* release_end();
  void set_allocated_end(std::string* end);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end(
      std::string* end);
  private:
  const std::string& _internal_end() const;
  void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class SysParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.SysParam) */ {
 public:
  inline SysParam() : SysParam(nullptr) {};
  virtual ~SysParam();

  SysParam(const SysParam& from);
  SysParam(SysParam&& from) noexcept
    : SysParam() {
    *this = ::std::move(from);
  }

  inline SysParam& operator=(const SysParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysParam& operator=(SysParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SysParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SysParam* internal_default_instance() {
    return reinterpret_cast<const SysParam*>(
               &_SysParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SysParam& a, SysParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SysParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SysParam* New() const final {
    return CreateMaybeMessage<SysParam>(nullptr);
  }

  SysParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SysParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SysParam& from);
  void MergeFrom(const SysParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SysParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.SysParam";
  }
  protected:
  explicit SysParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SysParam_DefogTiming DefogTiming;
  typedef SysParam_HeaterTiming HeaterTiming;

  // accessors -------------------------------------------------------

  enum : int {
    kDefogTimingFieldNumber = 27,
    kHeaterTimingFieldNumber = 29,
    kChannel1FieldNumber = 13,
    kChannel2FieldNumber = 14,
    kChannel3FieldNumber = 15,
    kChannel4FieldNumber = 16,
    kChannel5FieldNumber = 17,
    kChannel6FieldNumber = 18,
    kChannel7FieldNumber = 19,
    kChannel8FieldNumber = 20,
    kDefogModeFieldNumber = 24,
    kDefogAutoConditionFieldNumber = 25,
    kHeaterModeFieldNumber = 28,
    kSysPointDistFieldNumber = 1,
    kSysPulseCountFieldNumber = 2,
    kEnableGalFieldNumber = 3,
    kEnableUpsFieldNumber = 4,
    kEnableCompassFieldNumber = 5,
    kEnableGpsFieldNumber = 6,
    kEnableCameraFieldNumber = 7,
    kEnableYunCameraFieldNumber = 8,
    kEnableHeaterFieldNumber = 9,
    kEnableDefogFieldNumber = 10,
    kLaserHertzFieldNumber = 21,
    kLaserAmpereFieldNumber = 22,
    kEnableVirtualGpsFieldNumber = 11,
    kYunParamResetFieldNumber = 12,
    kDefogHeat1FieldNumber = 32,
    kDefogHeat2FieldNumber = 33,
    kGalSpeedFieldNumber = 23,
    kDefogAutoValueFieldNumber = 26,
    kVirtualGpsLonFieldNumber = 30,
    kVirtualGpsLatFieldNumber = 31,
    kDefogHeat3FieldNumber = 34,
  };
  // repeated .com.caspe.devicemanagement.util.SysParam.DefogTiming defogTiming = 27;
  int defogtiming_size() const;
  private:
  int _internal_defogtiming_size() const;
  public:
  void clear_defogtiming();
  ::com::caspe::devicemanagement::util::SysParam_DefogTiming* mutable_defogtiming(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_DefogTiming >*
      mutable_defogtiming();
  private:
  const ::com::caspe::devicemanagement::util::SysParam_DefogTiming& _internal_defogtiming(int index) const;
  ::com::caspe::devicemanagement::util::SysParam_DefogTiming* _internal_add_defogtiming();
  public:
  const ::com::caspe::devicemanagement::util::SysParam_DefogTiming& defogtiming(int index) const;
  ::com::caspe::devicemanagement::util::SysParam_DefogTiming* add_defogtiming();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_DefogTiming >&
      defogtiming() const;

  // repeated .com.caspe.devicemanagement.util.SysParam.HeaterTiming heaterTiming = 29;
  int heatertiming_size() const;
  private:
  int _internal_heatertiming_size() const;
  public:
  void clear_heatertiming();
  ::com::caspe::devicemanagement::util::SysParam_HeaterTiming* mutable_heatertiming(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_HeaterTiming >*
      mutable_heatertiming();
  private:
  const ::com::caspe::devicemanagement::util::SysParam_HeaterTiming& _internal_heatertiming(int index) const;
  ::com::caspe::devicemanagement::util::SysParam_HeaterTiming* _internal_add_heatertiming();
  public:
  const ::com::caspe::devicemanagement::util::SysParam_HeaterTiming& heatertiming(int index) const;
  ::com::caspe::devicemanagement::util::SysParam_HeaterTiming* add_heatertiming();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_HeaterTiming >&
      heatertiming() const;

  // string channel1 = 13;
  void clear_channel1();
  const std::string& channel1() const;
  void set_channel1(const std::string& value);
  void set_channel1(std::string&& value);
  void set_channel1(const char* value);
  void set_channel1(const char* value, size_t size);
  std::string* mutable_channel1();
  std::string* release_channel1();
  void set_allocated_channel1(std::string* channel1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel1(
      std::string* channel1);
  private:
  const std::string& _internal_channel1() const;
  void _internal_set_channel1(const std::string& value);
  std::string* _internal_mutable_channel1();
  public:

  // string channel2 = 14;
  void clear_channel2();
  const std::string& channel2() const;
  void set_channel2(const std::string& value);
  void set_channel2(std::string&& value);
  void set_channel2(const char* value);
  void set_channel2(const char* value, size_t size);
  std::string* mutable_channel2();
  std::string* release_channel2();
  void set_allocated_channel2(std::string* channel2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel2(
      std::string* channel2);
  private:
  const std::string& _internal_channel2() const;
  void _internal_set_channel2(const std::string& value);
  std::string* _internal_mutable_channel2();
  public:

  // string channel3 = 15;
  void clear_channel3();
  const std::string& channel3() const;
  void set_channel3(const std::string& value);
  void set_channel3(std::string&& value);
  void set_channel3(const char* value);
  void set_channel3(const char* value, size_t size);
  std::string* mutable_channel3();
  std::string* release_channel3();
  void set_allocated_channel3(std::string* channel3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel3(
      std::string* channel3);
  private:
  const std::string& _internal_channel3() const;
  void _internal_set_channel3(const std::string& value);
  std::string* _internal_mutable_channel3();
  public:

  // string channel4 = 16;
  void clear_channel4();
  const std::string& channel4() const;
  void set_channel4(const std::string& value);
  void set_channel4(std::string&& value);
  void set_channel4(const char* value);
  void set_channel4(const char* value, size_t size);
  std::string* mutable_channel4();
  std::string* release_channel4();
  void set_allocated_channel4(std::string* channel4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel4(
      std::string* channel4);
  private:
  const std::string& _internal_channel4() const;
  void _internal_set_channel4(const std::string& value);
  std::string* _internal_mutable_channel4();
  public:

  // string channel5 = 17;
  void clear_channel5();
  const std::string& channel5() const;
  void set_channel5(const std::string& value);
  void set_channel5(std::string&& value);
  void set_channel5(const char* value);
  void set_channel5(const char* value, size_t size);
  std::string* mutable_channel5();
  std::string* release_channel5();
  void set_allocated_channel5(std::string* channel5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel5(
      std::string* channel5);
  private:
  const std::string& _internal_channel5() const;
  void _internal_set_channel5(const std::string& value);
  std::string* _internal_mutable_channel5();
  public:

  // string channel6 = 18;
  void clear_channel6();
  const std::string& channel6() const;
  void set_channel6(const std::string& value);
  void set_channel6(std::string&& value);
  void set_channel6(const char* value);
  void set_channel6(const char* value, size_t size);
  std::string* mutable_channel6();
  std::string* release_channel6();
  void set_allocated_channel6(std::string* channel6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel6(
      std::string* channel6);
  private:
  const std::string& _internal_channel6() const;
  void _internal_set_channel6(const std::string& value);
  std::string* _internal_mutable_channel6();
  public:

  // string channel7 = 19;
  void clear_channel7();
  const std::string& channel7() const;
  void set_channel7(const std::string& value);
  void set_channel7(std::string&& value);
  void set_channel7(const char* value);
  void set_channel7(const char* value, size_t size);
  std::string* mutable_channel7();
  std::string* release_channel7();
  void set_allocated_channel7(std::string* channel7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel7(
      std::string* channel7);
  private:
  const std::string& _internal_channel7() const;
  void _internal_set_channel7(const std::string& value);
  std::string* _internal_mutable_channel7();
  public:

  // string channel8 = 20;
  void clear_channel8();
  const std::string& channel8() const;
  void set_channel8(const std::string& value);
  void set_channel8(std::string&& value);
  void set_channel8(const char* value);
  void set_channel8(const char* value, size_t size);
  std::string* mutable_channel8();
  std::string* release_channel8();
  void set_allocated_channel8(std::string* channel8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel8(
      std::string* channel8);
  private:
  const std::string& _internal_channel8() const;
  void _internal_set_channel8(const std::string& value);
  std::string* _internal_mutable_channel8();
  public:

  // string defogMode = 24;
  void clear_defogmode();
  const std::string& defogmode() const;
  void set_defogmode(const std::string& value);
  void set_defogmode(std::string&& value);
  void set_defogmode(const char* value);
  void set_defogmode(const char* value, size_t size);
  std::string* mutable_defogmode();
  std::string* release_defogmode();
  void set_allocated_defogmode(std::string* defogmode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_defogmode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_defogmode(
      std::string* defogmode);
  private:
  const std::string& _internal_defogmode() const;
  void _internal_set_defogmode(const std::string& value);
  std::string* _internal_mutable_defogmode();
  public:

  // string defogAutoCondition = 25;
  void clear_defogautocondition();
  const std::string& defogautocondition() const;
  void set_defogautocondition(const std::string& value);
  void set_defogautocondition(std::string&& value);
  void set_defogautocondition(const char* value);
  void set_defogautocondition(const char* value, size_t size);
  std::string* mutable_defogautocondition();
  std::string* release_defogautocondition();
  void set_allocated_defogautocondition(std::string* defogautocondition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_defogautocondition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_defogautocondition(
      std::string* defogautocondition);
  private:
  const std::string& _internal_defogautocondition() const;
  void _internal_set_defogautocondition(const std::string& value);
  std::string* _internal_mutable_defogautocondition();
  public:

  // string heaterMode = 28;
  void clear_heatermode();
  const std::string& heatermode() const;
  void set_heatermode(const std::string& value);
  void set_heatermode(std::string&& value);
  void set_heatermode(const char* value);
  void set_heatermode(const char* value, size_t size);
  std::string* mutable_heatermode();
  std::string* release_heatermode();
  void set_allocated_heatermode(std::string* heatermode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_heatermode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_heatermode(
      std::string* heatermode);
  private:
  const std::string& _internal_heatermode() const;
  void _internal_set_heatermode(const std::string& value);
  std::string* _internal_mutable_heatermode();
  public:

  // float sysPointDist = 1;
  void clear_syspointdist();
  float syspointdist() const;
  void set_syspointdist(float value);
  private:
  float _internal_syspointdist() const;
  void _internal_set_syspointdist(float value);
  public:

  // int32 sysPulseCount = 2;
  void clear_syspulsecount();
  ::PROTOBUF_NAMESPACE_ID::int32 syspulsecount() const;
  void set_syspulsecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_syspulsecount() const;
  void _internal_set_syspulsecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enableGal = 3;
  void clear_enablegal();
  bool enablegal() const;
  void set_enablegal(bool value);
  private:
  bool _internal_enablegal() const;
  void _internal_set_enablegal(bool value);
  public:

  // bool enableUps = 4;
  void clear_enableups();
  bool enableups() const;
  void set_enableups(bool value);
  private:
  bool _internal_enableups() const;
  void _internal_set_enableups(bool value);
  public:

  // bool enableCompass = 5;
  void clear_enablecompass();
  bool enablecompass() const;
  void set_enablecompass(bool value);
  private:
  bool _internal_enablecompass() const;
  void _internal_set_enablecompass(bool value);
  public:

  // bool enableGps = 6;
  void clear_enablegps();
  bool enablegps() const;
  void set_enablegps(bool value);
  private:
  bool _internal_enablegps() const;
  void _internal_set_enablegps(bool value);
  public:

  // bool enableCamera = 7;
  void clear_enablecamera();
  bool enablecamera() const;
  void set_enablecamera(bool value);
  private:
  bool _internal_enablecamera() const;
  void _internal_set_enablecamera(bool value);
  public:

  // bool enableYunCamera = 8;
  void clear_enableyuncamera();
  bool enableyuncamera() const;
  void set_enableyuncamera(bool value);
  private:
  bool _internal_enableyuncamera() const;
  void _internal_set_enableyuncamera(bool value);
  public:

  // bool enableHeater = 9;
  void clear_enableheater();
  bool enableheater() const;
  void set_enableheater(bool value);
  private:
  bool _internal_enableheater() const;
  void _internal_set_enableheater(bool value);
  public:

  // bool enableDefog = 10;
  void clear_enabledefog();
  bool enabledefog() const;
  void set_enabledefog(bool value);
  private:
  bool _internal_enabledefog() const;
  void _internal_set_enabledefog(bool value);
  public:

  // int32 laserHertz = 21;
  void clear_laserhertz();
  ::PROTOBUF_NAMESPACE_ID::int32 laserhertz() const;
  void set_laserhertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_laserhertz() const;
  void _internal_set_laserhertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float laserAmpere = 22;
  void clear_laserampere();
  float laserampere() const;
  void set_laserampere(float value);
  private:
  float _internal_laserampere() const;
  void _internal_set_laserampere(float value);
  public:

  // bool enableVirtualGps = 11;
  void clear_enablevirtualgps();
  bool enablevirtualgps() const;
  void set_enablevirtualgps(bool value);
  private:
  bool _internal_enablevirtualgps() const;
  void _internal_set_enablevirtualgps(bool value);
  public:

  // bool yunParamReset = 12;
  void clear_yunparamreset();
  bool yunparamreset() const;
  void set_yunparamreset(bool value);
  private:
  bool _internal_yunparamreset() const;
  void _internal_set_yunparamreset(bool value);
  public:

  // bool defogHeat1 = 32;
  void clear_defogheat1();
  bool defogheat1() const;
  void set_defogheat1(bool value);
  private:
  bool _internal_defogheat1() const;
  void _internal_set_defogheat1(bool value);
  public:

  // bool defogHeat2 = 33;
  void clear_defogheat2();
  bool defogheat2() const;
  void set_defogheat2(bool value);
  private:
  bool _internal_defogheat2() const;
  void _internal_set_defogheat2(bool value);
  public:

  // int32 galSpeed = 23;
  void clear_galspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 galspeed() const;
  void set_galspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_galspeed() const;
  void _internal_set_galspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float defogAutoValue = 26;
  void clear_defogautovalue();
  float defogautovalue() const;
  void set_defogautovalue(float value);
  private:
  float _internal_defogautovalue() const;
  void _internal_set_defogautovalue(float value);
  public:

  // float virtualGpsLon = 30;
  void clear_virtualgpslon();
  float virtualgpslon() const;
  void set_virtualgpslon(float value);
  private:
  float _internal_virtualgpslon() const;
  void _internal_set_virtualgpslon(float value);
  public:

  // float virtualGpsLat = 31;
  void clear_virtualgpslat();
  float virtualgpslat() const;
  void set_virtualgpslat(float value);
  private:
  float _internal_virtualgpslat() const;
  void _internal_set_virtualgpslat(float value);
  public:

  // bool defogHeat3 = 34;
  void clear_defogheat3();
  bool defogheat3() const;
  void set_defogheat3(bool value);
  private:
  bool _internal_defogheat3() const;
  void _internal_set_defogheat3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.SysParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_DefogTiming > defogtiming_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_HeaterTiming > heatertiming_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defogmode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defogautocondition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heatermode_;
  float syspointdist_;
  ::PROTOBUF_NAMESPACE_ID::int32 syspulsecount_;
  bool enablegal_;
  bool enableups_;
  bool enablecompass_;
  bool enablegps_;
  bool enablecamera_;
  bool enableyuncamera_;
  bool enableheater_;
  bool enabledefog_;
  ::PROTOBUF_NAMESPACE_ID::int32 laserhertz_;
  float laserampere_;
  bool enablevirtualgps_;
  bool yunparamreset_;
  bool defogheat1_;
  bool defogheat2_;
  ::PROTOBUF_NAMESPACE_ID::int32 galspeed_;
  float defogautovalue_;
  float virtualgpslon_;
  float virtualgpslat_;
  bool defogheat3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SendData_2eproto;
};
// -------------------------------------------------------------------

class SendData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.caspe.devicemanagement.util.SendData) */ {
 public:
  inline SendData() : SendData(nullptr) {};
  virtual ~SendData();

  SendData(const SendData& from);
  SendData(SendData&& from) noexcept
    : SendData() {
    *this = ::std::move(from);
  }

  inline SendData& operator=(const SendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendData& operator=(SendData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendData& default_instance();

  enum DataCase {
    kReady = 60,
    kDetailLog = 61,
    kCollect = 62,
    kCollectReply = 63,
    kSuspend = 64,
    kCollectComplete = 65,
    kStatusReport = 66,
    kAlg = 67,
    kAlarmList = 68,
    kSysParam = 69,
    kSignal = 70,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendData* internal_default_instance() {
    return reinterpret_cast<const SendData*>(
               &_SendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SendData& a, SendData& b) {
    a.Swap(&b);
  }
  inline void Swap(SendData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendData* New() const final {
    return CreateMaybeMessage<SendData>(nullptr);
  }

  SendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendData& from);
  void MergeFrom(const SendData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.caspe.devicemanagement.util.SendData";
  }
  protected:
  explicit SendData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SendData_2eproto);
    return ::descriptor_table_SendData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeriaNumFieldNumber = 1,
    kTypeFieldNumber = 2,
    kActionFieldNumber = 3,
    kSuccessFieldNumber = 4,
    kMessageFieldNumber = 5,
    kSnCodeFieldNumber = 6,
    kUserIdFieldNumber = 7,
    kReadyFieldNumber = 60,
    kDetailLogFieldNumber = 61,
    kCollectFieldNumber = 62,
    kCollectReplyFieldNumber = 63,
    kSuspendFieldNumber = 64,
    kCollectCompleteFieldNumber = 65,
    kStatusReportFieldNumber = 66,
    kAlgFieldNumber = 67,
    kAlarmListFieldNumber = 68,
    kSysParamFieldNumber = 69,
    kSignalFieldNumber = 70,
  };
  // string seriaNum = 1;
  void clear_serianum();
  const std::string& serianum() const;
  void set_serianum(const std::string& value);
  void set_serianum(std::string&& value);
  void set_serianum(const char* value);
  void set_serianum(const char* value, size_t size);
  std::string* mutable_serianum();
  std::string* release_serianum();
  void set_allocated_serianum(std::string* serianum);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serianum();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serianum(
      std::string* serianum);
  private:
  const std::string& _internal_serianum() const;
  void _internal_set_serianum(const std::string& value);
  std::string* _internal_mutable_serianum();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action(
      std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string success = 4;
  void clear_success();
  const std::string& success() const;
  void set_success(const std::string& value);
  void set_success(std::string&& value);
  void set_success(const char* value);
  void set_success(const char* value, size_t size);
  std::string* mutable_success();
  std::string* release_success();
  void set_allocated_success(std::string* success);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_success();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_success(
      std::string* success);
  private:
  const std::string& _internal_success() const;
  void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // string message = 5;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string snCode = 6;
  void clear_sncode();
  const std::string& sncode() const;
  void set_sncode(const std::string& value);
  void set_sncode(std::string&& value);
  void set_sncode(const char* value);
  void set_sncode(const char* value, size_t size);
  std::string* mutable_sncode();
  std::string* release_sncode();
  void set_allocated_sncode(std::string* sncode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sncode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sncode(
      std::string* sncode);
  private:
  const std::string& _internal_sncode() const;
  void _internal_set_sncode(const std::string& value);
  std::string* _internal_mutable_sncode();
  public:

  // string userId = 7;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // .com.caspe.devicemanagement.util.Ready ready = 60;
  bool has_ready() const;
  private:
  bool _internal_has_ready() const;
  public:
  void clear_ready();
  const ::com::caspe::devicemanagement::util::Ready& ready() const;
  ::com::caspe::devicemanagement::util::Ready* release_ready();
  ::com::caspe::devicemanagement::util::Ready* mutable_ready();
  void set_allocated_ready(::com::caspe::devicemanagement::util::Ready* ready);
  private:
  const ::com::caspe::devicemanagement::util::Ready& _internal_ready() const;
  ::com::caspe::devicemanagement::util::Ready* _internal_mutable_ready();
  public:
  void unsafe_arena_set_allocated_ready(
      ::com::caspe::devicemanagement::util::Ready* ready);
  ::com::caspe::devicemanagement::util::Ready* unsafe_arena_release_ready();

  // .com.caspe.devicemanagement.util.DetailLog detailLog = 61;
  bool has_detaillog() const;
  private:
  bool _internal_has_detaillog() const;
  public:
  void clear_detaillog();
  const ::com::caspe::devicemanagement::util::DetailLog& detaillog() const;
  ::com::caspe::devicemanagement::util::DetailLog* release_detaillog();
  ::com::caspe::devicemanagement::util::DetailLog* mutable_detaillog();
  void set_allocated_detaillog(::com::caspe::devicemanagement::util::DetailLog* detaillog);
  private:
  const ::com::caspe::devicemanagement::util::DetailLog& _internal_detaillog() const;
  ::com::caspe::devicemanagement::util::DetailLog* _internal_mutable_detaillog();
  public:
  void unsafe_arena_set_allocated_detaillog(
      ::com::caspe::devicemanagement::util::DetailLog* detaillog);
  ::com::caspe::devicemanagement::util::DetailLog* unsafe_arena_release_detaillog();

  // .com.caspe.devicemanagement.util.Collect collect = 62;
  bool has_collect() const;
  private:
  bool _internal_has_collect() const;
  public:
  void clear_collect();
  const ::com::caspe::devicemanagement::util::Collect& collect() const;
  ::com::caspe::devicemanagement::util::Collect* release_collect();
  ::com::caspe::devicemanagement::util::Collect* mutable_collect();
  void set_allocated_collect(::com::caspe::devicemanagement::util::Collect* collect);
  private:
  const ::com::caspe::devicemanagement::util::Collect& _internal_collect() const;
  ::com::caspe::devicemanagement::util::Collect* _internal_mutable_collect();
  public:
  void unsafe_arena_set_allocated_collect(
      ::com::caspe::devicemanagement::util::Collect* collect);
  ::com::caspe::devicemanagement::util::Collect* unsafe_arena_release_collect();

  // .com.caspe.devicemanagement.util.CollectReply collectReply = 63;
  bool has_collectreply() const;
  private:
  bool _internal_has_collectreply() const;
  public:
  void clear_collectreply();
  const ::com::caspe::devicemanagement::util::CollectReply& collectreply() const;
  ::com::caspe::devicemanagement::util::CollectReply* release_collectreply();
  ::com::caspe::devicemanagement::util::CollectReply* mutable_collectreply();
  void set_allocated_collectreply(::com::caspe::devicemanagement::util::CollectReply* collectreply);
  private:
  const ::com::caspe::devicemanagement::util::CollectReply& _internal_collectreply() const;
  ::com::caspe::devicemanagement::util::CollectReply* _internal_mutable_collectreply();
  public:
  void unsafe_arena_set_allocated_collectreply(
      ::com::caspe::devicemanagement::util::CollectReply* collectreply);
  ::com::caspe::devicemanagement::util::CollectReply* unsafe_arena_release_collectreply();

  // .com.caspe.devicemanagement.util.SuspendReply suspend = 64;
  bool has_suspend() const;
  private:
  bool _internal_has_suspend() const;
  public:
  void clear_suspend();
  const ::com::caspe::devicemanagement::util::SuspendReply& suspend() const;
  ::com::caspe::devicemanagement::util::SuspendReply* release_suspend();
  ::com::caspe::devicemanagement::util::SuspendReply* mutable_suspend();
  void set_allocated_suspend(::com::caspe::devicemanagement::util::SuspendReply* suspend);
  private:
  const ::com::caspe::devicemanagement::util::SuspendReply& _internal_suspend() const;
  ::com::caspe::devicemanagement::util::SuspendReply* _internal_mutable_suspend();
  public:
  void unsafe_arena_set_allocated_suspend(
      ::com::caspe::devicemanagement::util::SuspendReply* suspend);
  ::com::caspe::devicemanagement::util::SuspendReply* unsafe_arena_release_suspend();

  // .com.caspe.devicemanagement.util.CollectComplete collectComplete = 65;
  bool has_collectcomplete() const;
  private:
  bool _internal_has_collectcomplete() const;
  public:
  void clear_collectcomplete();
  const ::com::caspe::devicemanagement::util::CollectComplete& collectcomplete() const;
  ::com::caspe::devicemanagement::util::CollectComplete* release_collectcomplete();
  ::com::caspe::devicemanagement::util::CollectComplete* mutable_collectcomplete();
  void set_allocated_collectcomplete(::com::caspe::devicemanagement::util::CollectComplete* collectcomplete);
  private:
  const ::com::caspe::devicemanagement::util::CollectComplete& _internal_collectcomplete() const;
  ::com::caspe::devicemanagement::util::CollectComplete* _internal_mutable_collectcomplete();
  public:
  void unsafe_arena_set_allocated_collectcomplete(
      ::com::caspe::devicemanagement::util::CollectComplete* collectcomplete);
  ::com::caspe::devicemanagement::util::CollectComplete* unsafe_arena_release_collectcomplete();

  // .com.caspe.devicemanagement.util.StatusReport statusReport = 66;
  bool has_statusreport() const;
  private:
  bool _internal_has_statusreport() const;
  public:
  void clear_statusreport();
  const ::com::caspe::devicemanagement::util::StatusReport& statusreport() const;
  ::com::caspe::devicemanagement::util::StatusReport* release_statusreport();
  ::com::caspe::devicemanagement::util::StatusReport* mutable_statusreport();
  void set_allocated_statusreport(::com::caspe::devicemanagement::util::StatusReport* statusreport);
  private:
  const ::com::caspe::devicemanagement::util::StatusReport& _internal_statusreport() const;
  ::com::caspe::devicemanagement::util::StatusReport* _internal_mutable_statusreport();
  public:
  void unsafe_arena_set_allocated_statusreport(
      ::com::caspe::devicemanagement::util::StatusReport* statusreport);
  ::com::caspe::devicemanagement::util::StatusReport* unsafe_arena_release_statusreport();

  // .com.caspe.devicemanagement.util.Alg alg = 67;
  bool has_alg() const;
  private:
  bool _internal_has_alg() const;
  public:
  void clear_alg();
  const ::com::caspe::devicemanagement::util::Alg& alg() const;
  ::com::caspe::devicemanagement::util::Alg* release_alg();
  ::com::caspe::devicemanagement::util::Alg* mutable_alg();
  void set_allocated_alg(::com::caspe::devicemanagement::util::Alg* alg);
  private:
  const ::com::caspe::devicemanagement::util::Alg& _internal_alg() const;
  ::com::caspe::devicemanagement::util::Alg* _internal_mutable_alg();
  public:
  void unsafe_arena_set_allocated_alg(
      ::com::caspe::devicemanagement::util::Alg* alg);
  ::com::caspe::devicemanagement::util::Alg* unsafe_arena_release_alg();

  // .com.caspe.devicemanagement.util.AlarmList alarmList = 68;
  bool has_alarmlist() const;
  private:
  bool _internal_has_alarmlist() const;
  public:
  void clear_alarmlist();
  const ::com::caspe::devicemanagement::util::AlarmList& alarmlist() const;
  ::com::caspe::devicemanagement::util::AlarmList* release_alarmlist();
  ::com::caspe::devicemanagement::util::AlarmList* mutable_alarmlist();
  void set_allocated_alarmlist(::com::caspe::devicemanagement::util::AlarmList* alarmlist);
  private:
  const ::com::caspe::devicemanagement::util::AlarmList& _internal_alarmlist() const;
  ::com::caspe::devicemanagement::util::AlarmList* _internal_mutable_alarmlist();
  public:
  void unsafe_arena_set_allocated_alarmlist(
      ::com::caspe::devicemanagement::util::AlarmList* alarmlist);
  ::com::caspe::devicemanagement::util::AlarmList* unsafe_arena_release_alarmlist();

  // .com.caspe.devicemanagement.util.SysParam sysParam = 69;
  bool has_sysparam() const;
  private:
  bool _internal_has_sysparam() const;
  public:
  void clear_sysparam();
  const ::com::caspe::devicemanagement::util::SysParam& sysparam() const;
  ::com::caspe::devicemanagement::util::SysParam* release_sysparam();
  ::com::caspe::devicemanagement::util::SysParam* mutable_sysparam();
  void set_allocated_sysparam(::com::caspe::devicemanagement::util::SysParam* sysparam);
  private:
  const ::com::caspe::devicemanagement::util::SysParam& _internal_sysparam() const;
  ::com::caspe::devicemanagement::util::SysParam* _internal_mutable_sysparam();
  public:
  void unsafe_arena_set_allocated_sysparam(
      ::com::caspe::devicemanagement::util::SysParam* sysparam);
  ::com::caspe::devicemanagement::util::SysParam* unsafe_arena_release_sysparam();

  // .com.caspe.devicemanagement.util.Signal signal = 70;
  bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  void clear_signal();
  const ::com::caspe::devicemanagement::util::Signal& signal() const;
  ::com::caspe::devicemanagement::util::Signal* release_signal();
  ::com::caspe::devicemanagement::util::Signal* mutable_signal();
  void set_allocated_signal(::com::caspe::devicemanagement::util::Signal* signal);
  private:
  const ::com::caspe::devicemanagement::util::Signal& _internal_signal() const;
  ::com::caspe::devicemanagement::util::Signal* _internal_mutable_signal();
  public:
  void unsafe_arena_set_allocated_signal(
      ::com::caspe::devicemanagement::util::Signal* signal);
  ::com::caspe::devicemanagement::util::Signal* unsafe_arena_release_signal();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:com.caspe.devicemanagement.util.SendData)
 private:
  class _Internal;
  void set_has_ready();
  void set_has_detaillog();
  void set_has_collect();
  void set_has_collectreply();
  void set_has_suspend();
  void set_has_collectcomplete();
  void set_has_statusreport();
  void set_has_alg();
  void set_has_alarmlist();
  void set_has_sysparam();
  void set_has_signal();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serianum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sncode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  union DataUnion {
    DataUnion() {}
    ::com::caspe::devicemanagement::util::Ready* ready_;
    ::com::caspe::devicemanagement::util::DetailLog* detaillog_;
    ::com::caspe::devicemanagement::util::Collect* collect_;
    ::com::caspe::devicemanagement::util::CollectReply* collectreply_;
    ::com::caspe::devicemanagement::util::SuspendReply* suspend_;
    ::com::caspe::devicemanagement::util::CollectComplete* collectcomplete_;
    ::com::caspe::devicemanagement::util::StatusReport* statusreport_;
    ::com::caspe::devicemanagement::util::Alg* alg_;
    ::com::caspe::devicemanagement::util::AlarmList* alarmlist_;
    ::com::caspe::devicemanagement::util::SysParam* sysparam_;
    ::com::caspe::devicemanagement::util::Signal* signal_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_SendData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ready

// string currentMode = 1;
inline void Ready::clear_currentmode() {
  currentmode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ready::currentmode() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Ready.currentMode)
  return _internal_currentmode();
}
inline void Ready::set_currentmode(const std::string& value) {
  _internal_set_currentmode(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Ready.currentMode)
}
inline std::string* Ready::mutable_currentmode() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Ready.currentMode)
  return _internal_mutable_currentmode();
}
inline const std::string& Ready::_internal_currentmode() const {
  return currentmode_.Get();
}
inline void Ready::_internal_set_currentmode(const std::string& value) {
  
  currentmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ready::set_currentmode(std::string&& value) {
  
  currentmode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Ready.currentMode)
}
inline void Ready::set_currentmode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currentmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Ready.currentMode)
}
inline void Ready::set_currentmode(const char* value,
    size_t size) {
  
  currentmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Ready.currentMode)
}
inline std::string* Ready::_internal_mutable_currentmode() {
  
  return currentmode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ready::release_currentmode() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Ready.currentMode)
  return currentmode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ready::set_allocated_currentmode(std::string* currentmode) {
  if (currentmode != nullptr) {
    
  } else {
    
  }
  currentmode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentmode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Ready.currentMode)
}
inline std::string* Ready::unsafe_arena_release_currentmode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Ready.currentMode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return currentmode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ready::unsafe_arena_set_allocated_currentmode(
    std::string* currentmode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (currentmode != nullptr) {
    
  } else {
    
  }
  currentmode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      currentmode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Ready.currentMode)
}

// float lon = 2;
inline void Ready::clear_lon() {
  lon_ = 0;
}
inline float Ready::_internal_lon() const {
  return lon_;
}
inline float Ready::lon() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Ready.lon)
  return _internal_lon();
}
inline void Ready::_internal_set_lon(float value) {
  
  lon_ = value;
}
inline void Ready::set_lon(float value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Ready.lon)
}

// float lat = 3;
inline void Ready::clear_lat() {
  lat_ = 0;
}
inline float Ready::_internal_lat() const {
  return lat_;
}
inline float Ready::lat() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Ready.lat)
  return _internal_lat();
}
inline void Ready::_internal_set_lat(float value) {
  
  lat_ = value;
}
inline void Ready::set_lat(float value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Ready.lat)
}

// -------------------------------------------------------------------

// DetailLog

// string logContent = 1;
inline void DetailLog::clear_logcontent() {
  logcontent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DetailLog::logcontent() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.DetailLog.logContent)
  return _internal_logcontent();
}
inline void DetailLog::set_logcontent(const std::string& value) {
  _internal_set_logcontent(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.DetailLog.logContent)
}
inline std::string* DetailLog::mutable_logcontent() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.DetailLog.logContent)
  return _internal_mutable_logcontent();
}
inline const std::string& DetailLog::_internal_logcontent() const {
  return logcontent_.Get();
}
inline void DetailLog::_internal_set_logcontent(const std::string& value) {
  
  logcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailLog::set_logcontent(std::string&& value) {
  
  logcontent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.DetailLog.logContent)
}
inline void DetailLog::set_logcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.DetailLog.logContent)
}
inline void DetailLog::set_logcontent(const char* value,
    size_t size) {
  
  logcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.DetailLog.logContent)
}
inline std::string* DetailLog::_internal_mutable_logcontent() {
  
  return logcontent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailLog::release_logcontent() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.DetailLog.logContent)
  return logcontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailLog::set_allocated_logcontent(std::string* logcontent) {
  if (logcontent != nullptr) {
    
  } else {
    
  }
  logcontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logcontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.DetailLog.logContent)
}
inline std::string* DetailLog::unsafe_arena_release_logcontent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.DetailLog.logContent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return logcontent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DetailLog::unsafe_arena_set_allocated_logcontent(
    std::string* logcontent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (logcontent != nullptr) {
    
  } else {
    
  }
  logcontent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      logcontent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.DetailLog.logContent)
}

// string createTime = 2;
inline void DetailLog::clear_createtime() {
  createtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DetailLog::createtime() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.DetailLog.createTime)
  return _internal_createtime();
}
inline void DetailLog::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.DetailLog.createTime)
}
inline std::string* DetailLog::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.DetailLog.createTime)
  return _internal_mutable_createtime();
}
inline const std::string& DetailLog::_internal_createtime() const {
  return createtime_.Get();
}
inline void DetailLog::_internal_set_createtime(const std::string& value) {
  
  createtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailLog::set_createtime(std::string&& value) {
  
  createtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.DetailLog.createTime)
}
inline void DetailLog::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.DetailLog.createTime)
}
inline void DetailLog::set_createtime(const char* value,
    size_t size) {
  
  createtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.DetailLog.createTime)
}
inline std::string* DetailLog::_internal_mutable_createtime() {
  
  return createtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailLog::release_createtime() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.DetailLog.createTime)
  return createtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailLog::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.DetailLog.createTime)
}
inline std::string* DetailLog::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.DetailLog.createTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return createtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DetailLog::unsafe_arena_set_allocated_createtime(
    std::string* createtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      createtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.DetailLog.createTime)
}

// -------------------------------------------------------------------

// Collect_StopCondition

// string counts = 1;
inline void Collect_StopCondition::clear_counts() {
  counts_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect_StopCondition::counts() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
  return _internal_counts();
}
inline void Collect_StopCondition::set_counts(const std::string& value) {
  _internal_set_counts(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
}
inline std::string* Collect_StopCondition::mutable_counts() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
  return _internal_mutable_counts();
}
inline const std::string& Collect_StopCondition::_internal_counts() const {
  return counts_.Get();
}
inline void Collect_StopCondition::_internal_set_counts(const std::string& value) {
  
  counts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect_StopCondition::set_counts(std::string&& value) {
  
  counts_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
}
inline void Collect_StopCondition::set_counts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  counts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
}
inline void Collect_StopCondition::set_counts(const char* value,
    size_t size) {
  
  counts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
}
inline std::string* Collect_StopCondition::_internal_mutable_counts() {
  
  return counts_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect_StopCondition::release_counts() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
  return counts_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect_StopCondition::set_allocated_counts(std::string* counts) {
  if (counts != nullptr) {
    
  } else {
    
  }
  counts_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), counts,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
}
inline std::string* Collect_StopCondition::unsafe_arena_release_counts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return counts_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect_StopCondition::unsafe_arena_set_allocated_counts(
    std::string* counts) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (counts != nullptr) {
    
  } else {
    
  }
  counts_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      counts, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.StopCondition.counts)
}

// -------------------------------------------------------------------

// Collect_PartList

// string hAngle = 1;
inline void Collect_PartList::clear_hangle() {
  hangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect_PartList::hangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
  return _internal_hangle();
}
inline void Collect_PartList::set_hangle(const std::string& value) {
  _internal_set_hangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
}
inline std::string* Collect_PartList::mutable_hangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
  return _internal_mutable_hangle();
}
inline const std::string& Collect_PartList::_internal_hangle() const {
  return hangle_.Get();
}
inline void Collect_PartList::_internal_set_hangle(const std::string& value) {
  
  hangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect_PartList::set_hangle(std::string&& value) {
  
  hangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
}
inline void Collect_PartList::set_hangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
}
inline void Collect_PartList::set_hangle(const char* value,
    size_t size) {
  
  hangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
}
inline std::string* Collect_PartList::_internal_mutable_hangle() {
  
  return hangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect_PartList::release_hangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
  return hangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect_PartList::set_allocated_hangle(std::string* hangle) {
  if (hangle != nullptr) {
    
  } else {
    
  }
  hangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
}
inline std::string* Collect_PartList::unsafe_arena_release_hangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect_PartList::unsafe_arena_set_allocated_hangle(
    std::string* hangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hangle != nullptr) {
    
  } else {
    
  }
  hangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.hAngle)
}

// string vAngle = 2;
inline void Collect_PartList::clear_vangle() {
  vangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect_PartList::vangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
  return _internal_vangle();
}
inline void Collect_PartList::set_vangle(const std::string& value) {
  _internal_set_vangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
}
inline std::string* Collect_PartList::mutable_vangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
  return _internal_mutable_vangle();
}
inline const std::string& Collect_PartList::_internal_vangle() const {
  return vangle_.Get();
}
inline void Collect_PartList::_internal_set_vangle(const std::string& value) {
  
  vangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect_PartList::set_vangle(std::string&& value) {
  
  vangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
}
inline void Collect_PartList::set_vangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
}
inline void Collect_PartList::set_vangle(const char* value,
    size_t size) {
  
  vangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
}
inline std::string* Collect_PartList::_internal_mutable_vangle() {
  
  return vangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect_PartList::release_vangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
  return vangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect_PartList::set_allocated_vangle(std::string* vangle) {
  if (vangle != nullptr) {
    
  } else {
    
  }
  vangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
}
inline std::string* Collect_PartList::unsafe_arena_release_vangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect_PartList::unsafe_arena_set_allocated_vangle(
    std::string* vangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vangle != nullptr) {
    
  } else {
    
  }
  vangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.vAngle)
}

// string sAngle = 3;
inline void Collect_PartList::clear_sangle() {
  sangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect_PartList::sangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
  return _internal_sangle();
}
inline void Collect_PartList::set_sangle(const std::string& value) {
  _internal_set_sangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
}
inline std::string* Collect_PartList::mutable_sangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
  return _internal_mutable_sangle();
}
inline const std::string& Collect_PartList::_internal_sangle() const {
  return sangle_.Get();
}
inline void Collect_PartList::_internal_set_sangle(const std::string& value) {
  
  sangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect_PartList::set_sangle(std::string&& value) {
  
  sangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
}
inline void Collect_PartList::set_sangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
}
inline void Collect_PartList::set_sangle(const char* value,
    size_t size) {
  
  sangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
}
inline std::string* Collect_PartList::_internal_mutable_sangle() {
  
  return sangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect_PartList::release_sangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
  return sangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect_PartList::set_allocated_sangle(std::string* sangle) {
  if (sangle != nullptr) {
    
  } else {
    
  }
  sangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
}
inline std::string* Collect_PartList::unsafe_arena_release_sangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect_PartList::unsafe_arena_set_allocated_sangle(
    std::string* sangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sangle != nullptr) {
    
  } else {
    
  }
  sangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.sAngle)
}

// string eAngle = 4;
inline void Collect_PartList::clear_eangle() {
  eangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect_PartList::eangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
  return _internal_eangle();
}
inline void Collect_PartList::set_eangle(const std::string& value) {
  _internal_set_eangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
}
inline std::string* Collect_PartList::mutable_eangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
  return _internal_mutable_eangle();
}
inline const std::string& Collect_PartList::_internal_eangle() const {
  return eangle_.Get();
}
inline void Collect_PartList::_internal_set_eangle(const std::string& value) {
  
  eangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect_PartList::set_eangle(std::string&& value) {
  
  eangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
}
inline void Collect_PartList::set_eangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
}
inline void Collect_PartList::set_eangle(const char* value,
    size_t size) {
  
  eangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
}
inline std::string* Collect_PartList::_internal_mutable_eangle() {
  
  return eangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect_PartList::release_eangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
  return eangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect_PartList::set_allocated_eangle(std::string* eangle) {
  if (eangle != nullptr) {
    
  } else {
    
  }
  eangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
}
inline std::string* Collect_PartList::unsafe_arena_release_eangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return eangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect_PartList::unsafe_arena_set_allocated_eangle(
    std::string* eangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (eangle != nullptr) {
    
  } else {
    
  }
  eangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      eangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.eAngle)
}

// string iAngle = 5;
inline void Collect_PartList::clear_iangle() {
  iangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect_PartList::iangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
  return _internal_iangle();
}
inline void Collect_PartList::set_iangle(const std::string& value) {
  _internal_set_iangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
}
inline std::string* Collect_PartList::mutable_iangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
  return _internal_mutable_iangle();
}
inline const std::string& Collect_PartList::_internal_iangle() const {
  return iangle_.Get();
}
inline void Collect_PartList::_internal_set_iangle(const std::string& value) {
  
  iangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect_PartList::set_iangle(std::string&& value) {
  
  iangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
}
inline void Collect_PartList::set_iangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
}
inline void Collect_PartList::set_iangle(const char* value,
    size_t size) {
  
  iangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
}
inline std::string* Collect_PartList::_internal_mutable_iangle() {
  
  return iangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect_PartList::release_iangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
  return iangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect_PartList::set_allocated_iangle(std::string* iangle) {
  if (iangle != nullptr) {
    
  } else {
    
  }
  iangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
}
inline std::string* Collect_PartList::unsafe_arena_release_iangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return iangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect_PartList::unsafe_arena_set_allocated_iangle(
    std::string* iangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (iangle != nullptr) {
    
  } else {
    
  }
  iangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      iangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.iAngle)
}

// string interval = 6;
inline void Collect_PartList::clear_interval() {
  interval_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect_PartList::interval() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.PartList.interval)
  return _internal_interval();
}
inline void Collect_PartList::set_interval(const std::string& value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.PartList.interval)
}
inline std::string* Collect_PartList::mutable_interval() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.PartList.interval)
  return _internal_mutable_interval();
}
inline const std::string& Collect_PartList::_internal_interval() const {
  return interval_.Get();
}
inline void Collect_PartList::_internal_set_interval(const std::string& value) {
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect_PartList::set_interval(std::string&& value) {
  
  interval_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.PartList.interval)
}
inline void Collect_PartList::set_interval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.PartList.interval)
}
inline void Collect_PartList::set_interval(const char* value,
    size_t size) {
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.PartList.interval)
}
inline std::string* Collect_PartList::_internal_mutable_interval() {
  
  return interval_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect_PartList::release_interval() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.PartList.interval)
  return interval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect_PartList::set_allocated_interval(std::string* interval) {
  if (interval != nullptr) {
    
  } else {
    
  }
  interval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.interval)
}
inline std::string* Collect_PartList::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.PartList.interval)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interval_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect_PartList::unsafe_arena_set_allocated_interval(
    std::string* interval) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interval != nullptr) {
    
  } else {
    
  }
  interval_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interval, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.interval)
}

// string scanning = 7;
inline void Collect_PartList::clear_scanning() {
  scanning_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect_PartList::scanning() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.PartList.scanning)
  return _internal_scanning();
}
inline void Collect_PartList::set_scanning(const std::string& value) {
  _internal_set_scanning(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.PartList.scanning)
}
inline std::string* Collect_PartList::mutable_scanning() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.PartList.scanning)
  return _internal_mutable_scanning();
}
inline const std::string& Collect_PartList::_internal_scanning() const {
  return scanning_.Get();
}
inline void Collect_PartList::_internal_set_scanning(const std::string& value) {
  
  scanning_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect_PartList::set_scanning(std::string&& value) {
  
  scanning_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.PartList.scanning)
}
inline void Collect_PartList::set_scanning(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scanning_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.PartList.scanning)
}
inline void Collect_PartList::set_scanning(const char* value,
    size_t size) {
  
  scanning_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.PartList.scanning)
}
inline std::string* Collect_PartList::_internal_mutable_scanning() {
  
  return scanning_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect_PartList::release_scanning() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.PartList.scanning)
  return scanning_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect_PartList::set_allocated_scanning(std::string* scanning) {
  if (scanning != nullptr) {
    
  } else {
    
  }
  scanning_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scanning,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.scanning)
}
inline std::string* Collect_PartList::unsafe_arena_release_scanning() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.PartList.scanning)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scanning_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect_PartList::unsafe_arena_set_allocated_scanning(
    std::string* scanning) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scanning != nullptr) {
    
  } else {
    
  }
  scanning_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scanning, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.scanning)
}

// .com.caspe.devicemanagement.util.Collect.StopCondition stopCondtion = 8;
inline bool Collect_PartList::_internal_has_stopcondtion() const {
  return this != internal_default_instance() && stopcondtion_ != nullptr;
}
inline bool Collect_PartList::has_stopcondtion() const {
  return _internal_has_stopcondtion();
}
inline void Collect_PartList::clear_stopcondtion() {
  if (GetArena() == nullptr && stopcondtion_ != nullptr) {
    delete stopcondtion_;
  }
  stopcondtion_ = nullptr;
}
inline const ::com::caspe::devicemanagement::util::Collect_StopCondition& Collect_PartList::_internal_stopcondtion() const {
  const ::com::caspe::devicemanagement::util::Collect_StopCondition* p = stopcondtion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::caspe::devicemanagement::util::Collect_StopCondition*>(
      &::com::caspe::devicemanagement::util::_Collect_StopCondition_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::Collect_StopCondition& Collect_PartList::stopcondtion() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.PartList.stopCondtion)
  return _internal_stopcondtion();
}
inline void Collect_PartList::unsafe_arena_set_allocated_stopcondtion(
    ::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondtion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopcondtion_);
  }
  stopcondtion_ = stopcondtion;
  if (stopcondtion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.stopCondtion)
}
inline ::com::caspe::devicemanagement::util::Collect_StopCondition* Collect_PartList::release_stopcondtion() {
  auto temp = unsafe_arena_release_stopcondtion();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::caspe::devicemanagement::util::Collect_StopCondition* Collect_PartList::unsafe_arena_release_stopcondtion() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.PartList.stopCondtion)
  
  ::com::caspe::devicemanagement::util::Collect_StopCondition* temp = stopcondtion_;
  stopcondtion_ = nullptr;
  return temp;
}
inline ::com::caspe::devicemanagement::util::Collect_StopCondition* Collect_PartList::_internal_mutable_stopcondtion() {
  
  if (stopcondtion_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::caspe::devicemanagement::util::Collect_StopCondition>(GetArena());
    stopcondtion_ = p;
  }
  return stopcondtion_;
}
inline ::com::caspe::devicemanagement::util::Collect_StopCondition* Collect_PartList::mutable_stopcondtion() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.PartList.stopCondtion)
  return _internal_mutable_stopcondtion();
}
inline void Collect_PartList::set_allocated_stopcondtion(::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondtion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stopcondtion_;
  }
  if (stopcondtion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stopcondtion);
    if (message_arena != submessage_arena) {
      stopcondtion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopcondtion, submessage_arena);
    }
    
  } else {
    
  }
  stopcondtion_ = stopcondtion;
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.PartList.stopCondtion)
}

// -------------------------------------------------------------------

// Collect

// string collectMode = 1;
inline void Collect::clear_collectmode() {
  collectmode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect::collectmode() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.collectMode)
  return _internal_collectmode();
}
inline void Collect::set_collectmode(const std::string& value) {
  _internal_set_collectmode(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.collectMode)
}
inline std::string* Collect::mutable_collectmode() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.collectMode)
  return _internal_mutable_collectmode();
}
inline const std::string& Collect::_internal_collectmode() const {
  return collectmode_.Get();
}
inline void Collect::_internal_set_collectmode(const std::string& value) {
  
  collectmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect::set_collectmode(std::string&& value) {
  
  collectmode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.collectMode)
}
inline void Collect::set_collectmode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collectmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.collectMode)
}
inline void Collect::set_collectmode(const char* value,
    size_t size) {
  
  collectmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.collectMode)
}
inline std::string* Collect::_internal_mutable_collectmode() {
  
  return collectmode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect::release_collectmode() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.collectMode)
  return collectmode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect::set_allocated_collectmode(std::string* collectmode) {
  if (collectmode != nullptr) {
    
  } else {
    
  }
  collectmode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectmode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.collectMode)
}
inline std::string* Collect::unsafe_arena_release_collectmode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.collectMode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collectmode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect::unsafe_arena_set_allocated_collectmode(
    std::string* collectmode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collectmode != nullptr) {
    
  } else {
    
  }
  collectmode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collectmode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.collectMode)
}

// string northAngle = 2;
inline void Collect::clear_northangle() {
  northangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collect::northangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.northAngle)
  return _internal_northangle();
}
inline void Collect::set_northangle(const std::string& value) {
  _internal_set_northangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.northAngle)
}
inline std::string* Collect::mutable_northangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.northAngle)
  return _internal_mutable_northangle();
}
inline const std::string& Collect::_internal_northangle() const {
  return northangle_.Get();
}
inline void Collect::_internal_set_northangle(const std::string& value) {
  
  northangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collect::set_northangle(std::string&& value) {
  
  northangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Collect.northAngle)
}
inline void Collect::set_northangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  northangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Collect.northAngle)
}
inline void Collect::set_northangle(const char* value,
    size_t size) {
  
  northangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Collect.northAngle)
}
inline std::string* Collect::_internal_mutable_northangle() {
  
  return northangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collect::release_northangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.northAngle)
  return northangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collect::set_allocated_northangle(std::string* northangle) {
  if (northangle != nullptr) {
    
  } else {
    
  }
  northangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), northangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.northAngle)
}
inline std::string* Collect::unsafe_arena_release_northangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Collect.northAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return northangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Collect::unsafe_arena_set_allocated_northangle(
    std::string* northangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (northangle != nullptr) {
    
  } else {
    
  }
  northangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      northangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.northAngle)
}

// int32 pulseCount = 3;
inline void Collect::clear_pulsecount() {
  pulsecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Collect::_internal_pulsecount() const {
  return pulsecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Collect::pulsecount() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.pulseCount)
  return _internal_pulsecount();
}
inline void Collect::_internal_set_pulsecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pulsecount_ = value;
}
inline void Collect::set_pulsecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pulsecount(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.pulseCount)
}

// float pointDistance = 4;
inline void Collect::clear_pointdistance() {
  pointdistance_ = 0;
}
inline float Collect::_internal_pointdistance() const {
  return pointdistance_;
}
inline float Collect::pointdistance() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.pointDistance)
  return _internal_pointdistance();
}
inline void Collect::_internal_set_pointdistance(float value) {
  
  pointdistance_ = value;
}
inline void Collect::set_pointdistance(float value) {
  _internal_set_pointdistance(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Collect.pointDistance)
}

// .com.caspe.devicemanagement.util.Collect.StopCondition stopCondition = 5;
inline bool Collect::_internal_has_stopcondition() const {
  return this != internal_default_instance() && stopcondition_ != nullptr;
}
inline bool Collect::has_stopcondition() const {
  return _internal_has_stopcondition();
}
inline void Collect::clear_stopcondition() {
  if (GetArena() == nullptr && stopcondition_ != nullptr) {
    delete stopcondition_;
  }
  stopcondition_ = nullptr;
}
inline const ::com::caspe::devicemanagement::util::Collect_StopCondition& Collect::_internal_stopcondition() const {
  const ::com::caspe::devicemanagement::util::Collect_StopCondition* p = stopcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::caspe::devicemanagement::util::Collect_StopCondition*>(
      &::com::caspe::devicemanagement::util::_Collect_StopCondition_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::Collect_StopCondition& Collect::stopcondition() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.stopCondition)
  return _internal_stopcondition();
}
inline void Collect::unsafe_arena_set_allocated_stopcondition(
    ::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopcondition_);
  }
  stopcondition_ = stopcondition;
  if (stopcondition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Collect.stopCondition)
}
inline ::com::caspe::devicemanagement::util::Collect_StopCondition* Collect::release_stopcondition() {
  auto temp = unsafe_arena_release_stopcondition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::caspe::devicemanagement::util::Collect_StopCondition* Collect::unsafe_arena_release_stopcondition() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Collect.stopCondition)
  
  ::com::caspe::devicemanagement::util::Collect_StopCondition* temp = stopcondition_;
  stopcondition_ = nullptr;
  return temp;
}
inline ::com::caspe::devicemanagement::util::Collect_StopCondition* Collect::_internal_mutable_stopcondition() {
  
  if (stopcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::caspe::devicemanagement::util::Collect_StopCondition>(GetArena());
    stopcondition_ = p;
  }
  return stopcondition_;
}
inline ::com::caspe::devicemanagement::util::Collect_StopCondition* Collect::mutable_stopcondition() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.stopCondition)
  return _internal_mutable_stopcondition();
}
inline void Collect::set_allocated_stopcondition(::com::caspe::devicemanagement::util::Collect_StopCondition* stopcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stopcondition_;
  }
  if (stopcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stopcondition);
    if (message_arena != submessage_arena) {
      stopcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopcondition, submessage_arena);
    }
    
  } else {
    
  }
  stopcondition_ = stopcondition;
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Collect.stopCondition)
}

// repeated .com.caspe.devicemanagement.util.Collect.PartList partLists = 6;
inline int Collect::_internal_partlists_size() const {
  return partlists_.size();
}
inline int Collect::partlists_size() const {
  return _internal_partlists_size();
}
inline void Collect::clear_partlists() {
  partlists_.Clear();
}
inline ::com::caspe::devicemanagement::util::Collect_PartList* Collect::mutable_partlists(int index) {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Collect.partLists)
  return partlists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Collect_PartList >*
Collect::mutable_partlists() {
  // @@protoc_insertion_point(field_mutable_list:com.caspe.devicemanagement.util.Collect.partLists)
  return &partlists_;
}
inline const ::com::caspe::devicemanagement::util::Collect_PartList& Collect::_internal_partlists(int index) const {
  return partlists_.Get(index);
}
inline const ::com::caspe::devicemanagement::util::Collect_PartList& Collect::partlists(int index) const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Collect.partLists)
  return _internal_partlists(index);
}
inline ::com::caspe::devicemanagement::util::Collect_PartList* Collect::_internal_add_partlists() {
  return partlists_.Add();
}
inline ::com::caspe::devicemanagement::util::Collect_PartList* Collect::add_partlists() {
  // @@protoc_insertion_point(field_add:com.caspe.devicemanagement.util.Collect.partLists)
  return _internal_add_partlists();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Collect_PartList >&
Collect::partlists() const {
  // @@protoc_insertion_point(field_list:com.caspe.devicemanagement.util.Collect.partLists)
  return partlists_;
}

// -------------------------------------------------------------------

// ProcessInfo

// string mode = 1;
inline void ProcessInfo::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessInfo::mode() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.ProcessInfo.mode)
  return _internal_mode();
}
inline void ProcessInfo::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.ProcessInfo.mode)
}
inline std::string* ProcessInfo::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.ProcessInfo.mode)
  return _internal_mutable_mode();
}
inline const std::string& ProcessInfo::_internal_mode() const {
  return mode_.Get();
}
inline void ProcessInfo::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessInfo::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.ProcessInfo.mode)
}
inline void ProcessInfo::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.ProcessInfo.mode)
}
inline void ProcessInfo::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.ProcessInfo.mode)
}
inline std::string* ProcessInfo::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessInfo::release_mode() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.ProcessInfo.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessInfo::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.ProcessInfo.mode)
}
inline std::string* ProcessInfo::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.ProcessInfo.mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessInfo::unsafe_arena_set_allocated_mode(
    std::string* mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.ProcessInfo.mode)
}

// string processId = 2;
inline void ProcessInfo::clear_processid() {
  processid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessInfo::processid() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.ProcessInfo.processId)
  return _internal_processid();
}
inline void ProcessInfo::set_processid(const std::string& value) {
  _internal_set_processid(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.ProcessInfo.processId)
}
inline std::string* ProcessInfo::mutable_processid() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.ProcessInfo.processId)
  return _internal_mutable_processid();
}
inline const std::string& ProcessInfo::_internal_processid() const {
  return processid_.Get();
}
inline void ProcessInfo::_internal_set_processid(const std::string& value) {
  
  processid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessInfo::set_processid(std::string&& value) {
  
  processid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.ProcessInfo.processId)
}
inline void ProcessInfo::set_processid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.ProcessInfo.processId)
}
inline void ProcessInfo::set_processid(const char* value,
    size_t size) {
  
  processid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.ProcessInfo.processId)
}
inline std::string* ProcessInfo::_internal_mutable_processid() {
  
  return processid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessInfo::release_processid() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.ProcessInfo.processId)
  return processid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessInfo::set_allocated_processid(std::string* processid) {
  if (processid != nullptr) {
    
  } else {
    
  }
  processid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.ProcessInfo.processId)
}
inline std::string* ProcessInfo::unsafe_arena_release_processid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.ProcessInfo.processId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return processid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessInfo::unsafe_arena_set_allocated_processid(
    std::string* processid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (processid != nullptr) {
    
  } else {
    
  }
  processid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      processid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.ProcessInfo.processId)
}

// string sAngle = 3;
inline void ProcessInfo::clear_sangle() {
  sangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessInfo::sangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
  return _internal_sangle();
}
inline void ProcessInfo::set_sangle(const std::string& value) {
  _internal_set_sangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
}
inline std::string* ProcessInfo::mutable_sangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
  return _internal_mutable_sangle();
}
inline const std::string& ProcessInfo::_internal_sangle() const {
  return sangle_.Get();
}
inline void ProcessInfo::_internal_set_sangle(const std::string& value) {
  
  sangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessInfo::set_sangle(std::string&& value) {
  
  sangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
}
inline void ProcessInfo::set_sangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
}
inline void ProcessInfo::set_sangle(const char* value,
    size_t size) {
  
  sangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
}
inline std::string* ProcessInfo::_internal_mutable_sangle() {
  
  return sangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessInfo::release_sangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
  return sangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessInfo::set_allocated_sangle(std::string* sangle) {
  if (sangle != nullptr) {
    
  } else {
    
  }
  sangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
}
inline std::string* ProcessInfo::unsafe_arena_release_sangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessInfo::unsafe_arena_set_allocated_sangle(
    std::string* sangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sangle != nullptr) {
    
  } else {
    
  }
  sangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.ProcessInfo.sAngle)
}

// string eAngle = 4;
inline void ProcessInfo::clear_eangle() {
  eangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessInfo::eangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
  return _internal_eangle();
}
inline void ProcessInfo::set_eangle(const std::string& value) {
  _internal_set_eangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
}
inline std::string* ProcessInfo::mutable_eangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
  return _internal_mutable_eangle();
}
inline const std::string& ProcessInfo::_internal_eangle() const {
  return eangle_.Get();
}
inline void ProcessInfo::_internal_set_eangle(const std::string& value) {
  
  eangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessInfo::set_eangle(std::string&& value) {
  
  eangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
}
inline void ProcessInfo::set_eangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
}
inline void ProcessInfo::set_eangle(const char* value,
    size_t size) {
  
  eangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
}
inline std::string* ProcessInfo::_internal_mutable_eangle() {
  
  return eangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessInfo::release_eangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
  return eangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessInfo::set_allocated_eangle(std::string* eangle) {
  if (eangle != nullptr) {
    
  } else {
    
  }
  eangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
}
inline std::string* ProcessInfo::unsafe_arena_release_eangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return eangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessInfo::unsafe_arena_set_allocated_eangle(
    std::string* eangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (eangle != nullptr) {
    
  } else {
    
  }
  eangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      eangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.ProcessInfo.eAngle)
}

// -------------------------------------------------------------------

// CollectReply

// .com.caspe.devicemanagement.util.ProcessInfo process = 1;
inline bool CollectReply::_internal_has_process() const {
  return this != internal_default_instance() && process_ != nullptr;
}
inline bool CollectReply::has_process() const {
  return _internal_has_process();
}
inline void CollectReply::clear_process() {
  if (GetArena() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
}
inline const ::com::caspe::devicemanagement::util::ProcessInfo& CollectReply::_internal_process() const {
  const ::com::caspe::devicemanagement::util::ProcessInfo* p = process_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::caspe::devicemanagement::util::ProcessInfo*>(
      &::com::caspe::devicemanagement::util::_ProcessInfo_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::ProcessInfo& CollectReply::process() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.CollectReply.process)
  return _internal_process();
}
inline void CollectReply::unsafe_arena_set_allocated_process(
    ::com::caspe::devicemanagement::util::ProcessInfo* process) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_);
  }
  process_ = process;
  if (process) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.CollectReply.process)
}
inline ::com::caspe::devicemanagement::util::ProcessInfo* CollectReply::release_process() {
  auto temp = unsafe_arena_release_process();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::caspe::devicemanagement::util::ProcessInfo* CollectReply::unsafe_arena_release_process() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.CollectReply.process)
  
  ::com::caspe::devicemanagement::util::ProcessInfo* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::com::caspe::devicemanagement::util::ProcessInfo* CollectReply::_internal_mutable_process() {
  
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::caspe::devicemanagement::util::ProcessInfo>(GetArena());
    process_ = p;
  }
  return process_;
}
inline ::com::caspe::devicemanagement::util::ProcessInfo* CollectReply::mutable_process() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.CollectReply.process)
  return _internal_mutable_process();
}
inline void CollectReply::set_allocated_process(::com::caspe::devicemanagement::util::ProcessInfo* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete process_;
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(process);
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    
  } else {
    
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.CollectReply.process)
}

// -------------------------------------------------------------------

// SuspendReply

// string hAngle = 3;
inline void SuspendReply::clear_hangle() {
  hangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SuspendReply::hangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SuspendReply.hAngle)
  return _internal_hangle();
}
inline void SuspendReply::set_hangle(const std::string& value) {
  _internal_set_hangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SuspendReply.hAngle)
}
inline std::string* SuspendReply::mutable_hangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SuspendReply.hAngle)
  return _internal_mutable_hangle();
}
inline const std::string& SuspendReply::_internal_hangle() const {
  return hangle_.Get();
}
inline void SuspendReply::_internal_set_hangle(const std::string& value) {
  
  hangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SuspendReply::set_hangle(std::string&& value) {
  
  hangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SuspendReply.hAngle)
}
inline void SuspendReply::set_hangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SuspendReply.hAngle)
}
inline void SuspendReply::set_hangle(const char* value,
    size_t size) {
  
  hangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SuspendReply.hAngle)
}
inline std::string* SuspendReply::_internal_mutable_hangle() {
  
  return hangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SuspendReply::release_hangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SuspendReply.hAngle)
  return hangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SuspendReply::set_allocated_hangle(std::string* hangle) {
  if (hangle != nullptr) {
    
  } else {
    
  }
  hangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SuspendReply.hAngle)
}
inline std::string* SuspendReply::unsafe_arena_release_hangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SuspendReply.hAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SuspendReply::unsafe_arena_set_allocated_hangle(
    std::string* hangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hangle != nullptr) {
    
  } else {
    
  }
  hangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SuspendReply.hAngle)
}

// string vAngle = 4;
inline void SuspendReply::clear_vangle() {
  vangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SuspendReply::vangle() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SuspendReply.vAngle)
  return _internal_vangle();
}
inline void SuspendReply::set_vangle(const std::string& value) {
  _internal_set_vangle(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SuspendReply.vAngle)
}
inline std::string* SuspendReply::mutable_vangle() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SuspendReply.vAngle)
  return _internal_mutable_vangle();
}
inline const std::string& SuspendReply::_internal_vangle() const {
  return vangle_.Get();
}
inline void SuspendReply::_internal_set_vangle(const std::string& value) {
  
  vangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SuspendReply::set_vangle(std::string&& value) {
  
  vangle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SuspendReply.vAngle)
}
inline void SuspendReply::set_vangle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SuspendReply.vAngle)
}
inline void SuspendReply::set_vangle(const char* value,
    size_t size) {
  
  vangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SuspendReply.vAngle)
}
inline std::string* SuspendReply::_internal_mutable_vangle() {
  
  return vangle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SuspendReply::release_vangle() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SuspendReply.vAngle)
  return vangle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SuspendReply::set_allocated_vangle(std::string* vangle) {
  if (vangle != nullptr) {
    
  } else {
    
  }
  vangle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vangle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SuspendReply.vAngle)
}
inline std::string* SuspendReply::unsafe_arena_release_vangle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SuspendReply.vAngle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vangle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SuspendReply::unsafe_arena_set_allocated_vangle(
    std::string* vangle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vangle != nullptr) {
    
  } else {
    
  }
  vangle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vangle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SuspendReply.vAngle)
}

// -------------------------------------------------------------------

// CollectComplete

// .com.caspe.devicemanagement.util.ProcessInfo process = 1;
inline bool CollectComplete::_internal_has_process() const {
  return this != internal_default_instance() && process_ != nullptr;
}
inline bool CollectComplete::has_process() const {
  return _internal_has_process();
}
inline void CollectComplete::clear_process() {
  if (GetArena() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
}
inline const ::com::caspe::devicemanagement::util::ProcessInfo& CollectComplete::_internal_process() const {
  const ::com::caspe::devicemanagement::util::ProcessInfo* p = process_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::caspe::devicemanagement::util::ProcessInfo*>(
      &::com::caspe::devicemanagement::util::_ProcessInfo_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::ProcessInfo& CollectComplete::process() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.CollectComplete.process)
  return _internal_process();
}
inline void CollectComplete::unsafe_arena_set_allocated_process(
    ::com::caspe::devicemanagement::util::ProcessInfo* process) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_);
  }
  process_ = process;
  if (process) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.CollectComplete.process)
}
inline ::com::caspe::devicemanagement::util::ProcessInfo* CollectComplete::release_process() {
  auto temp = unsafe_arena_release_process();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::caspe::devicemanagement::util::ProcessInfo* CollectComplete::unsafe_arena_release_process() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.CollectComplete.process)
  
  ::com::caspe::devicemanagement::util::ProcessInfo* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::com::caspe::devicemanagement::util::ProcessInfo* CollectComplete::_internal_mutable_process() {
  
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::caspe::devicemanagement::util::ProcessInfo>(GetArena());
    process_ = p;
  }
  return process_;
}
inline ::com::caspe::devicemanagement::util::ProcessInfo* CollectComplete::mutable_process() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.CollectComplete.process)
  return _internal_mutable_process();
}
inline void CollectComplete::set_allocated_process(::com::caspe::devicemanagement::util::ProcessInfo* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete process_;
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(process);
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    
  } else {
    
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.CollectComplete.process)
}

// string reason = 2;
inline void CollectComplete::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CollectComplete::reason() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.CollectComplete.reason)
  return _internal_reason();
}
inline void CollectComplete::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.CollectComplete.reason)
}
inline std::string* CollectComplete::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.CollectComplete.reason)
  return _internal_mutable_reason();
}
inline const std::string& CollectComplete::_internal_reason() const {
  return reason_.Get();
}
inline void CollectComplete::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CollectComplete::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.CollectComplete.reason)
}
inline void CollectComplete::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.CollectComplete.reason)
}
inline void CollectComplete::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.CollectComplete.reason)
}
inline std::string* CollectComplete::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CollectComplete::release_reason() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.CollectComplete.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CollectComplete::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.CollectComplete.reason)
}
inline std::string* CollectComplete::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.CollectComplete.reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CollectComplete::unsafe_arena_set_allocated_reason(
    std::string* reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.CollectComplete.reason)
}

// -------------------------------------------------------------------

// StatusReport_Status

// string name = 1;
inline void StatusReport_Status::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusReport_Status::name() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.StatusReport.Status.name)
  return _internal_name();
}
inline void StatusReport_Status::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.StatusReport.Status.name)
}
inline std::string* StatusReport_Status::mutable_name() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.StatusReport.Status.name)
  return _internal_mutable_name();
}
inline const std::string& StatusReport_Status::_internal_name() const {
  return name_.Get();
}
inline void StatusReport_Status::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusReport_Status::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.StatusReport.Status.name)
}
inline void StatusReport_Status::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.StatusReport.Status.name)
}
inline void StatusReport_Status::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.StatusReport.Status.name)
}
inline std::string* StatusReport_Status::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusReport_Status::release_name() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.StatusReport.Status.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusReport_Status::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.StatusReport.Status.name)
}
inline std::string* StatusReport_Status::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.StatusReport.Status.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusReport_Status::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.StatusReport.Status.name)
}

// string value = 2;
inline void StatusReport_Status::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusReport_Status::value() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.StatusReport.Status.value)
  return _internal_value();
}
inline void StatusReport_Status::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.StatusReport.Status.value)
}
inline std::string* StatusReport_Status::mutable_value() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.StatusReport.Status.value)
  return _internal_mutable_value();
}
inline const std::string& StatusReport_Status::_internal_value() const {
  return value_.Get();
}
inline void StatusReport_Status::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusReport_Status::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.StatusReport.Status.value)
}
inline void StatusReport_Status::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.StatusReport.Status.value)
}
inline void StatusReport_Status::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.StatusReport.Status.value)
}
inline std::string* StatusReport_Status::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusReport_Status::release_value() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.StatusReport.Status.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusReport_Status::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.StatusReport.Status.value)
}
inline std::string* StatusReport_Status::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.StatusReport.Status.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusReport_Status::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.StatusReport.Status.value)
}

// string error = 3;
inline void StatusReport_Status::clear_error() {
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusReport_Status::error() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.StatusReport.Status.error)
  return _internal_error();
}
inline void StatusReport_Status::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.StatusReport.Status.error)
}
inline std::string* StatusReport_Status::mutable_error() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.StatusReport.Status.error)
  return _internal_mutable_error();
}
inline const std::string& StatusReport_Status::_internal_error() const {
  return error_.Get();
}
inline void StatusReport_Status::_internal_set_error(const std::string& value) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusReport_Status::set_error(std::string&& value) {
  
  error_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.StatusReport.Status.error)
}
inline void StatusReport_Status::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.StatusReport.Status.error)
}
inline void StatusReport_Status::set_error(const char* value,
    size_t size) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.StatusReport.Status.error)
}
inline std::string* StatusReport_Status::_internal_mutable_error() {
  
  return error_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusReport_Status::release_error() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.StatusReport.Status.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusReport_Status::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.StatusReport.Status.error)
}
inline std::string* StatusReport_Status::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.StatusReport.Status.error)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusReport_Status::unsafe_arena_set_allocated_error(
    std::string* error) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error != nullptr) {
    
  } else {
    
  }
  error_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.StatusReport.Status.error)
}

// -------------------------------------------------------------------

// StatusReport

// repeated .com.caspe.devicemanagement.util.StatusReport.Status status = 1;
inline int StatusReport::_internal_status_size() const {
  return status_.size();
}
inline int StatusReport::status_size() const {
  return _internal_status_size();
}
inline void StatusReport::clear_status() {
  status_.Clear();
}
inline ::com::caspe::devicemanagement::util::StatusReport_Status* StatusReport::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.StatusReport.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::StatusReport_Status >*
StatusReport::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:com.caspe.devicemanagement.util.StatusReport.status)
  return &status_;
}
inline const ::com::caspe::devicemanagement::util::StatusReport_Status& StatusReport::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::com::caspe::devicemanagement::util::StatusReport_Status& StatusReport::status(int index) const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.StatusReport.status)
  return _internal_status(index);
}
inline ::com::caspe::devicemanagement::util::StatusReport_Status* StatusReport::_internal_add_status() {
  return status_.Add();
}
inline ::com::caspe::devicemanagement::util::StatusReport_Status* StatusReport::add_status() {
  // @@protoc_insertion_point(field_add:com.caspe.devicemanagement.util.StatusReport.status)
  return _internal_add_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::StatusReport_Status >&
StatusReport::status() const {
  // @@protoc_insertion_point(field_list:com.caspe.devicemanagement.util.StatusReport.status)
  return status_;
}

// -------------------------------------------------------------------

// Alg

// string extinAlgorithmType = 1;
inline void Alg::clear_extinalgorithmtype() {
  extinalgorithmtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::extinalgorithmtype() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
  return _internal_extinalgorithmtype();
}
inline void Alg::set_extinalgorithmtype(const std::string& value) {
  _internal_set_extinalgorithmtype(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
}
inline std::string* Alg::mutable_extinalgorithmtype() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
  return _internal_mutable_extinalgorithmtype();
}
inline const std::string& Alg::_internal_extinalgorithmtype() const {
  return extinalgorithmtype_.Get();
}
inline void Alg::_internal_set_extinalgorithmtype(const std::string& value) {
  
  extinalgorithmtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_extinalgorithmtype(std::string&& value) {
  
  extinalgorithmtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
}
inline void Alg::set_extinalgorithmtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extinalgorithmtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
}
inline void Alg::set_extinalgorithmtype(const char* value,
    size_t size) {
  
  extinalgorithmtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
}
inline std::string* Alg::_internal_mutable_extinalgorithmtype() {
  
  return extinalgorithmtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_extinalgorithmtype() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
  return extinalgorithmtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_extinalgorithmtype(std::string* extinalgorithmtype) {
  if (extinalgorithmtype != nullptr) {
    
  } else {
    
  }
  extinalgorithmtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extinalgorithmtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
}
inline std::string* Alg::unsafe_arena_release_extinalgorithmtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return extinalgorithmtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_extinalgorithmtype(
    std::string* extinalgorithmtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (extinalgorithmtype != nullptr) {
    
  } else {
    
  }
  extinalgorithmtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      extinalgorithmtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.extinAlgorithmType)
}

// string fixCloudyExtin = 2;
inline void Alg::clear_fixcloudyextin() {
  fixcloudyextin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::fixcloudyextin() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
  return _internal_fixcloudyextin();
}
inline void Alg::set_fixcloudyextin(const std::string& value) {
  _internal_set_fixcloudyextin(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
}
inline std::string* Alg::mutable_fixcloudyextin() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
  return _internal_mutable_fixcloudyextin();
}
inline const std::string& Alg::_internal_fixcloudyextin() const {
  return fixcloudyextin_.Get();
}
inline void Alg::_internal_set_fixcloudyextin(const std::string& value) {
  
  fixcloudyextin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_fixcloudyextin(std::string&& value) {
  
  fixcloudyextin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
}
inline void Alg::set_fixcloudyextin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fixcloudyextin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
}
inline void Alg::set_fixcloudyextin(const char* value,
    size_t size) {
  
  fixcloudyextin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
}
inline std::string* Alg::_internal_mutable_fixcloudyextin() {
  
  return fixcloudyextin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_fixcloudyextin() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
  return fixcloudyextin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_fixcloudyextin(std::string* fixcloudyextin) {
  if (fixcloudyextin != nullptr) {
    
  } else {
    
  }
  fixcloudyextin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fixcloudyextin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
}
inline std::string* Alg::unsafe_arena_release_fixcloudyextin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fixcloudyextin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_fixcloudyextin(
    std::string* fixcloudyextin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fixcloudyextin != nullptr) {
    
  } else {
    
  }
  fixcloudyextin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fixcloudyextin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.fixCloudyExtin)
}

// float cloudExtThresh = 3;
inline void Alg::clear_cloudextthresh() {
  cloudextthresh_ = 0;
}
inline float Alg::_internal_cloudextthresh() const {
  return cloudextthresh_;
}
inline float Alg::cloudextthresh() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.cloudExtThresh)
  return _internal_cloudextthresh();
}
inline void Alg::_internal_set_cloudextthresh(float value) {
  
  cloudextthresh_ = value;
}
inline void Alg::set_cloudextthresh(float value) {
  _internal_set_cloudextthresh(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.cloudExtThresh)
}

// string fixReferHeight = 4;
inline void Alg::clear_fixreferheight() {
  fixreferheight_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::fixreferheight() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.fixReferHeight)
  return _internal_fixreferheight();
}
inline void Alg::set_fixreferheight(const std::string& value) {
  _internal_set_fixreferheight(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.fixReferHeight)
}
inline std::string* Alg::mutable_fixreferheight() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.fixReferHeight)
  return _internal_mutable_fixreferheight();
}
inline const std::string& Alg::_internal_fixreferheight() const {
  return fixreferheight_.Get();
}
inline void Alg::_internal_set_fixreferheight(const std::string& value) {
  
  fixreferheight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_fixreferheight(std::string&& value) {
  
  fixreferheight_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.fixReferHeight)
}
inline void Alg::set_fixreferheight(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fixreferheight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.fixReferHeight)
}
inline void Alg::set_fixreferheight(const char* value,
    size_t size) {
  
  fixreferheight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.fixReferHeight)
}
inline std::string* Alg::_internal_mutable_fixreferheight() {
  
  return fixreferheight_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_fixreferheight() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.fixReferHeight)
  return fixreferheight_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_fixreferheight(std::string* fixreferheight) {
  if (fixreferheight != nullptr) {
    
  } else {
    
  }
  fixreferheight_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fixreferheight,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.fixReferHeight)
}
inline std::string* Alg::unsafe_arena_release_fixreferheight() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.fixReferHeight)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fixreferheight_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_fixreferheight(
    std::string* fixreferheight) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fixreferheight != nullptr) {
    
  } else {
    
  }
  fixreferheight_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fixreferheight, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.fixReferHeight)
}

// string denoisingExtin = 5;
inline void Alg::clear_denoisingextin() {
  denoisingextin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::denoisingextin() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.denoisingExtin)
  return _internal_denoisingextin();
}
inline void Alg::set_denoisingextin(const std::string& value) {
  _internal_set_denoisingextin(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.denoisingExtin)
}
inline std::string* Alg::mutable_denoisingextin() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.denoisingExtin)
  return _internal_mutable_denoisingextin();
}
inline const std::string& Alg::_internal_denoisingextin() const {
  return denoisingextin_.Get();
}
inline void Alg::_internal_set_denoisingextin(const std::string& value) {
  
  denoisingextin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_denoisingextin(std::string&& value) {
  
  denoisingextin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.denoisingExtin)
}
inline void Alg::set_denoisingextin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  denoisingextin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.denoisingExtin)
}
inline void Alg::set_denoisingextin(const char* value,
    size_t size) {
  
  denoisingextin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.denoisingExtin)
}
inline std::string* Alg::_internal_mutable_denoisingextin() {
  
  return denoisingextin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_denoisingextin() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.denoisingExtin)
  return denoisingextin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_denoisingextin(std::string* denoisingextin) {
  if (denoisingextin != nullptr) {
    
  } else {
    
  }
  denoisingextin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denoisingextin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.denoisingExtin)
}
inline std::string* Alg::unsafe_arena_release_denoisingextin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.denoisingExtin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return denoisingextin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_denoisingextin(
    std::string* denoisingextin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (denoisingextin != nullptr) {
    
  } else {
    
  }
  denoisingextin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      denoisingextin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.denoisingExtin)
}

// string signalSplicing = 6;
inline void Alg::clear_signalsplicing() {
  signalsplicing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::signalsplicing() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.signalSplicing)
  return _internal_signalsplicing();
}
inline void Alg::set_signalsplicing(const std::string& value) {
  _internal_set_signalsplicing(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.signalSplicing)
}
inline std::string* Alg::mutable_signalsplicing() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.signalSplicing)
  return _internal_mutable_signalsplicing();
}
inline const std::string& Alg::_internal_signalsplicing() const {
  return signalsplicing_.Get();
}
inline void Alg::_internal_set_signalsplicing(const std::string& value) {
  
  signalsplicing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_signalsplicing(std::string&& value) {
  
  signalsplicing_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.signalSplicing)
}
inline void Alg::set_signalsplicing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signalsplicing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.signalSplicing)
}
inline void Alg::set_signalsplicing(const char* value,
    size_t size) {
  
  signalsplicing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.signalSplicing)
}
inline std::string* Alg::_internal_mutable_signalsplicing() {
  
  return signalsplicing_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_signalsplicing() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.signalSplicing)
  return signalsplicing_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_signalsplicing(std::string* signalsplicing) {
  if (signalsplicing != nullptr) {
    
  } else {
    
  }
  signalsplicing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalsplicing,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.signalSplicing)
}
inline std::string* Alg::unsafe_arena_release_signalsplicing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.signalSplicing)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signalsplicing_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_signalsplicing(
    std::string* signalsplicing) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signalsplicing != nullptr) {
    
  } else {
    
  }
  signalsplicing_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signalsplicing, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.signalSplicing)
}

// float snrThreshExtin = 7;
inline void Alg::clear_snrthreshextin() {
  snrthreshextin_ = 0;
}
inline float Alg::_internal_snrthreshextin() const {
  return snrthreshextin_;
}
inline float Alg::snrthreshextin() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.snrThreshExtin)
  return _internal_snrthreshextin();
}
inline void Alg::_internal_set_snrthreshextin(float value) {
  
  snrthreshextin_ = value;
}
inline void Alg::set_snrthreshextin(float value) {
  _internal_set_snrthreshextin(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.snrThreshExtin)
}

// float refHeight532 = 8;
inline void Alg::clear_refheight532() {
  refheight532_ = 0;
}
inline float Alg::_internal_refheight532() const {
  return refheight532_;
}
inline float Alg::refheight532() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.refHeight532)
  return _internal_refheight532();
}
inline void Alg::_internal_set_refheight532(float value) {
  
  refheight532_ = value;
}
inline void Alg::set_refheight532(float value) {
  _internal_set_refheight532(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.refHeight532)
}

// float depolFactor = 9;
inline void Alg::clear_depolfactor() {
  depolfactor_ = 0;
}
inline float Alg::_internal_depolfactor() const {
  return depolfactor_;
}
inline float Alg::depolfactor() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.depolFactor)
  return _internal_depolfactor();
}
inline void Alg::_internal_set_depolfactor(float value) {
  
  depolfactor_ = value;
}
inline void Alg::set_depolfactor(float value) {
  _internal_set_depolfactor(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.depolFactor)
}

// string denoising = 10;
inline void Alg::clear_denoising() {
  denoising_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::denoising() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.denoising)
  return _internal_denoising();
}
inline void Alg::set_denoising(const std::string& value) {
  _internal_set_denoising(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.denoising)
}
inline std::string* Alg::mutable_denoising() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.denoising)
  return _internal_mutable_denoising();
}
inline const std::string& Alg::_internal_denoising() const {
  return denoising_.Get();
}
inline void Alg::_internal_set_denoising(const std::string& value) {
  
  denoising_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_denoising(std::string&& value) {
  
  denoising_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.denoising)
}
inline void Alg::set_denoising(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  denoising_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.denoising)
}
inline void Alg::set_denoising(const char* value,
    size_t size) {
  
  denoising_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.denoising)
}
inline std::string* Alg::_internal_mutable_denoising() {
  
  return denoising_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_denoising() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.denoising)
  return denoising_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_denoising(std::string* denoising) {
  if (denoising != nullptr) {
    
  } else {
    
  }
  denoising_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denoising,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.denoising)
}
inline std::string* Alg::unsafe_arena_release_denoising() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.denoising)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return denoising_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_denoising(
    std::string* denoising) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (denoising != nullptr) {
    
  } else {
    
  }
  denoising_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      denoising, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.denoising)
}

// float snrThreshDepol = 11;
inline void Alg::clear_snrthreshdepol() {
  snrthreshdepol_ = 0;
}
inline float Alg::_internal_snrthreshdepol() const {
  return snrthreshdepol_;
}
inline float Alg::snrthreshdepol() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.snrThreshDepol)
  return _internal_snrthreshdepol();
}
inline void Alg::_internal_set_snrthreshdepol(float value) {
  
  snrthreshdepol_ = value;
}
inline void Alg::set_snrthreshdepol(float value) {
  _internal_set_snrthreshdepol(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.snrThreshDepol)
}

// string echoDefault = 12;
inline void Alg::clear_echodefault() {
  echodefault_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::echodefault() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.echoDefault)
  return _internal_echodefault();
}
inline void Alg::set_echodefault(const std::string& value) {
  _internal_set_echodefault(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.echoDefault)
}
inline std::string* Alg::mutable_echodefault() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.echoDefault)
  return _internal_mutable_echodefault();
}
inline const std::string& Alg::_internal_echodefault() const {
  return echodefault_.Get();
}
inline void Alg::_internal_set_echodefault(const std::string& value) {
  
  echodefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_echodefault(std::string&& value) {
  
  echodefault_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.echoDefault)
}
inline void Alg::set_echodefault(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  echodefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.echoDefault)
}
inline void Alg::set_echodefault(const char* value,
    size_t size) {
  
  echodefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.echoDefault)
}
inline std::string* Alg::_internal_mutable_echodefault() {
  
  return echodefault_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_echodefault() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.echoDefault)
  return echodefault_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_echodefault(std::string* echodefault) {
  if (echodefault != nullptr) {
    
  } else {
    
  }
  echodefault_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), echodefault,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.echoDefault)
}
inline std::string* Alg::unsafe_arena_release_echodefault() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.echoDefault)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return echodefault_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_echodefault(
    std::string* echodefault) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (echodefault != nullptr) {
    
  } else {
    
  }
  echodefault_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      echodefault, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.echoDefault)
}

// float echoStart = 13;
inline void Alg::clear_echostart() {
  echostart_ = 0;
}
inline float Alg::_internal_echostart() const {
  return echostart_;
}
inline float Alg::echostart() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.echoStart)
  return _internal_echostart();
}
inline void Alg::_internal_set_echostart(float value) {
  
  echostart_ = value;
}
inline void Alg::set_echostart(float value) {
  _internal_set_echostart(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.echoStart)
}

// float echoEnd = 14;
inline void Alg::clear_echoend() {
  echoend_ = 0;
}
inline float Alg::_internal_echoend() const {
  return echoend_;
}
inline float Alg::echoend() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.echoEnd)
  return _internal_echoend();
}
inline void Alg::_internal_set_echoend(float value) {
  
  echoend_ = value;
}
inline void Alg::set_echoend(float value) {
  _internal_set_echoend(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.echoEnd)
}

// string smooth = 15;
inline void Alg::clear_smooth() {
  smooth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::smooth() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.smooth)
  return _internal_smooth();
}
inline void Alg::set_smooth(const std::string& value) {
  _internal_set_smooth(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.smooth)
}
inline std::string* Alg::mutable_smooth() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.smooth)
  return _internal_mutable_smooth();
}
inline const std::string& Alg::_internal_smooth() const {
  return smooth_.Get();
}
inline void Alg::_internal_set_smooth(const std::string& value) {
  
  smooth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_smooth(std::string&& value) {
  
  smooth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.smooth)
}
inline void Alg::set_smooth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smooth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.smooth)
}
inline void Alg::set_smooth(const char* value,
    size_t size) {
  
  smooth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.smooth)
}
inline std::string* Alg::_internal_mutable_smooth() {
  
  return smooth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_smooth() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.smooth)
  return smooth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_smooth(std::string* smooth) {
  if (smooth != nullptr) {
    
  } else {
    
  }
  smooth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smooth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.smooth)
}
inline std::string* Alg::unsafe_arena_release_smooth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.smooth)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return smooth_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_smooth(
    std::string* smooth) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (smooth != nullptr) {
    
  } else {
    
  }
  smooth_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      smooth, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.smooth)
}

// int32 smoothTimes = 16;
inline void Alg::clear_smoothtimes() {
  smoothtimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alg::_internal_smoothtimes() const {
  return smoothtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alg::smoothtimes() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.smoothTimes)
  return _internal_smoothtimes();
}
inline void Alg::_internal_set_smoothtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  smoothtimes_ = value;
}
inline void Alg::set_smoothtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_smoothtimes(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.smoothTimes)
}

// int32 windowLength = 17;
inline void Alg::clear_windowlength() {
  windowlength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alg::_internal_windowlength() const {
  return windowlength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alg::windowlength() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.windowLength)
  return _internal_windowlength();
}
inline void Alg::_internal_set_windowlength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  windowlength_ = value;
}
inline void Alg::set_windowlength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_windowlength(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.windowLength)
}

// float pm10RatioA = 18;
inline void Alg::clear_pm10ratioa() {
  pm10ratioa_ = 0;
}
inline float Alg::_internal_pm10ratioa() const {
  return pm10ratioa_;
}
inline float Alg::pm10ratioa() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.pm10RatioA)
  return _internal_pm10ratioa();
}
inline void Alg::_internal_set_pm10ratioa(float value) {
  
  pm10ratioa_ = value;
}
inline void Alg::set_pm10ratioa(float value) {
  _internal_set_pm10ratioa(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.pm10RatioA)
}

// float pm10RatioB = 19;
inline void Alg::clear_pm10ratiob() {
  pm10ratiob_ = 0;
}
inline float Alg::_internal_pm10ratiob() const {
  return pm10ratiob_;
}
inline float Alg::pm10ratiob() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.pm10RatioB)
  return _internal_pm10ratiob();
}
inline void Alg::_internal_set_pm10ratiob(float value) {
  
  pm10ratiob_ = value;
}
inline void Alg::set_pm10ratiob(float value) {
  _internal_set_pm10ratiob(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.pm10RatioB)
}

// float pm10RatioC = 20;
inline void Alg::clear_pm10ratioc() {
  pm10ratioc_ = 0;
}
inline float Alg::_internal_pm10ratioc() const {
  return pm10ratioc_;
}
inline float Alg::pm10ratioc() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.pm10RatioC)
  return _internal_pm10ratioc();
}
inline void Alg::_internal_set_pm10ratioc(float value) {
  
  pm10ratioc_ = value;
}
inline void Alg::set_pm10ratioc(float value) {
  _internal_set_pm10ratioc(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.pm10RatioC)
}

// float pm25RatioA = 21;
inline void Alg::clear_pm25ratioa() {
  pm25ratioa_ = 0;
}
inline float Alg::_internal_pm25ratioa() const {
  return pm25ratioa_;
}
inline float Alg::pm25ratioa() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.pm25RatioA)
  return _internal_pm25ratioa();
}
inline void Alg::_internal_set_pm25ratioa(float value) {
  
  pm25ratioa_ = value;
}
inline void Alg::set_pm25ratioa(float value) {
  _internal_set_pm25ratioa(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.pm25RatioA)
}

// float pm25RatioB = 22;
inline void Alg::clear_pm25ratiob() {
  pm25ratiob_ = 0;
}
inline float Alg::_internal_pm25ratiob() const {
  return pm25ratiob_;
}
inline float Alg::pm25ratiob() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.pm25RatioB)
  return _internal_pm25ratiob();
}
inline void Alg::_internal_set_pm25ratiob(float value) {
  
  pm25ratiob_ = value;
}
inline void Alg::set_pm25ratiob(float value) {
  _internal_set_pm25ratiob(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.pm25RatioB)
}

// float pm25RatioC = 23;
inline void Alg::clear_pm25ratioc() {
  pm25ratioc_ = 0;
}
inline float Alg::_internal_pm25ratioc() const {
  return pm25ratioc_;
}
inline float Alg::pm25ratioc() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.pm25RatioC)
  return _internal_pm25ratioc();
}
inline void Alg::_internal_set_pm25ratioc(float value) {
  
  pm25ratioc_ = value;
}
inline void Alg::set_pm25ratioc(float value) {
  _internal_set_pm25ratioc(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.pm25RatioC)
}

// string visibilityDefault = 24;
inline void Alg::clear_visibilitydefault() {
  visibilitydefault_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::visibilitydefault() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.visibilityDefault)
  return _internal_visibilitydefault();
}
inline void Alg::set_visibilitydefault(const std::string& value) {
  _internal_set_visibilitydefault(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.visibilityDefault)
}
inline std::string* Alg::mutable_visibilitydefault() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.visibilityDefault)
  return _internal_mutable_visibilitydefault();
}
inline const std::string& Alg::_internal_visibilitydefault() const {
  return visibilitydefault_.Get();
}
inline void Alg::_internal_set_visibilitydefault(const std::string& value) {
  
  visibilitydefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_visibilitydefault(std::string&& value) {
  
  visibilitydefault_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.visibilityDefault)
}
inline void Alg::set_visibilitydefault(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  visibilitydefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.visibilityDefault)
}
inline void Alg::set_visibilitydefault(const char* value,
    size_t size) {
  
  visibilitydefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.visibilityDefault)
}
inline std::string* Alg::_internal_mutable_visibilitydefault() {
  
  return visibilitydefault_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_visibilitydefault() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.visibilityDefault)
  return visibilitydefault_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_visibilitydefault(std::string* visibilitydefault) {
  if (visibilitydefault != nullptr) {
    
  } else {
    
  }
  visibilitydefault_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), visibilitydefault,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.visibilityDefault)
}
inline std::string* Alg::unsafe_arena_release_visibilitydefault() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.visibilityDefault)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return visibilitydefault_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_visibilitydefault(
    std::string* visibilitydefault) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (visibilitydefault != nullptr) {
    
  } else {
    
  }
  visibilitydefault_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      visibilitydefault, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.visibilityDefault)
}

// string visibilityOutCloud = 25;
inline void Alg::clear_visibilityoutcloud() {
  visibilityoutcloud_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::visibilityoutcloud() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
  return _internal_visibilityoutcloud();
}
inline void Alg::set_visibilityoutcloud(const std::string& value) {
  _internal_set_visibilityoutcloud(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
}
inline std::string* Alg::mutable_visibilityoutcloud() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
  return _internal_mutable_visibilityoutcloud();
}
inline const std::string& Alg::_internal_visibilityoutcloud() const {
  return visibilityoutcloud_.Get();
}
inline void Alg::_internal_set_visibilityoutcloud(const std::string& value) {
  
  visibilityoutcloud_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_visibilityoutcloud(std::string&& value) {
  
  visibilityoutcloud_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
}
inline void Alg::set_visibilityoutcloud(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  visibilityoutcloud_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
}
inline void Alg::set_visibilityoutcloud(const char* value,
    size_t size) {
  
  visibilityoutcloud_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
}
inline std::string* Alg::_internal_mutable_visibilityoutcloud() {
  
  return visibilityoutcloud_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_visibilityoutcloud() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
  return visibilityoutcloud_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_visibilityoutcloud(std::string* visibilityoutcloud) {
  if (visibilityoutcloud != nullptr) {
    
  } else {
    
  }
  visibilityoutcloud_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), visibilityoutcloud,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
}
inline std::string* Alg::unsafe_arena_release_visibilityoutcloud() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return visibilityoutcloud_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_visibilityoutcloud(
    std::string* visibilityoutcloud) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (visibilityoutcloud != nullptr) {
    
  } else {
    
  }
  visibilityoutcloud_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      visibilityoutcloud, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.visibilityOutCloud)
}

// float visibilityStartH = 26;
inline void Alg::clear_visibilitystarth() {
  visibilitystarth_ = 0;
}
inline float Alg::_internal_visibilitystarth() const {
  return visibilitystarth_;
}
inline float Alg::visibilitystarth() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.visibilityStartH)
  return _internal_visibilitystarth();
}
inline void Alg::_internal_set_visibilitystarth(float value) {
  
  visibilitystarth_ = value;
}
inline void Alg::set_visibilitystarth(float value) {
  _internal_set_visibilitystarth(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.visibilityStartH)
}

// float visibilityEndH = 27;
inline void Alg::clear_visibilityendh() {
  visibilityendh_ = 0;
}
inline float Alg::_internal_visibilityendh() const {
  return visibilityendh_;
}
inline float Alg::visibilityendh() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.visibilityEndH)
  return _internal_visibilityendh();
}
inline void Alg::_internal_set_visibilityendh(float value) {
  
  visibilityendh_ = value;
}
inline void Alg::set_visibilityendh(float value) {
  _internal_set_visibilityendh(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.visibilityEndH)
}

// string aodDefault = 28;
inline void Alg::clear_aoddefault() {
  aoddefault_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::aoddefault() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.aodDefault)
  return _internal_aoddefault();
}
inline void Alg::set_aoddefault(const std::string& value) {
  _internal_set_aoddefault(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.aodDefault)
}
inline std::string* Alg::mutable_aoddefault() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.aodDefault)
  return _internal_mutable_aoddefault();
}
inline const std::string& Alg::_internal_aoddefault() const {
  return aoddefault_.Get();
}
inline void Alg::_internal_set_aoddefault(const std::string& value) {
  
  aoddefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_aoddefault(std::string&& value) {
  
  aoddefault_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.aodDefault)
}
inline void Alg::set_aoddefault(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aoddefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.aodDefault)
}
inline void Alg::set_aoddefault(const char* value,
    size_t size) {
  
  aoddefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.aodDefault)
}
inline std::string* Alg::_internal_mutable_aoddefault() {
  
  return aoddefault_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_aoddefault() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.aodDefault)
  return aoddefault_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_aoddefault(std::string* aoddefault) {
  if (aoddefault != nullptr) {
    
  } else {
    
  }
  aoddefault_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aoddefault,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.aodDefault)
}
inline std::string* Alg::unsafe_arena_release_aoddefault() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.aodDefault)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return aoddefault_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_aoddefault(
    std::string* aoddefault) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (aoddefault != nullptr) {
    
  } else {
    
  }
  aoddefault_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      aoddefault, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.aodDefault)
}

// string aodOutCloud = 29;
inline void Alg::clear_aodoutcloud() {
  aodoutcloud_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::aodoutcloud() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.aodOutCloud)
  return _internal_aodoutcloud();
}
inline void Alg::set_aodoutcloud(const std::string& value) {
  _internal_set_aodoutcloud(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.aodOutCloud)
}
inline std::string* Alg::mutable_aodoutcloud() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.aodOutCloud)
  return _internal_mutable_aodoutcloud();
}
inline const std::string& Alg::_internal_aodoutcloud() const {
  return aodoutcloud_.Get();
}
inline void Alg::_internal_set_aodoutcloud(const std::string& value) {
  
  aodoutcloud_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_aodoutcloud(std::string&& value) {
  
  aodoutcloud_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.aodOutCloud)
}
inline void Alg::set_aodoutcloud(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aodoutcloud_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.aodOutCloud)
}
inline void Alg::set_aodoutcloud(const char* value,
    size_t size) {
  
  aodoutcloud_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.aodOutCloud)
}
inline std::string* Alg::_internal_mutable_aodoutcloud() {
  
  return aodoutcloud_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_aodoutcloud() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.aodOutCloud)
  return aodoutcloud_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_aodoutcloud(std::string* aodoutcloud) {
  if (aodoutcloud != nullptr) {
    
  } else {
    
  }
  aodoutcloud_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aodoutcloud,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.aodOutCloud)
}
inline std::string* Alg::unsafe_arena_release_aodoutcloud() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.aodOutCloud)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return aodoutcloud_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_aodoutcloud(
    std::string* aodoutcloud) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (aodoutcloud != nullptr) {
    
  } else {
    
  }
  aodoutcloud_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      aodoutcloud, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.aodOutCloud)
}

// float aodStartLimit = 30;
inline void Alg::clear_aodstartlimit() {
  aodstartlimit_ = 0;
}
inline float Alg::_internal_aodstartlimit() const {
  return aodstartlimit_;
}
inline float Alg::aodstartlimit() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.aodStartLimit)
  return _internal_aodstartlimit();
}
inline void Alg::_internal_set_aodstartlimit(float value) {
  
  aodstartlimit_ = value;
}
inline void Alg::set_aodstartlimit(float value) {
  _internal_set_aodstartlimit(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.aodStartLimit)
}

// float aodEndLimit = 31;
inline void Alg::clear_aodendlimit() {
  aodendlimit_ = 0;
}
inline float Alg::_internal_aodendlimit() const {
  return aodendlimit_;
}
inline float Alg::aodendlimit() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.aodEndLimit)
  return _internal_aodendlimit();
}
inline void Alg::_internal_set_aodendlimit(float value) {
  
  aodendlimit_ = value;
}
inline void Alg::set_aodendlimit(float value) {
  _internal_set_aodendlimit(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.aodEndLimit)
}

// string overlapCorrect = 32;
inline void Alg::clear_overlapcorrect() {
  overlapcorrect_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alg::overlapcorrect() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.overlapCorrect)
  return _internal_overlapcorrect();
}
inline void Alg::set_overlapcorrect(const std::string& value) {
  _internal_set_overlapcorrect(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.overlapCorrect)
}
inline std::string* Alg::mutable_overlapcorrect() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Alg.overlapCorrect)
  return _internal_mutable_overlapcorrect();
}
inline const std::string& Alg::_internal_overlapcorrect() const {
  return overlapcorrect_.Get();
}
inline void Alg::_internal_set_overlapcorrect(const std::string& value) {
  
  overlapcorrect_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alg::set_overlapcorrect(std::string&& value) {
  
  overlapcorrect_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Alg.overlapCorrect)
}
inline void Alg::set_overlapcorrect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  overlapcorrect_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Alg.overlapCorrect)
}
inline void Alg::set_overlapcorrect(const char* value,
    size_t size) {
  
  overlapcorrect_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Alg.overlapCorrect)
}
inline std::string* Alg::_internal_mutable_overlapcorrect() {
  
  return overlapcorrect_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alg::release_overlapcorrect() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Alg.overlapCorrect)
  return overlapcorrect_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alg::set_allocated_overlapcorrect(std::string* overlapcorrect) {
  if (overlapcorrect != nullptr) {
    
  } else {
    
  }
  overlapcorrect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), overlapcorrect,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Alg.overlapCorrect)
}
inline std::string* Alg::unsafe_arena_release_overlapcorrect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Alg.overlapCorrect)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return overlapcorrect_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alg::unsafe_arena_set_allocated_overlapcorrect(
    std::string* overlapcorrect) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (overlapcorrect != nullptr) {
    
  } else {
    
  }
  overlapcorrect_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      overlapcorrect, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Alg.overlapCorrect)
}

// float extinCoea = 33;
inline void Alg::clear_extincoea() {
  extincoea_ = 0;
}
inline float Alg::_internal_extincoea() const {
  return extincoea_;
}
inline float Alg::extincoea() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.extinCoea)
  return _internal_extincoea();
}
inline void Alg::_internal_set_extincoea(float value) {
  
  extincoea_ = value;
}
inline void Alg::set_extincoea(float value) {
  _internal_set_extincoea(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.extinCoea)
}

// float extinCoeb = 34;
inline void Alg::clear_extincoeb() {
  extincoeb_ = 0;
}
inline float Alg::_internal_extincoeb() const {
  return extincoeb_;
}
inline float Alg::extincoeb() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.extinCoeb)
  return _internal_extincoeb();
}
inline void Alg::_internal_set_extincoeb(float value) {
  
  extincoeb_ = value;
}
inline void Alg::set_extincoeb(float value) {
  _internal_set_extincoeb(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.extinCoeb)
}

// int32 removePoint = 35;
inline void Alg::clear_removepoint() {
  removepoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alg::_internal_removepoint() const {
  return removepoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alg::removepoint() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.removePoint)
  return _internal_removepoint();
}
inline void Alg::_internal_set_removepoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  removepoint_ = value;
}
inline void Alg::set_removepoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_removepoint(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.removePoint)
}

// float emptyDistance = 36;
inline void Alg::clear_emptydistance() {
  emptydistance_ = 0;
}
inline float Alg::_internal_emptydistance() const {
  return emptydistance_;
}
inline float Alg::emptydistance() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Alg.emptyDistance)
  return _internal_emptydistance();
}
inline void Alg::_internal_set_emptydistance(float value) {
  
  emptydistance_ = value;
}
inline void Alg::set_emptydistance(float value) {
  _internal_set_emptydistance(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Alg.emptyDistance)
}

// -------------------------------------------------------------------

// AlarmList_Alarm

// string level = 1;
inline void AlarmList_Alarm::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AlarmList_Alarm::level() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
  return _internal_level();
}
inline void AlarmList_Alarm::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
}
inline std::string* AlarmList_Alarm::mutable_level() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
  return _internal_mutable_level();
}
inline const std::string& AlarmList_Alarm::_internal_level() const {
  return level_.Get();
}
inline void AlarmList_Alarm::_internal_set_level(const std::string& value) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmList_Alarm::set_level(std::string&& value) {
  
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
}
inline void AlarmList_Alarm::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
}
inline void AlarmList_Alarm::set_level(const char* value,
    size_t size) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
}
inline std::string* AlarmList_Alarm::_internal_mutable_level() {
  
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmList_Alarm::release_level() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmList_Alarm::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
}
inline std::string* AlarmList_Alarm::unsafe_arena_release_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return level_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmList_Alarm::unsafe_arena_set_allocated_level(
    std::string* level) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (level != nullptr) {
    
  } else {
    
  }
  level_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      level, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.AlarmList.Alarm.level)
}

// string categoryName = 2;
inline void AlarmList_Alarm::clear_categoryname() {
  categoryname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AlarmList_Alarm::categoryname() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
  return _internal_categoryname();
}
inline void AlarmList_Alarm::set_categoryname(const std::string& value) {
  _internal_set_categoryname(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
}
inline std::string* AlarmList_Alarm::mutable_categoryname() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
  return _internal_mutable_categoryname();
}
inline const std::string& AlarmList_Alarm::_internal_categoryname() const {
  return categoryname_.Get();
}
inline void AlarmList_Alarm::_internal_set_categoryname(const std::string& value) {
  
  categoryname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmList_Alarm::set_categoryname(std::string&& value) {
  
  categoryname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
}
inline void AlarmList_Alarm::set_categoryname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  categoryname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
}
inline void AlarmList_Alarm::set_categoryname(const char* value,
    size_t size) {
  
  categoryname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
}
inline std::string* AlarmList_Alarm::_internal_mutable_categoryname() {
  
  return categoryname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmList_Alarm::release_categoryname() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
  return categoryname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmList_Alarm::set_allocated_categoryname(std::string* categoryname) {
  if (categoryname != nullptr) {
    
  } else {
    
  }
  categoryname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), categoryname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
}
inline std::string* AlarmList_Alarm::unsafe_arena_release_categoryname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return categoryname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmList_Alarm::unsafe_arena_set_allocated_categoryname(
    std::string* categoryname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (categoryname != nullptr) {
    
  } else {
    
  }
  categoryname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      categoryname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName)
}

// string desc = 3;
inline void AlarmList_Alarm::clear_desc() {
  desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AlarmList_Alarm::desc() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
  return _internal_desc();
}
inline void AlarmList_Alarm::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
}
inline std::string* AlarmList_Alarm::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
  return _internal_mutable_desc();
}
inline const std::string& AlarmList_Alarm::_internal_desc() const {
  return desc_.Get();
}
inline void AlarmList_Alarm::_internal_set_desc(const std::string& value) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmList_Alarm::set_desc(std::string&& value) {
  
  desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
}
inline void AlarmList_Alarm::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
}
inline void AlarmList_Alarm::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
}
inline std::string* AlarmList_Alarm::_internal_mutable_desc() {
  
  return desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmList_Alarm::release_desc() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmList_Alarm::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
}
inline std::string* AlarmList_Alarm::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return desc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmList_Alarm::unsafe_arena_set_allocated_desc(
    std::string* desc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      desc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.AlarmList.Alarm.desc)
}

// string alarmTime = 4;
inline void AlarmList_Alarm::clear_alarmtime() {
  alarmtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AlarmList_Alarm::alarmtime() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
  return _internal_alarmtime();
}
inline void AlarmList_Alarm::set_alarmtime(const std::string& value) {
  _internal_set_alarmtime(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
}
inline std::string* AlarmList_Alarm::mutable_alarmtime() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
  return _internal_mutable_alarmtime();
}
inline const std::string& AlarmList_Alarm::_internal_alarmtime() const {
  return alarmtime_.Get();
}
inline void AlarmList_Alarm::_internal_set_alarmtime(const std::string& value) {
  
  alarmtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmList_Alarm::set_alarmtime(std::string&& value) {
  
  alarmtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
}
inline void AlarmList_Alarm::set_alarmtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alarmtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
}
inline void AlarmList_Alarm::set_alarmtime(const char* value,
    size_t size) {
  
  alarmtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
}
inline std::string* AlarmList_Alarm::_internal_mutable_alarmtime() {
  
  return alarmtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmList_Alarm::release_alarmtime() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
  return alarmtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmList_Alarm::set_allocated_alarmtime(std::string* alarmtime) {
  if (alarmtime != nullptr) {
    
  } else {
    
  }
  alarmtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alarmtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
}
inline std::string* AlarmList_Alarm::unsafe_arena_release_alarmtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return alarmtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmList_Alarm::unsafe_arena_set_allocated_alarmtime(
    std::string* alarmtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (alarmtime != nullptr) {
    
  } else {
    
  }
  alarmtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      alarmtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime)
}

// -------------------------------------------------------------------

// AlarmList

// repeated .com.caspe.devicemanagement.util.AlarmList.Alarm alarm = 1;
inline int AlarmList::_internal_alarm_size() const {
  return alarm_.size();
}
inline int AlarmList::alarm_size() const {
  return _internal_alarm_size();
}
inline void AlarmList::clear_alarm() {
  alarm_.Clear();
}
inline ::com::caspe::devicemanagement::util::AlarmList_Alarm* AlarmList::mutable_alarm(int index) {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.AlarmList.alarm)
  return alarm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::AlarmList_Alarm >*
AlarmList::mutable_alarm() {
  // @@protoc_insertion_point(field_mutable_list:com.caspe.devicemanagement.util.AlarmList.alarm)
  return &alarm_;
}
inline const ::com::caspe::devicemanagement::util::AlarmList_Alarm& AlarmList::_internal_alarm(int index) const {
  return alarm_.Get(index);
}
inline const ::com::caspe::devicemanagement::util::AlarmList_Alarm& AlarmList::alarm(int index) const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.AlarmList.alarm)
  return _internal_alarm(index);
}
inline ::com::caspe::devicemanagement::util::AlarmList_Alarm* AlarmList::_internal_add_alarm() {
  return alarm_.Add();
}
inline ::com::caspe::devicemanagement::util::AlarmList_Alarm* AlarmList::add_alarm() {
  // @@protoc_insertion_point(field_add:com.caspe.devicemanagement.util.AlarmList.alarm)
  return _internal_add_alarm();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::AlarmList_Alarm >&
AlarmList::alarm() const {
  // @@protoc_insertion_point(field_list:com.caspe.devicemanagement.util.AlarmList.alarm)
  return alarm_;
}

// -------------------------------------------------------------------

// Signal_Channel

// string channelName = 1;
inline void Signal_Channel::clear_channelname() {
  channelname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Signal_Channel::channelname() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Signal.Channel.channelName)
  return _internal_channelname();
}
inline void Signal_Channel::set_channelname(const std::string& value) {
  _internal_set_channelname(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Signal.Channel.channelName)
}
inline std::string* Signal_Channel::mutable_channelname() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Signal.Channel.channelName)
  return _internal_mutable_channelname();
}
inline const std::string& Signal_Channel::_internal_channelname() const {
  return channelname_.Get();
}
inline void Signal_Channel::_internal_set_channelname(const std::string& value) {
  
  channelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Signal_Channel::set_channelname(std::string&& value) {
  
  channelname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.Signal.Channel.channelName)
}
inline void Signal_Channel::set_channelname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.Signal.Channel.channelName)
}
inline void Signal_Channel::set_channelname(const char* value,
    size_t size) {
  
  channelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.Signal.Channel.channelName)
}
inline std::string* Signal_Channel::_internal_mutable_channelname() {
  
  return channelname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Signal_Channel::release_channelname() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.Signal.Channel.channelName)
  return channelname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signal_Channel::set_allocated_channelname(std::string* channelname) {
  if (channelname != nullptr) {
    
  } else {
    
  }
  channelname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.Signal.Channel.channelName)
}
inline std::string* Signal_Channel::unsafe_arena_release_channelname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.Signal.Channel.channelName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channelname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Signal_Channel::unsafe_arena_set_allocated_channelname(
    std::string* channelname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channelname != nullptr) {
    
  } else {
    
  }
  channelname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channelname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.Signal.Channel.channelName)
}

// int32 pointCount = 2;
inline void Signal_Channel::clear_pointcount() {
  pointcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Signal_Channel::_internal_pointcount() const {
  return pointcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Signal_Channel::pointcount() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Signal.Channel.pointCount)
  return _internal_pointcount();
}
inline void Signal_Channel::_internal_set_pointcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pointcount_ = value;
}
inline void Signal_Channel::set_pointcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pointcount(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Signal.Channel.pointCount)
}

// float spaceResolution = 3;
inline void Signal_Channel::clear_spaceresolution() {
  spaceresolution_ = 0;
}
inline float Signal_Channel::_internal_spaceresolution() const {
  return spaceresolution_;
}
inline float Signal_Channel::spaceresolution() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Signal.Channel.spaceResolution)
  return _internal_spaceresolution();
}
inline void Signal_Channel::_internal_set_spaceresolution(float value) {
  
  spaceresolution_ = value;
}
inline void Signal_Channel::set_spaceresolution(float value) {
  _internal_set_spaceresolution(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Signal.Channel.spaceResolution)
}

// int32 waveLength = 4;
inline void Signal_Channel::clear_wavelength() {
  wavelength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Signal_Channel::_internal_wavelength() const {
  return wavelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Signal_Channel::wavelength() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Signal.Channel.waveLength)
  return _internal_wavelength();
}
inline void Signal_Channel::_internal_set_wavelength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wavelength_ = value;
}
inline void Signal_Channel::set_wavelength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wavelength(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Signal.Channel.waveLength)
}

// int32 adcBit = 5;
inline void Signal_Channel::clear_adcbit() {
  adcbit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Signal_Channel::_internal_adcbit() const {
  return adcbit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Signal_Channel::adcbit() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Signal.Channel.adcBit)
  return _internal_adcbit();
}
inline void Signal_Channel::_internal_set_adcbit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  adcbit_ = value;
}
inline void Signal_Channel::set_adcbit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adcbit(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Signal.Channel.adcBit)
}

// int32 pulseCount = 6;
inline void Signal_Channel::clear_pulsecount() {
  pulsecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Signal_Channel::_internal_pulsecount() const {
  return pulsecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Signal_Channel::pulsecount() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Signal.Channel.pulseCount)
  return _internal_pulsecount();
}
inline void Signal_Channel::_internal_set_pulsecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pulsecount_ = value;
}
inline void Signal_Channel::set_pulsecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pulsecount(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Signal.Channel.pulseCount)
}

// repeated int64 data = 7;
inline int Signal_Channel::_internal_data_size() const {
  return data_.size();
}
inline int Signal_Channel::data_size() const {
  return _internal_data_size();
}
inline void Signal_Channel::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Signal_Channel::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Signal_Channel::data(int index) const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Signal.Channel.data)
  return _internal_data(index);
}
inline void Signal_Channel::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.Signal.Channel.data)
}
inline void Signal_Channel::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  data_.Add(value);
}
inline void Signal_Channel::add_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:com.caspe.devicemanagement.util.Signal.Channel.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Signal_Channel::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Signal_Channel::data() const {
  // @@protoc_insertion_point(field_list:com.caspe.devicemanagement.util.Signal.Channel.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Signal_Channel::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Signal_Channel::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.caspe.devicemanagement.util.Signal.Channel.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// Signal

// repeated .com.caspe.devicemanagement.util.Signal.Channel channels = 1;
inline int Signal::_internal_channels_size() const {
  return channels_.size();
}
inline int Signal::channels_size() const {
  return _internal_channels_size();
}
inline void Signal::clear_channels() {
  channels_.Clear();
}
inline ::com::caspe::devicemanagement::util::Signal_Channel* Signal::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.Signal.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Signal_Channel >*
Signal::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:com.caspe.devicemanagement.util.Signal.channels)
  return &channels_;
}
inline const ::com::caspe::devicemanagement::util::Signal_Channel& Signal::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::com::caspe::devicemanagement::util::Signal_Channel& Signal::channels(int index) const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.Signal.channels)
  return _internal_channels(index);
}
inline ::com::caspe::devicemanagement::util::Signal_Channel* Signal::_internal_add_channels() {
  return channels_.Add();
}
inline ::com::caspe::devicemanagement::util::Signal_Channel* Signal::add_channels() {
  // @@protoc_insertion_point(field_add:com.caspe.devicemanagement.util.Signal.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::Signal_Channel >&
Signal::channels() const {
  // @@protoc_insertion_point(field_list:com.caspe.devicemanagement.util.Signal.channels)
  return channels_;
}

// -------------------------------------------------------------------

// SysParam_DefogTiming

// string start = 1;
inline void SysParam_DefogTiming::clear_start() {
  start_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam_DefogTiming::start() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
  return _internal_start();
}
inline void SysParam_DefogTiming::set_start(const std::string& value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
}
inline std::string* SysParam_DefogTiming::mutable_start() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
  return _internal_mutable_start();
}
inline const std::string& SysParam_DefogTiming::_internal_start() const {
  return start_.Get();
}
inline void SysParam_DefogTiming::_internal_set_start(const std::string& value) {
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam_DefogTiming::set_start(std::string&& value) {
  
  start_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
}
inline void SysParam_DefogTiming::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
}
inline void SysParam_DefogTiming::set_start(const char* value,
    size_t size) {
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
}
inline std::string* SysParam_DefogTiming::_internal_mutable_start() {
  
  return start_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam_DefogTiming::release_start() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam_DefogTiming::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
}
inline std::string* SysParam_DefogTiming::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam_DefogTiming::unsafe_arena_set_allocated_start(
    std::string* start) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start != nullptr) {
    
  } else {
    
  }
  start_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.DefogTiming.start)
}

// string end = 2;
inline void SysParam_DefogTiming::clear_end() {
  end_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam_DefogTiming::end() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
  return _internal_end();
}
inline void SysParam_DefogTiming::set_end(const std::string& value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
}
inline std::string* SysParam_DefogTiming::mutable_end() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
  return _internal_mutable_end();
}
inline const std::string& SysParam_DefogTiming::_internal_end() const {
  return end_.Get();
}
inline void SysParam_DefogTiming::_internal_set_end(const std::string& value) {
  
  end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam_DefogTiming::set_end(std::string&& value) {
  
  end_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
}
inline void SysParam_DefogTiming::set_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
}
inline void SysParam_DefogTiming::set_end(const char* value,
    size_t size) {
  
  end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
}
inline std::string* SysParam_DefogTiming::_internal_mutable_end() {
  
  return end_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam_DefogTiming::release_end() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
  return end_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam_DefogTiming::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
}
inline std::string* SysParam_DefogTiming::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam_DefogTiming::unsafe_arena_set_allocated_end(
    std::string* end) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end != nullptr) {
    
  } else {
    
  }
  end_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.DefogTiming.end)
}

// -------------------------------------------------------------------

// SysParam_HeaterTiming

// string start = 1;
inline void SysParam_HeaterTiming::clear_start() {
  start_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam_HeaterTiming::start() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
  return _internal_start();
}
inline void SysParam_HeaterTiming::set_start(const std::string& value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
}
inline std::string* SysParam_HeaterTiming::mutable_start() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
  return _internal_mutable_start();
}
inline const std::string& SysParam_HeaterTiming::_internal_start() const {
  return start_.Get();
}
inline void SysParam_HeaterTiming::_internal_set_start(const std::string& value) {
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam_HeaterTiming::set_start(std::string&& value) {
  
  start_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
}
inline void SysParam_HeaterTiming::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
}
inline void SysParam_HeaterTiming::set_start(const char* value,
    size_t size) {
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
}
inline std::string* SysParam_HeaterTiming::_internal_mutable_start() {
  
  return start_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam_HeaterTiming::release_start() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam_HeaterTiming::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
}
inline std::string* SysParam_HeaterTiming::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam_HeaterTiming::unsafe_arena_set_allocated_start(
    std::string* start) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start != nullptr) {
    
  } else {
    
  }
  start_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.HeaterTiming.start)
}

// string end = 2;
inline void SysParam_HeaterTiming::clear_end() {
  end_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam_HeaterTiming::end() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
  return _internal_end();
}
inline void SysParam_HeaterTiming::set_end(const std::string& value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
}
inline std::string* SysParam_HeaterTiming::mutable_end() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
  return _internal_mutable_end();
}
inline const std::string& SysParam_HeaterTiming::_internal_end() const {
  return end_.Get();
}
inline void SysParam_HeaterTiming::_internal_set_end(const std::string& value) {
  
  end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam_HeaterTiming::set_end(std::string&& value) {
  
  end_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
}
inline void SysParam_HeaterTiming::set_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
}
inline void SysParam_HeaterTiming::set_end(const char* value,
    size_t size) {
  
  end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
}
inline std::string* SysParam_HeaterTiming::_internal_mutable_end() {
  
  return end_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam_HeaterTiming::release_end() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
  return end_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam_HeaterTiming::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
}
inline std::string* SysParam_HeaterTiming::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam_HeaterTiming::unsafe_arena_set_allocated_end(
    std::string* end) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end != nullptr) {
    
  } else {
    
  }
  end_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.HeaterTiming.end)
}

// -------------------------------------------------------------------

// SysParam

// float sysPointDist = 1;
inline void SysParam::clear_syspointdist() {
  syspointdist_ = 0;
}
inline float SysParam::_internal_syspointdist() const {
  return syspointdist_;
}
inline float SysParam::syspointdist() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.sysPointDist)
  return _internal_syspointdist();
}
inline void SysParam::_internal_set_syspointdist(float value) {
  
  syspointdist_ = value;
}
inline void SysParam::set_syspointdist(float value) {
  _internal_set_syspointdist(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.sysPointDist)
}

// int32 sysPulseCount = 2;
inline void SysParam::clear_syspulsecount() {
  syspulsecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SysParam::_internal_syspulsecount() const {
  return syspulsecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SysParam::syspulsecount() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.sysPulseCount)
  return _internal_syspulsecount();
}
inline void SysParam::_internal_set_syspulsecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  syspulsecount_ = value;
}
inline void SysParam::set_syspulsecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_syspulsecount(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.sysPulseCount)
}

// bool enableGal = 3;
inline void SysParam::clear_enablegal() {
  enablegal_ = false;
}
inline bool SysParam::_internal_enablegal() const {
  return enablegal_;
}
inline bool SysParam::enablegal() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableGal)
  return _internal_enablegal();
}
inline void SysParam::_internal_set_enablegal(bool value) {
  
  enablegal_ = value;
}
inline void SysParam::set_enablegal(bool value) {
  _internal_set_enablegal(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableGal)
}

// bool enableUps = 4;
inline void SysParam::clear_enableups() {
  enableups_ = false;
}
inline bool SysParam::_internal_enableups() const {
  return enableups_;
}
inline bool SysParam::enableups() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableUps)
  return _internal_enableups();
}
inline void SysParam::_internal_set_enableups(bool value) {
  
  enableups_ = value;
}
inline void SysParam::set_enableups(bool value) {
  _internal_set_enableups(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableUps)
}

// bool enableCompass = 5;
inline void SysParam::clear_enablecompass() {
  enablecompass_ = false;
}
inline bool SysParam::_internal_enablecompass() const {
  return enablecompass_;
}
inline bool SysParam::enablecompass() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableCompass)
  return _internal_enablecompass();
}
inline void SysParam::_internal_set_enablecompass(bool value) {
  
  enablecompass_ = value;
}
inline void SysParam::set_enablecompass(bool value) {
  _internal_set_enablecompass(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableCompass)
}

// bool enableGps = 6;
inline void SysParam::clear_enablegps() {
  enablegps_ = false;
}
inline bool SysParam::_internal_enablegps() const {
  return enablegps_;
}
inline bool SysParam::enablegps() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableGps)
  return _internal_enablegps();
}
inline void SysParam::_internal_set_enablegps(bool value) {
  
  enablegps_ = value;
}
inline void SysParam::set_enablegps(bool value) {
  _internal_set_enablegps(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableGps)
}

// bool enableCamera = 7;
inline void SysParam::clear_enablecamera() {
  enablecamera_ = false;
}
inline bool SysParam::_internal_enablecamera() const {
  return enablecamera_;
}
inline bool SysParam::enablecamera() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableCamera)
  return _internal_enablecamera();
}
inline void SysParam::_internal_set_enablecamera(bool value) {
  
  enablecamera_ = value;
}
inline void SysParam::set_enablecamera(bool value) {
  _internal_set_enablecamera(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableCamera)
}

// bool enableYunCamera = 8;
inline void SysParam::clear_enableyuncamera() {
  enableyuncamera_ = false;
}
inline bool SysParam::_internal_enableyuncamera() const {
  return enableyuncamera_;
}
inline bool SysParam::enableyuncamera() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableYunCamera)
  return _internal_enableyuncamera();
}
inline void SysParam::_internal_set_enableyuncamera(bool value) {
  
  enableyuncamera_ = value;
}
inline void SysParam::set_enableyuncamera(bool value) {
  _internal_set_enableyuncamera(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableYunCamera)
}

// bool enableHeater = 9;
inline void SysParam::clear_enableheater() {
  enableheater_ = false;
}
inline bool SysParam::_internal_enableheater() const {
  return enableheater_;
}
inline bool SysParam::enableheater() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableHeater)
  return _internal_enableheater();
}
inline void SysParam::_internal_set_enableheater(bool value) {
  
  enableheater_ = value;
}
inline void SysParam::set_enableheater(bool value) {
  _internal_set_enableheater(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableHeater)
}

// bool enableDefog = 10;
inline void SysParam::clear_enabledefog() {
  enabledefog_ = false;
}
inline bool SysParam::_internal_enabledefog() const {
  return enabledefog_;
}
inline bool SysParam::enabledefog() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableDefog)
  return _internal_enabledefog();
}
inline void SysParam::_internal_set_enabledefog(bool value) {
  
  enabledefog_ = value;
}
inline void SysParam::set_enabledefog(bool value) {
  _internal_set_enabledefog(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableDefog)
}

// bool enableVirtualGps = 11;
inline void SysParam::clear_enablevirtualgps() {
  enablevirtualgps_ = false;
}
inline bool SysParam::_internal_enablevirtualgps() const {
  return enablevirtualgps_;
}
inline bool SysParam::enablevirtualgps() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.enableVirtualGps)
  return _internal_enablevirtualgps();
}
inline void SysParam::_internal_set_enablevirtualgps(bool value) {
  
  enablevirtualgps_ = value;
}
inline void SysParam::set_enablevirtualgps(bool value) {
  _internal_set_enablevirtualgps(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.enableVirtualGps)
}

// bool yunParamReset = 12;
inline void SysParam::clear_yunparamreset() {
  yunparamreset_ = false;
}
inline bool SysParam::_internal_yunparamreset() const {
  return yunparamreset_;
}
inline bool SysParam::yunparamreset() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.yunParamReset)
  return _internal_yunparamreset();
}
inline void SysParam::_internal_set_yunparamreset(bool value) {
  
  yunparamreset_ = value;
}
inline void SysParam::set_yunparamreset(bool value) {
  _internal_set_yunparamreset(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.yunParamReset)
}

// string channel1 = 13;
inline void SysParam::clear_channel1() {
  channel1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::channel1() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.channel1)
  return _internal_channel1();
}
inline void SysParam::set_channel1(const std::string& value) {
  _internal_set_channel1(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.channel1)
}
inline std::string* SysParam::mutable_channel1() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.channel1)
  return _internal_mutable_channel1();
}
inline const std::string& SysParam::_internal_channel1() const {
  return channel1_.Get();
}
inline void SysParam::_internal_set_channel1(const std::string& value) {
  
  channel1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_channel1(std::string&& value) {
  
  channel1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.channel1)
}
inline void SysParam::set_channel1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.channel1)
}
inline void SysParam::set_channel1(const char* value,
    size_t size) {
  
  channel1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.channel1)
}
inline std::string* SysParam::_internal_mutable_channel1() {
  
  return channel1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_channel1() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.channel1)
  return channel1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_channel1(std::string* channel1) {
  if (channel1 != nullptr) {
    
  } else {
    
  }
  channel1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.channel1)
}
inline std::string* SysParam::unsafe_arena_release_channel1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.channel1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_channel1(
    std::string* channel1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel1 != nullptr) {
    
  } else {
    
  }
  channel1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.channel1)
}

// string channel2 = 14;
inline void SysParam::clear_channel2() {
  channel2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::channel2() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.channel2)
  return _internal_channel2();
}
inline void SysParam::set_channel2(const std::string& value) {
  _internal_set_channel2(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.channel2)
}
inline std::string* SysParam::mutable_channel2() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.channel2)
  return _internal_mutable_channel2();
}
inline const std::string& SysParam::_internal_channel2() const {
  return channel2_.Get();
}
inline void SysParam::_internal_set_channel2(const std::string& value) {
  
  channel2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_channel2(std::string&& value) {
  
  channel2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.channel2)
}
inline void SysParam::set_channel2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.channel2)
}
inline void SysParam::set_channel2(const char* value,
    size_t size) {
  
  channel2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.channel2)
}
inline std::string* SysParam::_internal_mutable_channel2() {
  
  return channel2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_channel2() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.channel2)
  return channel2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_channel2(std::string* channel2) {
  if (channel2 != nullptr) {
    
  } else {
    
  }
  channel2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.channel2)
}
inline std::string* SysParam::unsafe_arena_release_channel2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.channel2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_channel2(
    std::string* channel2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel2 != nullptr) {
    
  } else {
    
  }
  channel2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.channel2)
}

// string channel3 = 15;
inline void SysParam::clear_channel3() {
  channel3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::channel3() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.channel3)
  return _internal_channel3();
}
inline void SysParam::set_channel3(const std::string& value) {
  _internal_set_channel3(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.channel3)
}
inline std::string* SysParam::mutable_channel3() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.channel3)
  return _internal_mutable_channel3();
}
inline const std::string& SysParam::_internal_channel3() const {
  return channel3_.Get();
}
inline void SysParam::_internal_set_channel3(const std::string& value) {
  
  channel3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_channel3(std::string&& value) {
  
  channel3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.channel3)
}
inline void SysParam::set_channel3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.channel3)
}
inline void SysParam::set_channel3(const char* value,
    size_t size) {
  
  channel3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.channel3)
}
inline std::string* SysParam::_internal_mutable_channel3() {
  
  return channel3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_channel3() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.channel3)
  return channel3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_channel3(std::string* channel3) {
  if (channel3 != nullptr) {
    
  } else {
    
  }
  channel3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel3,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.channel3)
}
inline std::string* SysParam::unsafe_arena_release_channel3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.channel3)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_channel3(
    std::string* channel3) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel3 != nullptr) {
    
  } else {
    
  }
  channel3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel3, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.channel3)
}

// string channel4 = 16;
inline void SysParam::clear_channel4() {
  channel4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::channel4() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.channel4)
  return _internal_channel4();
}
inline void SysParam::set_channel4(const std::string& value) {
  _internal_set_channel4(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.channel4)
}
inline std::string* SysParam::mutable_channel4() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.channel4)
  return _internal_mutable_channel4();
}
inline const std::string& SysParam::_internal_channel4() const {
  return channel4_.Get();
}
inline void SysParam::_internal_set_channel4(const std::string& value) {
  
  channel4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_channel4(std::string&& value) {
  
  channel4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.channel4)
}
inline void SysParam::set_channel4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.channel4)
}
inline void SysParam::set_channel4(const char* value,
    size_t size) {
  
  channel4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.channel4)
}
inline std::string* SysParam::_internal_mutable_channel4() {
  
  return channel4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_channel4() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.channel4)
  return channel4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_channel4(std::string* channel4) {
  if (channel4 != nullptr) {
    
  } else {
    
  }
  channel4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.channel4)
}
inline std::string* SysParam::unsafe_arena_release_channel4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.channel4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_channel4(
    std::string* channel4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel4 != nullptr) {
    
  } else {
    
  }
  channel4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.channel4)
}

// string channel5 = 17;
inline void SysParam::clear_channel5() {
  channel5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::channel5() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.channel5)
  return _internal_channel5();
}
inline void SysParam::set_channel5(const std::string& value) {
  _internal_set_channel5(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.channel5)
}
inline std::string* SysParam::mutable_channel5() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.channel5)
  return _internal_mutable_channel5();
}
inline const std::string& SysParam::_internal_channel5() const {
  return channel5_.Get();
}
inline void SysParam::_internal_set_channel5(const std::string& value) {
  
  channel5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_channel5(std::string&& value) {
  
  channel5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.channel5)
}
inline void SysParam::set_channel5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.channel5)
}
inline void SysParam::set_channel5(const char* value,
    size_t size) {
  
  channel5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.channel5)
}
inline std::string* SysParam::_internal_mutable_channel5() {
  
  return channel5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_channel5() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.channel5)
  return channel5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_channel5(std::string* channel5) {
  if (channel5 != nullptr) {
    
  } else {
    
  }
  channel5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.channel5)
}
inline std::string* SysParam::unsafe_arena_release_channel5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.channel5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_channel5(
    std::string* channel5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel5 != nullptr) {
    
  } else {
    
  }
  channel5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.channel5)
}

// string channel6 = 18;
inline void SysParam::clear_channel6() {
  channel6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::channel6() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.channel6)
  return _internal_channel6();
}
inline void SysParam::set_channel6(const std::string& value) {
  _internal_set_channel6(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.channel6)
}
inline std::string* SysParam::mutable_channel6() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.channel6)
  return _internal_mutable_channel6();
}
inline const std::string& SysParam::_internal_channel6() const {
  return channel6_.Get();
}
inline void SysParam::_internal_set_channel6(const std::string& value) {
  
  channel6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_channel6(std::string&& value) {
  
  channel6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.channel6)
}
inline void SysParam::set_channel6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.channel6)
}
inline void SysParam::set_channel6(const char* value,
    size_t size) {
  
  channel6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.channel6)
}
inline std::string* SysParam::_internal_mutable_channel6() {
  
  return channel6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_channel6() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.channel6)
  return channel6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_channel6(std::string* channel6) {
  if (channel6 != nullptr) {
    
  } else {
    
  }
  channel6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.channel6)
}
inline std::string* SysParam::unsafe_arena_release_channel6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.channel6)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_channel6(
    std::string* channel6) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel6 != nullptr) {
    
  } else {
    
  }
  channel6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel6, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.channel6)
}

// string channel7 = 19;
inline void SysParam::clear_channel7() {
  channel7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::channel7() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.channel7)
  return _internal_channel7();
}
inline void SysParam::set_channel7(const std::string& value) {
  _internal_set_channel7(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.channel7)
}
inline std::string* SysParam::mutable_channel7() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.channel7)
  return _internal_mutable_channel7();
}
inline const std::string& SysParam::_internal_channel7() const {
  return channel7_.Get();
}
inline void SysParam::_internal_set_channel7(const std::string& value) {
  
  channel7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_channel7(std::string&& value) {
  
  channel7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.channel7)
}
inline void SysParam::set_channel7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.channel7)
}
inline void SysParam::set_channel7(const char* value,
    size_t size) {
  
  channel7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.channel7)
}
inline std::string* SysParam::_internal_mutable_channel7() {
  
  return channel7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_channel7() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.channel7)
  return channel7_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_channel7(std::string* channel7) {
  if (channel7 != nullptr) {
    
  } else {
    
  }
  channel7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel7,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.channel7)
}
inline std::string* SysParam::unsafe_arena_release_channel7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.channel7)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_channel7(
    std::string* channel7) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel7 != nullptr) {
    
  } else {
    
  }
  channel7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel7, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.channel7)
}

// string channel8 = 20;
inline void SysParam::clear_channel8() {
  channel8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::channel8() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.channel8)
  return _internal_channel8();
}
inline void SysParam::set_channel8(const std::string& value) {
  _internal_set_channel8(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.channel8)
}
inline std::string* SysParam::mutable_channel8() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.channel8)
  return _internal_mutable_channel8();
}
inline const std::string& SysParam::_internal_channel8() const {
  return channel8_.Get();
}
inline void SysParam::_internal_set_channel8(const std::string& value) {
  
  channel8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_channel8(std::string&& value) {
  
  channel8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.channel8)
}
inline void SysParam::set_channel8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.channel8)
}
inline void SysParam::set_channel8(const char* value,
    size_t size) {
  
  channel8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.channel8)
}
inline std::string* SysParam::_internal_mutable_channel8() {
  
  return channel8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_channel8() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.channel8)
  return channel8_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_channel8(std::string* channel8) {
  if (channel8 != nullptr) {
    
  } else {
    
  }
  channel8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel8,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.channel8)
}
inline std::string* SysParam::unsafe_arena_release_channel8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.channel8)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_channel8(
    std::string* channel8) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel8 != nullptr) {
    
  } else {
    
  }
  channel8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel8, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.channel8)
}

// int32 laserHertz = 21;
inline void SysParam::clear_laserhertz() {
  laserhertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SysParam::_internal_laserhertz() const {
  return laserhertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SysParam::laserhertz() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.laserHertz)
  return _internal_laserhertz();
}
inline void SysParam::_internal_set_laserhertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  laserhertz_ = value;
}
inline void SysParam::set_laserhertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_laserhertz(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.laserHertz)
}

// float laserAmpere = 22;
inline void SysParam::clear_laserampere() {
  laserampere_ = 0;
}
inline float SysParam::_internal_laserampere() const {
  return laserampere_;
}
inline float SysParam::laserampere() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.laserAmpere)
  return _internal_laserampere();
}
inline void SysParam::_internal_set_laserampere(float value) {
  
  laserampere_ = value;
}
inline void SysParam::set_laserampere(float value) {
  _internal_set_laserampere(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.laserAmpere)
}

// int32 galSpeed = 23;
inline void SysParam::clear_galspeed() {
  galspeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SysParam::_internal_galspeed() const {
  return galspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SysParam::galspeed() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.galSpeed)
  return _internal_galspeed();
}
inline void SysParam::_internal_set_galspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  galspeed_ = value;
}
inline void SysParam::set_galspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_galspeed(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.galSpeed)
}

// string defogMode = 24;
inline void SysParam::clear_defogmode() {
  defogmode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::defogmode() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.defogMode)
  return _internal_defogmode();
}
inline void SysParam::set_defogmode(const std::string& value) {
  _internal_set_defogmode(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.defogMode)
}
inline std::string* SysParam::mutable_defogmode() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.defogMode)
  return _internal_mutable_defogmode();
}
inline const std::string& SysParam::_internal_defogmode() const {
  return defogmode_.Get();
}
inline void SysParam::_internal_set_defogmode(const std::string& value) {
  
  defogmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_defogmode(std::string&& value) {
  
  defogmode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.defogMode)
}
inline void SysParam::set_defogmode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  defogmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.defogMode)
}
inline void SysParam::set_defogmode(const char* value,
    size_t size) {
  
  defogmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.defogMode)
}
inline std::string* SysParam::_internal_mutable_defogmode() {
  
  return defogmode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_defogmode() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.defogMode)
  return defogmode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_defogmode(std::string* defogmode) {
  if (defogmode != nullptr) {
    
  } else {
    
  }
  defogmode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), defogmode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.defogMode)
}
inline std::string* SysParam::unsafe_arena_release_defogmode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.defogMode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return defogmode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_defogmode(
    std::string* defogmode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (defogmode != nullptr) {
    
  } else {
    
  }
  defogmode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      defogmode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.defogMode)
}

// string defogAutoCondition = 25;
inline void SysParam::clear_defogautocondition() {
  defogautocondition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::defogautocondition() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
  return _internal_defogautocondition();
}
inline void SysParam::set_defogautocondition(const std::string& value) {
  _internal_set_defogautocondition(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
}
inline std::string* SysParam::mutable_defogautocondition() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
  return _internal_mutable_defogautocondition();
}
inline const std::string& SysParam::_internal_defogautocondition() const {
  return defogautocondition_.Get();
}
inline void SysParam::_internal_set_defogautocondition(const std::string& value) {
  
  defogautocondition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_defogautocondition(std::string&& value) {
  
  defogautocondition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
}
inline void SysParam::set_defogautocondition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  defogautocondition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
}
inline void SysParam::set_defogautocondition(const char* value,
    size_t size) {
  
  defogautocondition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
}
inline std::string* SysParam::_internal_mutable_defogautocondition() {
  
  return defogautocondition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_defogautocondition() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
  return defogautocondition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_defogautocondition(std::string* defogautocondition) {
  if (defogautocondition != nullptr) {
    
  } else {
    
  }
  defogautocondition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), defogautocondition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
}
inline std::string* SysParam::unsafe_arena_release_defogautocondition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return defogautocondition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_defogautocondition(
    std::string* defogautocondition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (defogautocondition != nullptr) {
    
  } else {
    
  }
  defogautocondition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      defogautocondition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.defogAutoCondition)
}

// float defogAutoValue = 26;
inline void SysParam::clear_defogautovalue() {
  defogautovalue_ = 0;
}
inline float SysParam::_internal_defogautovalue() const {
  return defogautovalue_;
}
inline float SysParam::defogautovalue() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.defogAutoValue)
  return _internal_defogautovalue();
}
inline void SysParam::_internal_set_defogautovalue(float value) {
  
  defogautovalue_ = value;
}
inline void SysParam::set_defogautovalue(float value) {
  _internal_set_defogautovalue(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.defogAutoValue)
}

// repeated .com.caspe.devicemanagement.util.SysParam.DefogTiming defogTiming = 27;
inline int SysParam::_internal_defogtiming_size() const {
  return defogtiming_.size();
}
inline int SysParam::defogtiming_size() const {
  return _internal_defogtiming_size();
}
inline void SysParam::clear_defogtiming() {
  defogtiming_.Clear();
}
inline ::com::caspe::devicemanagement::util::SysParam_DefogTiming* SysParam::mutable_defogtiming(int index) {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.defogTiming)
  return defogtiming_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_DefogTiming >*
SysParam::mutable_defogtiming() {
  // @@protoc_insertion_point(field_mutable_list:com.caspe.devicemanagement.util.SysParam.defogTiming)
  return &defogtiming_;
}
inline const ::com::caspe::devicemanagement::util::SysParam_DefogTiming& SysParam::_internal_defogtiming(int index) const {
  return defogtiming_.Get(index);
}
inline const ::com::caspe::devicemanagement::util::SysParam_DefogTiming& SysParam::defogtiming(int index) const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.defogTiming)
  return _internal_defogtiming(index);
}
inline ::com::caspe::devicemanagement::util::SysParam_DefogTiming* SysParam::_internal_add_defogtiming() {
  return defogtiming_.Add();
}
inline ::com::caspe::devicemanagement::util::SysParam_DefogTiming* SysParam::add_defogtiming() {
  // @@protoc_insertion_point(field_add:com.caspe.devicemanagement.util.SysParam.defogTiming)
  return _internal_add_defogtiming();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_DefogTiming >&
SysParam::defogtiming() const {
  // @@protoc_insertion_point(field_list:com.caspe.devicemanagement.util.SysParam.defogTiming)
  return defogtiming_;
}

// string heaterMode = 28;
inline void SysParam::clear_heatermode() {
  heatermode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SysParam::heatermode() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.heaterMode)
  return _internal_heatermode();
}
inline void SysParam::set_heatermode(const std::string& value) {
  _internal_set_heatermode(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.heaterMode)
}
inline std::string* SysParam::mutable_heatermode() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.heaterMode)
  return _internal_mutable_heatermode();
}
inline const std::string& SysParam::_internal_heatermode() const {
  return heatermode_.Get();
}
inline void SysParam::_internal_set_heatermode(const std::string& value) {
  
  heatermode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SysParam::set_heatermode(std::string&& value) {
  
  heatermode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SysParam.heaterMode)
}
inline void SysParam::set_heatermode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  heatermode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SysParam.heaterMode)
}
inline void SysParam::set_heatermode(const char* value,
    size_t size) {
  
  heatermode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SysParam.heaterMode)
}
inline std::string* SysParam::_internal_mutable_heatermode() {
  
  return heatermode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SysParam::release_heatermode() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SysParam.heaterMode)
  return heatermode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SysParam::set_allocated_heatermode(std::string* heatermode) {
  if (heatermode != nullptr) {
    
  } else {
    
  }
  heatermode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heatermode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SysParam.heaterMode)
}
inline std::string* SysParam::unsafe_arena_release_heatermode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SysParam.heaterMode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return heatermode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SysParam::unsafe_arena_set_allocated_heatermode(
    std::string* heatermode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (heatermode != nullptr) {
    
  } else {
    
  }
  heatermode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      heatermode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SysParam.heaterMode)
}

// repeated .com.caspe.devicemanagement.util.SysParam.HeaterTiming heaterTiming = 29;
inline int SysParam::_internal_heatertiming_size() const {
  return heatertiming_.size();
}
inline int SysParam::heatertiming_size() const {
  return _internal_heatertiming_size();
}
inline void SysParam::clear_heatertiming() {
  heatertiming_.Clear();
}
inline ::com::caspe::devicemanagement::util::SysParam_HeaterTiming* SysParam::mutable_heatertiming(int index) {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SysParam.heaterTiming)
  return heatertiming_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_HeaterTiming >*
SysParam::mutable_heatertiming() {
  // @@protoc_insertion_point(field_mutable_list:com.caspe.devicemanagement.util.SysParam.heaterTiming)
  return &heatertiming_;
}
inline const ::com::caspe::devicemanagement::util::SysParam_HeaterTiming& SysParam::_internal_heatertiming(int index) const {
  return heatertiming_.Get(index);
}
inline const ::com::caspe::devicemanagement::util::SysParam_HeaterTiming& SysParam::heatertiming(int index) const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.heaterTiming)
  return _internal_heatertiming(index);
}
inline ::com::caspe::devicemanagement::util::SysParam_HeaterTiming* SysParam::_internal_add_heatertiming() {
  return heatertiming_.Add();
}
inline ::com::caspe::devicemanagement::util::SysParam_HeaterTiming* SysParam::add_heatertiming() {
  // @@protoc_insertion_point(field_add:com.caspe.devicemanagement.util.SysParam.heaterTiming)
  return _internal_add_heatertiming();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::caspe::devicemanagement::util::SysParam_HeaterTiming >&
SysParam::heatertiming() const {
  // @@protoc_insertion_point(field_list:com.caspe.devicemanagement.util.SysParam.heaterTiming)
  return heatertiming_;
}

// float virtualGpsLon = 30;
inline void SysParam::clear_virtualgpslon() {
  virtualgpslon_ = 0;
}
inline float SysParam::_internal_virtualgpslon() const {
  return virtualgpslon_;
}
inline float SysParam::virtualgpslon() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.virtualGpsLon)
  return _internal_virtualgpslon();
}
inline void SysParam::_internal_set_virtualgpslon(float value) {
  
  virtualgpslon_ = value;
}
inline void SysParam::set_virtualgpslon(float value) {
  _internal_set_virtualgpslon(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.virtualGpsLon)
}

// float virtualGpsLat = 31;
inline void SysParam::clear_virtualgpslat() {
  virtualgpslat_ = 0;
}
inline float SysParam::_internal_virtualgpslat() const {
  return virtualgpslat_;
}
inline float SysParam::virtualgpslat() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.virtualGpsLat)
  return _internal_virtualgpslat();
}
inline void SysParam::_internal_set_virtualgpslat(float value) {
  
  virtualgpslat_ = value;
}
inline void SysParam::set_virtualgpslat(float value) {
  _internal_set_virtualgpslat(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.virtualGpsLat)
}

// bool defogHeat1 = 32;
inline void SysParam::clear_defogheat1() {
  defogheat1_ = false;
}
inline bool SysParam::_internal_defogheat1() const {
  return defogheat1_;
}
inline bool SysParam::defogheat1() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.defogHeat1)
  return _internal_defogheat1();
}
inline void SysParam::_internal_set_defogheat1(bool value) {
  
  defogheat1_ = value;
}
inline void SysParam::set_defogheat1(bool value) {
  _internal_set_defogheat1(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.defogHeat1)
}

// bool defogHeat2 = 33;
inline void SysParam::clear_defogheat2() {
  defogheat2_ = false;
}
inline bool SysParam::_internal_defogheat2() const {
  return defogheat2_;
}
inline bool SysParam::defogheat2() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.defogHeat2)
  return _internal_defogheat2();
}
inline void SysParam::_internal_set_defogheat2(bool value) {
  
  defogheat2_ = value;
}
inline void SysParam::set_defogheat2(bool value) {
  _internal_set_defogheat2(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.defogHeat2)
}

// bool defogHeat3 = 34;
inline void SysParam::clear_defogheat3() {
  defogheat3_ = false;
}
inline bool SysParam::_internal_defogheat3() const {
  return defogheat3_;
}
inline bool SysParam::defogheat3() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SysParam.defogHeat3)
  return _internal_defogheat3();
}
inline void SysParam::_internal_set_defogheat3(bool value) {
  
  defogheat3_ = value;
}
inline void SysParam::set_defogheat3(bool value) {
  _internal_set_defogheat3(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SysParam.defogHeat3)
}

// -------------------------------------------------------------------

// SendData

// string seriaNum = 1;
inline void SendData::clear_serianum() {
  serianum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendData::serianum() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.seriaNum)
  return _internal_serianum();
}
inline void SendData::set_serianum(const std::string& value) {
  _internal_set_serianum(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SendData.seriaNum)
}
inline std::string* SendData::mutable_serianum() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.seriaNum)
  return _internal_mutable_serianum();
}
inline const std::string& SendData::_internal_serianum() const {
  return serianum_.Get();
}
inline void SendData::_internal_set_serianum(const std::string& value) {
  
  serianum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendData::set_serianum(std::string&& value) {
  
  serianum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SendData.seriaNum)
}
inline void SendData::set_serianum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serianum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SendData.seriaNum)
}
inline void SendData::set_serianum(const char* value,
    size_t size) {
  
  serianum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SendData.seriaNum)
}
inline std::string* SendData::_internal_mutable_serianum() {
  
  return serianum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendData::release_serianum() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.seriaNum)
  return serianum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendData::set_allocated_serianum(std::string* serianum) {
  if (serianum != nullptr) {
    
  } else {
    
  }
  serianum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serianum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.seriaNum)
}
inline std::string* SendData::unsafe_arena_release_serianum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.seriaNum)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return serianum_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SendData::unsafe_arena_set_allocated_serianum(
    std::string* serianum) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serianum != nullptr) {
    
  } else {
    
  }
  serianum_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serianum, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.seriaNum)
}

// string type = 2;
inline void SendData::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendData::type() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.type)
  return _internal_type();
}
inline void SendData::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SendData.type)
}
inline std::string* SendData::mutable_type() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.type)
  return _internal_mutable_type();
}
inline const std::string& SendData::_internal_type() const {
  return type_.Get();
}
inline void SendData::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendData::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SendData.type)
}
inline void SendData::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SendData.type)
}
inline void SendData::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SendData.type)
}
inline std::string* SendData::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendData::release_type() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendData::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.type)
}
inline std::string* SendData::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SendData::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.type)
}

// string action = 3;
inline void SendData::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendData::action() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.action)
  return _internal_action();
}
inline void SendData::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SendData.action)
}
inline std::string* SendData::mutable_action() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.action)
  return _internal_mutable_action();
}
inline const std::string& SendData::_internal_action() const {
  return action_.Get();
}
inline void SendData::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendData::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SendData.action)
}
inline void SendData::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SendData.action)
}
inline void SendData::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SendData.action)
}
inline std::string* SendData::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendData::release_action() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendData::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.action)
}
inline std::string* SendData::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.action)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SendData::unsafe_arena_set_allocated_action(
    std::string* action) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action != nullptr) {
    
  } else {
    
  }
  action_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.action)
}

// string success = 4;
inline void SendData::clear_success() {
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendData::success() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.success)
  return _internal_success();
}
inline void SendData::set_success(const std::string& value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SendData.success)
}
inline std::string* SendData::mutable_success() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.success)
  return _internal_mutable_success();
}
inline const std::string& SendData::_internal_success() const {
  return success_.Get();
}
inline void SendData::_internal_set_success(const std::string& value) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendData::set_success(std::string&& value) {
  
  success_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SendData.success)
}
inline void SendData::set_success(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SendData.success)
}
inline void SendData::set_success(const char* value,
    size_t size) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SendData.success)
}
inline std::string* SendData::_internal_mutable_success() {
  
  return success_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendData::release_success() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendData::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.success)
}
inline std::string* SendData::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.success)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return success_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SendData::unsafe_arena_set_allocated_success(
    std::string* success) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (success != nullptr) {
    
  } else {
    
  }
  success_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      success, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.success)
}

// string message = 5;
inline void SendData::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendData::message() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.message)
  return _internal_message();
}
inline void SendData::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SendData.message)
}
inline std::string* SendData::mutable_message() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.message)
  return _internal_mutable_message();
}
inline const std::string& SendData::_internal_message() const {
  return message_.Get();
}
inline void SendData::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendData::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SendData.message)
}
inline void SendData::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SendData.message)
}
inline void SendData::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SendData.message)
}
inline std::string* SendData::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendData::release_message() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendData::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.message)
}
inline std::string* SendData::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SendData::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.message)
}

// string snCode = 6;
inline void SendData::clear_sncode() {
  sncode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendData::sncode() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.snCode)
  return _internal_sncode();
}
inline void SendData::set_sncode(const std::string& value) {
  _internal_set_sncode(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SendData.snCode)
}
inline std::string* SendData::mutable_sncode() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.snCode)
  return _internal_mutable_sncode();
}
inline const std::string& SendData::_internal_sncode() const {
  return sncode_.Get();
}
inline void SendData::_internal_set_sncode(const std::string& value) {
  
  sncode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendData::set_sncode(std::string&& value) {
  
  sncode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SendData.snCode)
}
inline void SendData::set_sncode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sncode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SendData.snCode)
}
inline void SendData::set_sncode(const char* value,
    size_t size) {
  
  sncode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SendData.snCode)
}
inline std::string* SendData::_internal_mutable_sncode() {
  
  return sncode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendData::release_sncode() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.snCode)
  return sncode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendData::set_allocated_sncode(std::string* sncode) {
  if (sncode != nullptr) {
    
  } else {
    
  }
  sncode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sncode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.snCode)
}
inline std::string* SendData::unsafe_arena_release_sncode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.snCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sncode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SendData::unsafe_arena_set_allocated_sncode(
    std::string* sncode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sncode != nullptr) {
    
  } else {
    
  }
  sncode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sncode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.snCode)
}

// string userId = 7;
inline void SendData::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendData::userid() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.userId)
  return _internal_userid();
}
inline void SendData::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:com.caspe.devicemanagement.util.SendData.userId)
}
inline std::string* SendData::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.userId)
  return _internal_mutable_userid();
}
inline const std::string& SendData::_internal_userid() const {
  return userid_.Get();
}
inline void SendData::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendData::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.caspe.devicemanagement.util.SendData.userId)
}
inline void SendData::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.caspe.devicemanagement.util.SendData.userId)
}
inline void SendData::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.caspe.devicemanagement.util.SendData.userId)
}
inline std::string* SendData::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendData::release_userid() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendData::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.userId)
}
inline std::string* SendData::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.userId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SendData::unsafe_arena_set_allocated_userid(
    std::string* userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.userId)
}

// .com.caspe.devicemanagement.util.Ready ready = 60;
inline bool SendData::_internal_has_ready() const {
  return data_case() == kReady;
}
inline bool SendData::has_ready() const {
  return _internal_has_ready();
}
inline void SendData::set_has_ready() {
  _oneof_case_[0] = kReady;
}
inline void SendData::clear_ready() {
  if (_internal_has_ready()) {
    if (GetArena() == nullptr) {
      delete data_.ready_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::Ready* SendData::release_ready() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.ready)
  if (_internal_has_ready()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::Ready* temp = data_.ready_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::Ready& SendData::_internal_ready() const {
  return _internal_has_ready()
      ? *data_.ready_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::Ready*>(&::com::caspe::devicemanagement::util::_Ready_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::Ready& SendData::ready() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.ready)
  return _internal_ready();
}
inline ::com::caspe::devicemanagement::util::Ready* SendData::unsafe_arena_release_ready() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.ready)
  if (_internal_has_ready()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::Ready* temp = data_.ready_;
    data_.ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_ready(::com::caspe::devicemanagement::util::Ready* ready) {
  clear_data();
  if (ready) {
    set_has_ready();
    data_.ready_ = ready;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.ready)
}
inline ::com::caspe::devicemanagement::util::Ready* SendData::_internal_mutable_ready() {
  if (!_internal_has_ready()) {
    clear_data();
    set_has_ready();
    data_.ready_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::Ready >(GetArena());
  }
  return data_.ready_;
}
inline ::com::caspe::devicemanagement::util::Ready* SendData::mutable_ready() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.ready)
  return _internal_mutable_ready();
}

// .com.caspe.devicemanagement.util.DetailLog detailLog = 61;
inline bool SendData::_internal_has_detaillog() const {
  return data_case() == kDetailLog;
}
inline bool SendData::has_detaillog() const {
  return _internal_has_detaillog();
}
inline void SendData::set_has_detaillog() {
  _oneof_case_[0] = kDetailLog;
}
inline void SendData::clear_detaillog() {
  if (_internal_has_detaillog()) {
    if (GetArena() == nullptr) {
      delete data_.detaillog_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::DetailLog* SendData::release_detaillog() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.detailLog)
  if (_internal_has_detaillog()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::DetailLog* temp = data_.detaillog_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.detaillog_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::DetailLog& SendData::_internal_detaillog() const {
  return _internal_has_detaillog()
      ? *data_.detaillog_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::DetailLog*>(&::com::caspe::devicemanagement::util::_DetailLog_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::DetailLog& SendData::detaillog() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.detailLog)
  return _internal_detaillog();
}
inline ::com::caspe::devicemanagement::util::DetailLog* SendData::unsafe_arena_release_detaillog() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.detailLog)
  if (_internal_has_detaillog()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::DetailLog* temp = data_.detaillog_;
    data_.detaillog_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_detaillog(::com::caspe::devicemanagement::util::DetailLog* detaillog) {
  clear_data();
  if (detaillog) {
    set_has_detaillog();
    data_.detaillog_ = detaillog;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.detailLog)
}
inline ::com::caspe::devicemanagement::util::DetailLog* SendData::_internal_mutable_detaillog() {
  if (!_internal_has_detaillog()) {
    clear_data();
    set_has_detaillog();
    data_.detaillog_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::DetailLog >(GetArena());
  }
  return data_.detaillog_;
}
inline ::com::caspe::devicemanagement::util::DetailLog* SendData::mutable_detaillog() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.detailLog)
  return _internal_mutable_detaillog();
}

// .com.caspe.devicemanagement.util.Collect collect = 62;
inline bool SendData::_internal_has_collect() const {
  return data_case() == kCollect;
}
inline bool SendData::has_collect() const {
  return _internal_has_collect();
}
inline void SendData::set_has_collect() {
  _oneof_case_[0] = kCollect;
}
inline void SendData::clear_collect() {
  if (_internal_has_collect()) {
    if (GetArena() == nullptr) {
      delete data_.collect_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::Collect* SendData::release_collect() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.collect)
  if (_internal_has_collect()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::Collect* temp = data_.collect_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.collect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::Collect& SendData::_internal_collect() const {
  return _internal_has_collect()
      ? *data_.collect_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::Collect*>(&::com::caspe::devicemanagement::util::_Collect_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::Collect& SendData::collect() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.collect)
  return _internal_collect();
}
inline ::com::caspe::devicemanagement::util::Collect* SendData::unsafe_arena_release_collect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.collect)
  if (_internal_has_collect()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::Collect* temp = data_.collect_;
    data_.collect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_collect(::com::caspe::devicemanagement::util::Collect* collect) {
  clear_data();
  if (collect) {
    set_has_collect();
    data_.collect_ = collect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.collect)
}
inline ::com::caspe::devicemanagement::util::Collect* SendData::_internal_mutable_collect() {
  if (!_internal_has_collect()) {
    clear_data();
    set_has_collect();
    data_.collect_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::Collect >(GetArena());
  }
  return data_.collect_;
}
inline ::com::caspe::devicemanagement::util::Collect* SendData::mutable_collect() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.collect)
  return _internal_mutable_collect();
}

// .com.caspe.devicemanagement.util.CollectReply collectReply = 63;
inline bool SendData::_internal_has_collectreply() const {
  return data_case() == kCollectReply;
}
inline bool SendData::has_collectreply() const {
  return _internal_has_collectreply();
}
inline void SendData::set_has_collectreply() {
  _oneof_case_[0] = kCollectReply;
}
inline void SendData::clear_collectreply() {
  if (_internal_has_collectreply()) {
    if (GetArena() == nullptr) {
      delete data_.collectreply_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::CollectReply* SendData::release_collectreply() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.collectReply)
  if (_internal_has_collectreply()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::CollectReply* temp = data_.collectreply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.collectreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::CollectReply& SendData::_internal_collectreply() const {
  return _internal_has_collectreply()
      ? *data_.collectreply_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::CollectReply*>(&::com::caspe::devicemanagement::util::_CollectReply_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::CollectReply& SendData::collectreply() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.collectReply)
  return _internal_collectreply();
}
inline ::com::caspe::devicemanagement::util::CollectReply* SendData::unsafe_arena_release_collectreply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.collectReply)
  if (_internal_has_collectreply()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::CollectReply* temp = data_.collectreply_;
    data_.collectreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_collectreply(::com::caspe::devicemanagement::util::CollectReply* collectreply) {
  clear_data();
  if (collectreply) {
    set_has_collectreply();
    data_.collectreply_ = collectreply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.collectReply)
}
inline ::com::caspe::devicemanagement::util::CollectReply* SendData::_internal_mutable_collectreply() {
  if (!_internal_has_collectreply()) {
    clear_data();
    set_has_collectreply();
    data_.collectreply_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::CollectReply >(GetArena());
  }
  return data_.collectreply_;
}
inline ::com::caspe::devicemanagement::util::CollectReply* SendData::mutable_collectreply() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.collectReply)
  return _internal_mutable_collectreply();
}

// .com.caspe.devicemanagement.util.SuspendReply suspend = 64;
inline bool SendData::_internal_has_suspend() const {
  return data_case() == kSuspend;
}
inline bool SendData::has_suspend() const {
  return _internal_has_suspend();
}
inline void SendData::set_has_suspend() {
  _oneof_case_[0] = kSuspend;
}
inline void SendData::clear_suspend() {
  if (_internal_has_suspend()) {
    if (GetArena() == nullptr) {
      delete data_.suspend_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::SuspendReply* SendData::release_suspend() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.suspend)
  if (_internal_has_suspend()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::SuspendReply* temp = data_.suspend_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.suspend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::SuspendReply& SendData::_internal_suspend() const {
  return _internal_has_suspend()
      ? *data_.suspend_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::SuspendReply*>(&::com::caspe::devicemanagement::util::_SuspendReply_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::SuspendReply& SendData::suspend() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.suspend)
  return _internal_suspend();
}
inline ::com::caspe::devicemanagement::util::SuspendReply* SendData::unsafe_arena_release_suspend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.suspend)
  if (_internal_has_suspend()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::SuspendReply* temp = data_.suspend_;
    data_.suspend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_suspend(::com::caspe::devicemanagement::util::SuspendReply* suspend) {
  clear_data();
  if (suspend) {
    set_has_suspend();
    data_.suspend_ = suspend;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.suspend)
}
inline ::com::caspe::devicemanagement::util::SuspendReply* SendData::_internal_mutable_suspend() {
  if (!_internal_has_suspend()) {
    clear_data();
    set_has_suspend();
    data_.suspend_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::SuspendReply >(GetArena());
  }
  return data_.suspend_;
}
inline ::com::caspe::devicemanagement::util::SuspendReply* SendData::mutable_suspend() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.suspend)
  return _internal_mutable_suspend();
}

// .com.caspe.devicemanagement.util.CollectComplete collectComplete = 65;
inline bool SendData::_internal_has_collectcomplete() const {
  return data_case() == kCollectComplete;
}
inline bool SendData::has_collectcomplete() const {
  return _internal_has_collectcomplete();
}
inline void SendData::set_has_collectcomplete() {
  _oneof_case_[0] = kCollectComplete;
}
inline void SendData::clear_collectcomplete() {
  if (_internal_has_collectcomplete()) {
    if (GetArena() == nullptr) {
      delete data_.collectcomplete_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::CollectComplete* SendData::release_collectcomplete() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.collectComplete)
  if (_internal_has_collectcomplete()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::CollectComplete* temp = data_.collectcomplete_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.collectcomplete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::CollectComplete& SendData::_internal_collectcomplete() const {
  return _internal_has_collectcomplete()
      ? *data_.collectcomplete_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::CollectComplete*>(&::com::caspe::devicemanagement::util::_CollectComplete_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::CollectComplete& SendData::collectcomplete() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.collectComplete)
  return _internal_collectcomplete();
}
inline ::com::caspe::devicemanagement::util::CollectComplete* SendData::unsafe_arena_release_collectcomplete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.collectComplete)
  if (_internal_has_collectcomplete()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::CollectComplete* temp = data_.collectcomplete_;
    data_.collectcomplete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_collectcomplete(::com::caspe::devicemanagement::util::CollectComplete* collectcomplete) {
  clear_data();
  if (collectcomplete) {
    set_has_collectcomplete();
    data_.collectcomplete_ = collectcomplete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.collectComplete)
}
inline ::com::caspe::devicemanagement::util::CollectComplete* SendData::_internal_mutable_collectcomplete() {
  if (!_internal_has_collectcomplete()) {
    clear_data();
    set_has_collectcomplete();
    data_.collectcomplete_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::CollectComplete >(GetArena());
  }
  return data_.collectcomplete_;
}
inline ::com::caspe::devicemanagement::util::CollectComplete* SendData::mutable_collectcomplete() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.collectComplete)
  return _internal_mutable_collectcomplete();
}

// .com.caspe.devicemanagement.util.StatusReport statusReport = 66;
inline bool SendData::_internal_has_statusreport() const {
  return data_case() == kStatusReport;
}
inline bool SendData::has_statusreport() const {
  return _internal_has_statusreport();
}
inline void SendData::set_has_statusreport() {
  _oneof_case_[0] = kStatusReport;
}
inline void SendData::clear_statusreport() {
  if (_internal_has_statusreport()) {
    if (GetArena() == nullptr) {
      delete data_.statusreport_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::StatusReport* SendData::release_statusreport() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.statusReport)
  if (_internal_has_statusreport()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::StatusReport* temp = data_.statusreport_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.statusreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::StatusReport& SendData::_internal_statusreport() const {
  return _internal_has_statusreport()
      ? *data_.statusreport_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::StatusReport*>(&::com::caspe::devicemanagement::util::_StatusReport_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::StatusReport& SendData::statusreport() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.statusReport)
  return _internal_statusreport();
}
inline ::com::caspe::devicemanagement::util::StatusReport* SendData::unsafe_arena_release_statusreport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.statusReport)
  if (_internal_has_statusreport()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::StatusReport* temp = data_.statusreport_;
    data_.statusreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_statusreport(::com::caspe::devicemanagement::util::StatusReport* statusreport) {
  clear_data();
  if (statusreport) {
    set_has_statusreport();
    data_.statusreport_ = statusreport;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.statusReport)
}
inline ::com::caspe::devicemanagement::util::StatusReport* SendData::_internal_mutable_statusreport() {
  if (!_internal_has_statusreport()) {
    clear_data();
    set_has_statusreport();
    data_.statusreport_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::StatusReport >(GetArena());
  }
  return data_.statusreport_;
}
inline ::com::caspe::devicemanagement::util::StatusReport* SendData::mutable_statusreport() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.statusReport)
  return _internal_mutable_statusreport();
}

// .com.caspe.devicemanagement.util.Alg alg = 67;
inline bool SendData::_internal_has_alg() const {
  return data_case() == kAlg;
}
inline bool SendData::has_alg() const {
  return _internal_has_alg();
}
inline void SendData::set_has_alg() {
  _oneof_case_[0] = kAlg;
}
inline void SendData::clear_alg() {
  if (_internal_has_alg()) {
    if (GetArena() == nullptr) {
      delete data_.alg_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::Alg* SendData::release_alg() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.alg)
  if (_internal_has_alg()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::Alg* temp = data_.alg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.alg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::Alg& SendData::_internal_alg() const {
  return _internal_has_alg()
      ? *data_.alg_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::Alg*>(&::com::caspe::devicemanagement::util::_Alg_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::Alg& SendData::alg() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.alg)
  return _internal_alg();
}
inline ::com::caspe::devicemanagement::util::Alg* SendData::unsafe_arena_release_alg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.alg)
  if (_internal_has_alg()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::Alg* temp = data_.alg_;
    data_.alg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_alg(::com::caspe::devicemanagement::util::Alg* alg) {
  clear_data();
  if (alg) {
    set_has_alg();
    data_.alg_ = alg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.alg)
}
inline ::com::caspe::devicemanagement::util::Alg* SendData::_internal_mutable_alg() {
  if (!_internal_has_alg()) {
    clear_data();
    set_has_alg();
    data_.alg_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::Alg >(GetArena());
  }
  return data_.alg_;
}
inline ::com::caspe::devicemanagement::util::Alg* SendData::mutable_alg() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.alg)
  return _internal_mutable_alg();
}

// .com.caspe.devicemanagement.util.AlarmList alarmList = 68;
inline bool SendData::_internal_has_alarmlist() const {
  return data_case() == kAlarmList;
}
inline bool SendData::has_alarmlist() const {
  return _internal_has_alarmlist();
}
inline void SendData::set_has_alarmlist() {
  _oneof_case_[0] = kAlarmList;
}
inline void SendData::clear_alarmlist() {
  if (_internal_has_alarmlist()) {
    if (GetArena() == nullptr) {
      delete data_.alarmlist_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::AlarmList* SendData::release_alarmlist() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.alarmList)
  if (_internal_has_alarmlist()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::AlarmList* temp = data_.alarmlist_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.alarmlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::AlarmList& SendData::_internal_alarmlist() const {
  return _internal_has_alarmlist()
      ? *data_.alarmlist_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::AlarmList*>(&::com::caspe::devicemanagement::util::_AlarmList_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::AlarmList& SendData::alarmlist() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.alarmList)
  return _internal_alarmlist();
}
inline ::com::caspe::devicemanagement::util::AlarmList* SendData::unsafe_arena_release_alarmlist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.alarmList)
  if (_internal_has_alarmlist()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::AlarmList* temp = data_.alarmlist_;
    data_.alarmlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_alarmlist(::com::caspe::devicemanagement::util::AlarmList* alarmlist) {
  clear_data();
  if (alarmlist) {
    set_has_alarmlist();
    data_.alarmlist_ = alarmlist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.alarmList)
}
inline ::com::caspe::devicemanagement::util::AlarmList* SendData::_internal_mutable_alarmlist() {
  if (!_internal_has_alarmlist()) {
    clear_data();
    set_has_alarmlist();
    data_.alarmlist_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::AlarmList >(GetArena());
  }
  return data_.alarmlist_;
}
inline ::com::caspe::devicemanagement::util::AlarmList* SendData::mutable_alarmlist() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.alarmList)
  return _internal_mutable_alarmlist();
}

// .com.caspe.devicemanagement.util.SysParam sysParam = 69;
inline bool SendData::_internal_has_sysparam() const {
  return data_case() == kSysParam;
}
inline bool SendData::has_sysparam() const {
  return _internal_has_sysparam();
}
inline void SendData::set_has_sysparam() {
  _oneof_case_[0] = kSysParam;
}
inline void SendData::clear_sysparam() {
  if (_internal_has_sysparam()) {
    if (GetArena() == nullptr) {
      delete data_.sysparam_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::SysParam* SendData::release_sysparam() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.sysParam)
  if (_internal_has_sysparam()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::SysParam* temp = data_.sysparam_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.sysparam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::SysParam& SendData::_internal_sysparam() const {
  return _internal_has_sysparam()
      ? *data_.sysparam_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::SysParam*>(&::com::caspe::devicemanagement::util::_SysParam_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::SysParam& SendData::sysparam() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.sysParam)
  return _internal_sysparam();
}
inline ::com::caspe::devicemanagement::util::SysParam* SendData::unsafe_arena_release_sysparam() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.sysParam)
  if (_internal_has_sysparam()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::SysParam* temp = data_.sysparam_;
    data_.sysparam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_sysparam(::com::caspe::devicemanagement::util::SysParam* sysparam) {
  clear_data();
  if (sysparam) {
    set_has_sysparam();
    data_.sysparam_ = sysparam;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.sysParam)
}
inline ::com::caspe::devicemanagement::util::SysParam* SendData::_internal_mutable_sysparam() {
  if (!_internal_has_sysparam()) {
    clear_data();
    set_has_sysparam();
    data_.sysparam_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::SysParam >(GetArena());
  }
  return data_.sysparam_;
}
inline ::com::caspe::devicemanagement::util::SysParam* SendData::mutable_sysparam() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.sysParam)
  return _internal_mutable_sysparam();
}

// .com.caspe.devicemanagement.util.Signal signal = 70;
inline bool SendData::_internal_has_signal() const {
  return data_case() == kSignal;
}
inline bool SendData::has_signal() const {
  return _internal_has_signal();
}
inline void SendData::set_has_signal() {
  _oneof_case_[0] = kSignal;
}
inline void SendData::clear_signal() {
  if (_internal_has_signal()) {
    if (GetArena() == nullptr) {
      delete data_.signal_;
    }
    clear_has_data();
  }
}
inline ::com::caspe::devicemanagement::util::Signal* SendData::release_signal() {
  // @@protoc_insertion_point(field_release:com.caspe.devicemanagement.util.SendData.signal)
  if (_internal_has_signal()) {
    clear_has_data();
      ::com::caspe::devicemanagement::util::Signal* temp = data_.signal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::caspe::devicemanagement::util::Signal& SendData::_internal_signal() const {
  return _internal_has_signal()
      ? *data_.signal_
      : *reinterpret_cast< ::com::caspe::devicemanagement::util::Signal*>(&::com::caspe::devicemanagement::util::_Signal_default_instance_);
}
inline const ::com::caspe::devicemanagement::util::Signal& SendData::signal() const {
  // @@protoc_insertion_point(field_get:com.caspe.devicemanagement.util.SendData.signal)
  return _internal_signal();
}
inline ::com::caspe::devicemanagement::util::Signal* SendData::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.caspe.devicemanagement.util.SendData.signal)
  if (_internal_has_signal()) {
    clear_has_data();
    ::com::caspe::devicemanagement::util::Signal* temp = data_.signal_;
    data_.signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendData::unsafe_arena_set_allocated_signal(::com::caspe::devicemanagement::util::Signal* signal) {
  clear_data();
  if (signal) {
    set_has_signal();
    data_.signal_ = signal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.caspe.devicemanagement.util.SendData.signal)
}
inline ::com::caspe::devicemanagement::util::Signal* SendData::_internal_mutable_signal() {
  if (!_internal_has_signal()) {
    clear_data();
    set_has_signal();
    data_.signal_ = CreateMaybeMessage< ::com::caspe::devicemanagement::util::Signal >(GetArena());
  }
  return data_.signal_;
}
inline ::com::caspe::devicemanagement::util::Signal* SendData::mutable_signal() {
  // @@protoc_insertion_point(field_mutable:com.caspe.devicemanagement.util.SendData.signal)
  return _internal_mutable_signal();
}

inline bool SendData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SendData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SendData::DataCase SendData::data_case() const {
  return SendData::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace util
}  // namespace devicemanagement
}  // namespace caspe
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SendData_2eproto
