// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SendData.proto

#include "SendData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlarmList_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmList_Alarm_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alg_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Collect_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Collect_PartList_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Collect_StopCondition_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectComplete_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectReply_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetailLog_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessInfo_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ready_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Signal_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_Channel_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusReport_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusReport_Status_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuspendReply_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SysParam_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysParam_DefogTiming_SendData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SendData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysParam_HeaterTiming_SendData_2eproto;
namespace com {
namespace caspe {
namespace devicemanagement {
namespace util {
class ReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ready> _instance;
} _Ready_default_instance_;
class DetailLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailLog> _instance;
} _DetailLog_default_instance_;
class Collect_StopConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collect_StopCondition> _instance;
} _Collect_StopCondition_default_instance_;
class Collect_PartListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collect_PartList> _instance;
} _Collect_PartList_default_instance_;
class CollectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collect> _instance;
} _Collect_default_instance_;
class ProcessInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessInfo> _instance;
} _ProcessInfo_default_instance_;
class CollectReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectReply> _instance;
} _CollectReply_default_instance_;
class SuspendReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuspendReply> _instance;
} _SuspendReply_default_instance_;
class CollectCompleteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectComplete> _instance;
} _CollectComplete_default_instance_;
class StatusReport_StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusReport_Status> _instance;
} _StatusReport_Status_default_instance_;
class StatusReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusReport> _instance;
} _StatusReport_default_instance_;
class AlgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Alg> _instance;
} _Alg_default_instance_;
class AlarmList_AlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmList_Alarm> _instance;
} _AlarmList_Alarm_default_instance_;
class AlarmListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmList> _instance;
} _AlarmList_default_instance_;
class Signal_ChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signal_Channel> _instance;
} _Signal_Channel_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signal> _instance;
} _Signal_default_instance_;
class SysParam_DefogTimingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysParam_DefogTiming> _instance;
} _SysParam_DefogTiming_default_instance_;
class SysParam_HeaterTimingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysParam_HeaterTiming> _instance;
} _SysParam_HeaterTiming_default_instance_;
class SysParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysParam> _instance;
} _SysParam_default_instance_;
class SendDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendData> _instance;
  const ::com::caspe::devicemanagement::util::Ready* ready_;
  const ::com::caspe::devicemanagement::util::DetailLog* detaillog_;
  const ::com::caspe::devicemanagement::util::Collect* collect_;
  const ::com::caspe::devicemanagement::util::CollectReply* collectreply_;
  const ::com::caspe::devicemanagement::util::SuspendReply* suspend_;
  const ::com::caspe::devicemanagement::util::CollectComplete* collectcomplete_;
  const ::com::caspe::devicemanagement::util::StatusReport* statusreport_;
  const ::com::caspe::devicemanagement::util::Alg* alg_;
  const ::com::caspe::devicemanagement::util::AlarmList* alarmlist_;
  const ::com::caspe::devicemanagement::util::SysParam* sysparam_;
  const ::com::caspe::devicemanagement::util::Signal* signal_;
} _SendData_default_instance_;
}  // namespace util
}  // namespace devicemanagement
}  // namespace caspe
}  // namespace com
static void InitDefaultsscc_info_AlarmList_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_AlarmList_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::AlarmList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::AlarmList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlarmList_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AlarmList_SendData_2eproto}, {
      &scc_info_AlarmList_Alarm_SendData_2eproto.base,}};

static void InitDefaultsscc_info_AlarmList_Alarm_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_AlarmList_Alarm_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::AlarmList_Alarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::AlarmList_Alarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmList_Alarm_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmList_Alarm_SendData_2eproto}, {}};

static void InitDefaultsscc_info_Alg_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_Alg_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::Alg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::Alg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alg_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Alg_SendData_2eproto}, {}};

static void InitDefaultsscc_info_Collect_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_Collect_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::Collect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::Collect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Collect_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Collect_SendData_2eproto}, {
      &scc_info_Collect_StopCondition_SendData_2eproto.base,
      &scc_info_Collect_PartList_SendData_2eproto.base,}};

static void InitDefaultsscc_info_Collect_PartList_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_Collect_PartList_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::Collect_PartList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::Collect_PartList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Collect_PartList_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Collect_PartList_SendData_2eproto}, {
      &scc_info_Collect_StopCondition_SendData_2eproto.base,}};

static void InitDefaultsscc_info_Collect_StopCondition_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_Collect_StopCondition_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::Collect_StopCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::Collect_StopCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Collect_StopCondition_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Collect_StopCondition_SendData_2eproto}, {}};

static void InitDefaultsscc_info_CollectComplete_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_CollectComplete_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::CollectComplete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::CollectComplete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectComplete_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CollectComplete_SendData_2eproto}, {
      &scc_info_ProcessInfo_SendData_2eproto.base,}};

static void InitDefaultsscc_info_CollectReply_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_CollectReply_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::CollectReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::CollectReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectReply_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CollectReply_SendData_2eproto}, {
      &scc_info_ProcessInfo_SendData_2eproto.base,}};

static void InitDefaultsscc_info_DetailLog_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_DetailLog_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::DetailLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::DetailLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetailLog_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DetailLog_SendData_2eproto}, {}};

static void InitDefaultsscc_info_ProcessInfo_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_ProcessInfo_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::ProcessInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::ProcessInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessInfo_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessInfo_SendData_2eproto}, {}};

static void InitDefaultsscc_info_Ready_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_Ready_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::Ready();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::Ready::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ready_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ready_SendData_2eproto}, {}};

static void InitDefaultsscc_info_SendData_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_SendData_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::SendData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::SendData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_SendData_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_SendData_SendData_2eproto}, {
      &scc_info_Ready_SendData_2eproto.base,
      &scc_info_DetailLog_SendData_2eproto.base,
      &scc_info_Collect_SendData_2eproto.base,
      &scc_info_CollectReply_SendData_2eproto.base,
      &scc_info_SuspendReply_SendData_2eproto.base,
      &scc_info_CollectComplete_SendData_2eproto.base,
      &scc_info_StatusReport_SendData_2eproto.base,
      &scc_info_Alg_SendData_2eproto.base,
      &scc_info_AlarmList_SendData_2eproto.base,
      &scc_info_SysParam_SendData_2eproto.base,
      &scc_info_Signal_SendData_2eproto.base,}};

static void InitDefaultsscc_info_Signal_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_Signal_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::Signal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::Signal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Signal_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Signal_SendData_2eproto}, {
      &scc_info_Signal_Channel_SendData_2eproto.base,}};

static void InitDefaultsscc_info_Signal_Channel_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_Signal_Channel_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::Signal_Channel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::Signal_Channel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_Channel_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signal_Channel_SendData_2eproto}, {}};

static void InitDefaultsscc_info_StatusReport_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_StatusReport_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::StatusReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::StatusReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusReport_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatusReport_SendData_2eproto}, {
      &scc_info_StatusReport_Status_SendData_2eproto.base,}};

static void InitDefaultsscc_info_StatusReport_Status_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_StatusReport_Status_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::StatusReport_Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::StatusReport_Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusReport_Status_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusReport_Status_SendData_2eproto}, {}};

static void InitDefaultsscc_info_SuspendReply_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_SuspendReply_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::SuspendReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::SuspendReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuspendReply_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SuspendReply_SendData_2eproto}, {}};

static void InitDefaultsscc_info_SysParam_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_SysParam_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::SysParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::SysParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SysParam_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SysParam_SendData_2eproto}, {
      &scc_info_SysParam_DefogTiming_SendData_2eproto.base,
      &scc_info_SysParam_HeaterTiming_SendData_2eproto.base,}};

static void InitDefaultsscc_info_SysParam_DefogTiming_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_SysParam_DefogTiming_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::SysParam_DefogTiming();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::SysParam_DefogTiming::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysParam_DefogTiming_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SysParam_DefogTiming_SendData_2eproto}, {}};

static void InitDefaultsscc_info_SysParam_HeaterTiming_SendData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::caspe::devicemanagement::util::_SysParam_HeaterTiming_default_instance_;
    new (ptr) ::com::caspe::devicemanagement::util::SysParam_HeaterTiming();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::caspe::devicemanagement::util::SysParam_HeaterTiming::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysParam_HeaterTiming_SendData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SysParam_HeaterTiming_SendData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SendData_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SendData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SendData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SendData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Ready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Ready, currentmode_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Ready, lon_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Ready, lat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::DetailLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::DetailLog, logcontent_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::DetailLog, createtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_StopCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_StopCondition, counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, hangle_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, vangle_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, sangle_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, eangle_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, iangle_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, interval_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, scanning_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect_PartList, stopcondtion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect, collectmode_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect, northangle_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect, pulsecount_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect, pointdistance_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect, stopcondition_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Collect, partlists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::ProcessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::ProcessInfo, mode_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::ProcessInfo, processid_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::ProcessInfo, sangle_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::ProcessInfo, eangle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::CollectReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::CollectReply, process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SuspendReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SuspendReply, hangle_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SuspendReply, vangle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::CollectComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::CollectComplete, process_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::CollectComplete, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::StatusReport_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::StatusReport_Status, name_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::StatusReport_Status, value_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::StatusReport_Status, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::StatusReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::StatusReport, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, extinalgorithmtype_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, fixcloudyextin_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, cloudextthresh_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, fixreferheight_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, denoisingextin_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, signalsplicing_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, snrthreshextin_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, refheight532_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, depolfactor_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, denoising_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, snrthreshdepol_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, echodefault_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, echostart_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, echoend_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, smooth_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, smoothtimes_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, windowlength_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, pm10ratioa_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, pm10ratiob_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, pm10ratioc_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, pm25ratioa_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, pm25ratiob_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, pm25ratioc_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, visibilitydefault_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, visibilityoutcloud_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, visibilitystarth_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, visibilityendh_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, aoddefault_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, aodoutcloud_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, aodstartlimit_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, aodendlimit_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, overlapcorrect_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, extincoea_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, extincoeb_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, removepoint_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Alg, emptydistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::AlarmList_Alarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::AlarmList_Alarm, level_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::AlarmList_Alarm, categoryname_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::AlarmList_Alarm, desc_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::AlarmList_Alarm, alarmtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::AlarmList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::AlarmList, alarm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal_Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal_Channel, channelname_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal_Channel, pointcount_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal_Channel, spaceresolution_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal_Channel, wavelength_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal_Channel, adcbit_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal_Channel, pulsecount_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal_Channel, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::Signal, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam_DefogTiming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam_DefogTiming, start_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam_DefogTiming, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam_HeaterTiming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam_HeaterTiming, start_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam_HeaterTiming, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, syspointdist_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, syspulsecount_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enablegal_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enableups_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enablecompass_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enablegps_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enablecamera_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enableyuncamera_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enableheater_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enabledefog_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, enablevirtualgps_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, yunparamreset_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, channel1_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, channel2_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, channel3_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, channel4_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, channel5_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, channel6_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, channel7_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, channel8_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, laserhertz_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, laserampere_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, galspeed_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, defogmode_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, defogautocondition_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, defogautovalue_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, defogtiming_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, heatermode_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, heatertiming_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, virtualgpslon_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, virtualgpslat_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, defogheat1_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, defogheat2_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SysParam, defogheat3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, serianum_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, type_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, action_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, success_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, message_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, sncode_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, userid_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, ready_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, detaillog_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, collect_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, collectreply_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, suspend_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, collectcomplete_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, statusreport_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, alg_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, alarmlist_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, sysparam_),
  offsetof(::com::caspe::devicemanagement::util::SendDataDefaultTypeInternal, signal_),
  PROTOBUF_FIELD_OFFSET(::com::caspe::devicemanagement::util::SendData, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::caspe::devicemanagement::util::Ready)},
  { 8, -1, sizeof(::com::caspe::devicemanagement::util::DetailLog)},
  { 15, -1, sizeof(::com::caspe::devicemanagement::util::Collect_StopCondition)},
  { 21, -1, sizeof(::com::caspe::devicemanagement::util::Collect_PartList)},
  { 34, -1, sizeof(::com::caspe::devicemanagement::util::Collect)},
  { 45, -1, sizeof(::com::caspe::devicemanagement::util::ProcessInfo)},
  { 54, -1, sizeof(::com::caspe::devicemanagement::util::CollectReply)},
  { 60, -1, sizeof(::com::caspe::devicemanagement::util::SuspendReply)},
  { 67, -1, sizeof(::com::caspe::devicemanagement::util::CollectComplete)},
  { 74, -1, sizeof(::com::caspe::devicemanagement::util::StatusReport_Status)},
  { 82, -1, sizeof(::com::caspe::devicemanagement::util::StatusReport)},
  { 88, -1, sizeof(::com::caspe::devicemanagement::util::Alg)},
  { 129, -1, sizeof(::com::caspe::devicemanagement::util::AlarmList_Alarm)},
  { 138, -1, sizeof(::com::caspe::devicemanagement::util::AlarmList)},
  { 144, -1, sizeof(::com::caspe::devicemanagement::util::Signal_Channel)},
  { 156, -1, sizeof(::com::caspe::devicemanagement::util::Signal)},
  { 162, -1, sizeof(::com::caspe::devicemanagement::util::SysParam_DefogTiming)},
  { 169, -1, sizeof(::com::caspe::devicemanagement::util::SysParam_HeaterTiming)},
  { 176, -1, sizeof(::com::caspe::devicemanagement::util::SysParam)},
  { 215, -1, sizeof(::com::caspe::devicemanagement::util::SendData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_Ready_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_DetailLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_Collect_StopCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_Collect_PartList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_Collect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_ProcessInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_CollectReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_SuspendReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_CollectComplete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_StatusReport_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_StatusReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_Alg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_AlarmList_Alarm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_AlarmList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_Signal_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_Signal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_SysParam_DefogTiming_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_SysParam_HeaterTiming_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_SysParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::caspe::devicemanagement::util::_SendData_default_instance_),
};

const char descriptor_table_protodef_SendData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016SendData.proto\022\037com.caspe.devicemanage"
  "ment.util\"6\n\005Ready\022\023\n\013currentMode\030\001 \001(\t\022"
  "\013\n\003lon\030\002 \001(\002\022\013\n\003lat\030\003 \001(\002\"3\n\tDetailLog\022\022"
  "\n\nlogContent\030\001 \001(\t\022\022\n\ncreateTime\030\002 \001(\t\"\342"
  "\003\n\007Collect\022\023\n\013collectMode\030\001 \001(\t\022\022\n\nnorth"
  "Angle\030\002 \001(\t\022\022\n\npulseCount\030\003 \001(\005\022\025\n\rpoint"
  "Distance\030\004 \001(\002\022M\n\rstopCondition\030\005 \001(\01326."
  "com.caspe.devicemanagement.util.Collect."
  "StopCondition\022D\n\tpartLists\030\006 \003(\01321.com.c"
  "aspe.devicemanagement.util.Collect.PartL"
  "ist\032\037\n\rStopCondition\022\016\n\006counts\030\001 \001(\t\032\314\001\n"
  "\010PartList\022\016\n\006hAngle\030\001 \001(\t\022\016\n\006vAngle\030\002 \001("
  "\t\022\016\n\006sAngle\030\003 \001(\t\022\016\n\006eAngle\030\004 \001(\t\022\016\n\006iAn"
  "gle\030\005 \001(\t\022\020\n\010interval\030\006 \001(\t\022\020\n\010scanning\030"
  "\007 \001(\t\022L\n\014stopCondtion\030\010 \001(\01326.com.caspe."
  "devicemanagement.util.Collect.StopCondit"
  "ion\"N\n\013ProcessInfo\022\014\n\004mode\030\001 \001(\t\022\021\n\tproc"
  "essId\030\002 \001(\t\022\016\n\006sAngle\030\003 \001(\t\022\016\n\006eAngle\030\004 "
  "\001(\t\"M\n\014CollectReply\022=\n\007process\030\001 \001(\0132,.c"
  "om.caspe.devicemanagement.util.ProcessIn"
  "fo\".\n\014SuspendReply\022\016\n\006hAngle\030\003 \001(\t\022\016\n\006vA"
  "ngle\030\004 \001(\t\"`\n\017CollectComplete\022=\n\007process"
  "\030\001 \001(\0132,.com.caspe.devicemanagement.util"
  ".ProcessInfo\022\016\n\006reason\030\002 \001(\t\"\212\001\n\014StatusR"
  "eport\022D\n\006status\030\001 \003(\01324.com.caspe.device"
  "management.util.StatusReport.Status\0324\n\006S"
  "tatus\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\r\n\005er"
  "ror\030\003 \001(\t\"\233\006\n\003Alg\022\032\n\022extinAlgorithmType\030"
  "\001 \001(\t\022\026\n\016fixCloudyExtin\030\002 \001(\t\022\026\n\016cloudEx"
  "tThresh\030\003 \001(\002\022\026\n\016fixReferHeight\030\004 \001(\t\022\026\n"
  "\016denoisingExtin\030\005 \001(\t\022\026\n\016signalSplicing\030"
  "\006 \001(\t\022\026\n\016snrThreshExtin\030\007 \001(\002\022\024\n\014refHeig"
  "ht532\030\010 \001(\002\022\023\n\013depolFactor\030\t \001(\002\022\021\n\tdeno"
  "ising\030\n \001(\t\022\026\n\016snrThreshDepol\030\013 \001(\002\022\023\n\013e"
  "choDefault\030\014 \001(\t\022\021\n\techoStart\030\r \001(\002\022\017\n\007e"
  "choEnd\030\016 \001(\002\022\016\n\006smooth\030\017 \001(\t\022\023\n\013smoothTi"
  "mes\030\020 \001(\005\022\024\n\014windowLength\030\021 \001(\005\022\022\n\npm10R"
  "atioA\030\022 \001(\002\022\022\n\npm10RatioB\030\023 \001(\002\022\022\n\npm10R"
  "atioC\030\024 \001(\002\022\022\n\npm25RatioA\030\025 \001(\002\022\022\n\npm25R"
  "atioB\030\026 \001(\002\022\022\n\npm25RatioC\030\027 \001(\002\022\031\n\021visib"
  "ilityDefault\030\030 \001(\t\022\032\n\022visibilityOutCloud"
  "\030\031 \001(\t\022\030\n\020visibilityStartH\030\032 \001(\002\022\026\n\016visi"
  "bilityEndH\030\033 \001(\002\022\022\n\naodDefault\030\034 \001(\t\022\023\n\013"
  "aodOutCloud\030\035 \001(\t\022\025\n\raodStartLimit\030\036 \001(\002"
  "\022\023\n\013aodEndLimit\030\037 \001(\002\022\026\n\016overlapCorrect\030"
  "  \001(\t\022\021\n\textinCoea\030! \001(\002\022\021\n\textinCoeb\030\" "
  "\001(\002\022\023\n\013removePoint\030# \001(\005\022\025\n\remptyDistanc"
  "e\030$ \001(\002\"\233\001\n\tAlarmList\022\?\n\005alarm\030\001 \003(\01320.c"
  "om.caspe.devicemanagement.util.AlarmList"
  ".Alarm\032M\n\005Alarm\022\r\n\005level\030\001 \001(\t\022\024\n\014catego"
  "ryName\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\021\n\talarmTime\030"
  "\004 \001(\t\"\337\001\n\006Signal\022A\n\010channels\030\001 \003(\0132/.com"
  ".caspe.devicemanagement.util.Signal.Chan"
  "nel\032\221\001\n\007Channel\022\023\n\013channelName\030\001 \001(\t\022\022\n\n"
  "pointCount\030\002 \001(\005\022\027\n\017spaceResolution\030\003 \001("
  "\002\022\022\n\nwaveLength\030\004 \001(\005\022\016\n\006adcBit\030\005 \001(\005\022\022\n"
  "\npulseCount\030\006 \001(\005\022\014\n\004data\030\007 \003(\003\"\223\007\n\010SysP"
  "aram\022\024\n\014sysPointDist\030\001 \001(\002\022\025\n\rsysPulseCo"
  "unt\030\002 \001(\005\022\021\n\tenableGal\030\003 \001(\010\022\021\n\tenableUp"
  "s\030\004 \001(\010\022\025\n\renableCompass\030\005 \001(\010\022\021\n\tenable"
  "Gps\030\006 \001(\010\022\024\n\014enableCamera\030\007 \001(\010\022\027\n\017enabl"
  "eYunCamera\030\010 \001(\010\022\024\n\014enableHeater\030\t \001(\010\022\023"
  "\n\013enableDefog\030\n \001(\010\022\030\n\020enableVirtualGps\030"
  "\013 \001(\010\022\025\n\ryunParamReset\030\014 \001(\010\022\020\n\010channel1"
  "\030\r \001(\t\022\020\n\010channel2\030\016 \001(\t\022\020\n\010channel3\030\017 \001"
  "(\t\022\020\n\010channel4\030\020 \001(\t\022\020\n\010channel5\030\021 \001(\t\022\020"
  "\n\010channel6\030\022 \001(\t\022\020\n\010channel7\030\023 \001(\t\022\020\n\010ch"
  "annel8\030\024 \001(\t\022\022\n\nlaserHertz\030\025 \001(\005\022\023\n\013lase"
  "rAmpere\030\026 \001(\002\022\020\n\010galSpeed\030\027 \001(\005\022\021\n\tdefog"
  "Mode\030\030 \001(\t\022\032\n\022defogAutoCondition\030\031 \001(\t\022\026"
  "\n\016defogAutoValue\030\032 \001(\002\022J\n\013defogTiming\030\033 "
  "\003(\01325.com.caspe.devicemanagement.util.Sy"
  "sParam.DefogTiming\022\022\n\nheaterMode\030\034 \001(\t\022L"
  "\n\014heaterTiming\030\035 \003(\01326.com.caspe.devicem"
  "anagement.util.SysParam.HeaterTiming\022\025\n\r"
  "virtualGpsLon\030\036 \001(\002\022\025\n\rvirtualGpsLat\030\037 \001"
  "(\002\022\022\n\ndefogHeat1\030  \001(\010\022\022\n\ndefogHeat2\030! \001"
  "(\010\022\022\n\ndefogHeat3\030\" \001(\010\032)\n\013DefogTiming\022\r\n"
  "\005start\030\001 \001(\t\022\013\n\003end\030\002 \001(\t\032*\n\014HeaterTimin"
  "g\022\r\n\005start\030\001 \001(\t\022\013\n\003end\030\002 \001(\t\"\310\006\n\010SendDa"
  "ta\022\020\n\010seriaNum\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006ac"
  "tion\030\003 \001(\t\022\017\n\007success\030\004 \001(\t\022\017\n\007message\030\005"
  " \001(\t\022\016\n\006snCode\030\006 \001(\t\022\016\n\006userId\030\007 \001(\t\0227\n\005"
  "ready\030< \001(\0132&.com.caspe.devicemanagement"
  ".util.ReadyH\000\022\?\n\tdetailLog\030= \001(\0132*.com.c"
  "aspe.devicemanagement.util.DetailLogH\000\022;"
  "\n\007collect\030> \001(\0132(.com.caspe.devicemanage"
  "ment.util.CollectH\000\022E\n\014collectReply\030\? \001("
  "\0132-.com.caspe.devicemanagement.util.Coll"
  "ectReplyH\000\022@\n\007suspend\030@ \001(\0132-.com.caspe."
  "devicemanagement.util.SuspendReplyH\000\022K\n\017"
  "collectComplete\030A \001(\01320.com.caspe.device"
  "management.util.CollectCompleteH\000\022E\n\014sta"
  "tusReport\030B \001(\0132-.com.caspe.devicemanage"
  "ment.util.StatusReportH\000\0223\n\003alg\030C \001(\0132$."
  "com.caspe.devicemanagement.util.AlgH\000\022\?\n"
  "\talarmList\030D \001(\0132*.com.caspe.devicemanag"
  "ement.util.AlarmListH\000\022=\n\010sysParam\030E \001(\013"
  "2).com.caspe.devicemanagement.util.SysPa"
  "ramH\000\0229\n\006signal\030F \001(\0132\'.com.caspe.device"
  "management.util.SignalH\000B\006\n\004dataB\004B\002Sdb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SendData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SendData_2eproto_sccs[20] = {
  &scc_info_AlarmList_SendData_2eproto.base,
  &scc_info_AlarmList_Alarm_SendData_2eproto.base,
  &scc_info_Alg_SendData_2eproto.base,
  &scc_info_Collect_SendData_2eproto.base,
  &scc_info_Collect_PartList_SendData_2eproto.base,
  &scc_info_Collect_StopCondition_SendData_2eproto.base,
  &scc_info_CollectComplete_SendData_2eproto.base,
  &scc_info_CollectReply_SendData_2eproto.base,
  &scc_info_DetailLog_SendData_2eproto.base,
  &scc_info_ProcessInfo_SendData_2eproto.base,
  &scc_info_Ready_SendData_2eproto.base,
  &scc_info_SendData_SendData_2eproto.base,
  &scc_info_Signal_SendData_2eproto.base,
  &scc_info_Signal_Channel_SendData_2eproto.base,
  &scc_info_StatusReport_SendData_2eproto.base,
  &scc_info_StatusReport_Status_SendData_2eproto.base,
  &scc_info_SuspendReply_SendData_2eproto.base,
  &scc_info_SysParam_SendData_2eproto.base,
  &scc_info_SysParam_DefogTiming_SendData_2eproto.base,
  &scc_info_SysParam_HeaterTiming_SendData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SendData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SendData_2eproto = {
  false, false, descriptor_table_protodef_SendData_2eproto, "SendData.proto", 4046,
  &descriptor_table_SendData_2eproto_once, descriptor_table_SendData_2eproto_sccs, descriptor_table_SendData_2eproto_deps, 20, 0,
  schemas, file_default_instances, TableStruct_SendData_2eproto::offsets,
  file_level_metadata_SendData_2eproto, 20, file_level_enum_descriptors_SendData_2eproto, file_level_service_descriptors_SendData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SendData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SendData_2eproto)), true);
namespace com {
namespace caspe {
namespace devicemanagement {
namespace util {

// ===================================================================

void Ready::InitAsDefaultInstance() {
}
class Ready::_Internal {
 public:
};

Ready::Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.Ready)
}
Ready::Ready(const Ready& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currentmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currentmode().empty()) {
    currentmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_currentmode(),
      GetArena());
  }
  ::memcpy(&lon_, &from.lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.Ready)
}

void Ready::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ready_SendData_2eproto.base);
  currentmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
}

Ready::~Ready() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.Ready)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ready::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  currentmode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ready::ArenaDtor(void* object) {
  Ready* _this = reinterpret_cast< Ready* >(object);
  (void)_this;
}
void Ready::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ready::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ready& Ready::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ready_SendData_2eproto.base);
  return *internal_default_instance();
}


void Ready::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.Ready)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currentmode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ready::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currentMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currentmode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Ready.currentMode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ready::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.Ready)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currentMode = 1;
  if (this->currentmode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currentmode().data(), static_cast<int>(this->_internal_currentmode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Ready.currentMode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currentmode(), target);
  }

  // float lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lon(), target);
  }

  // float lat = 3;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.Ready)
  return target;
}

size_t Ready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.Ready)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currentMode = 1;
  if (this->currentmode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentmode());
  }

  // float lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 4;
  }

  // float lat = 3;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ready::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.Ready)
  GOOGLE_DCHECK_NE(&from, this);
  const Ready* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ready>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.Ready)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.Ready)
    MergeFrom(*source);
  }
}

void Ready::MergeFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.Ready)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentmode().size() > 0) {
    _internal_set_currentmode(from._internal_currentmode());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
}

void Ready::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ready::CopyFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ready::IsInitialized() const {
  return true;
}

void Ready::InternalSwap(Ready* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  currentmode_.Swap(&other->currentmode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ready, lat_)
      + sizeof(Ready::lat_)
      - PROTOBUF_FIELD_OFFSET(Ready, lon_)>(
          reinterpret_cast<char*>(&lon_),
          reinterpret_cast<char*>(&other->lon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ready::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailLog::InitAsDefaultInstance() {
}
class DetailLog::_Internal {
 public:
};

DetailLog::DetailLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.DetailLog)
}
DetailLog::DetailLog(const DetailLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  logcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logcontent().empty()) {
    logcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logcontent(),
      GetArena());
  }
  createtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createtime().empty()) {
    createtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_createtime(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.DetailLog)
}

void DetailLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailLog_SendData_2eproto.base);
  logcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DetailLog::~DetailLog() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.DetailLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  logcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetailLog::ArenaDtor(void* object) {
  DetailLog* _this = reinterpret_cast< DetailLog* >(object);
  (void)_this;
}
void DetailLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailLog& DetailLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailLog_SendData_2eproto.base);
  return *internal_default_instance();
}


void DetailLog::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.DetailLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logcontent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  createtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string logContent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_logcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.DetailLog.logContent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_createtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.DetailLog.createTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.DetailLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string logContent = 1;
  if (this->logcontent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logcontent().data(), static_cast<int>(this->_internal_logcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.DetailLog.logContent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_logcontent(), target);
  }

  // string createTime = 2;
  if (this->createtime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createtime().data(), static_cast<int>(this->_internal_createtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.DetailLog.createTime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.DetailLog)
  return target;
}

size_t DetailLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.DetailLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logContent = 1;
  if (this->logcontent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logcontent());
  }

  // string createTime = 2;
  if (this->createtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.DetailLog)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.DetailLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.DetailLog)
    MergeFrom(*source);
  }
}

void DetailLog::MergeFrom(const DetailLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.DetailLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logcontent().size() > 0) {
    _internal_set_logcontent(from._internal_logcontent());
  }
  if (from.createtime().size() > 0) {
    _internal_set_createtime(from._internal_createtime());
  }
}

void DetailLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.DetailLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailLog::CopyFrom(const DetailLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.DetailLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailLog::IsInitialized() const {
  return true;
}

void DetailLog::InternalSwap(DetailLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logcontent_.Swap(&other->logcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  createtime_.Swap(&other->createtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Collect_StopCondition::InitAsDefaultInstance() {
}
class Collect_StopCondition::_Internal {
 public:
};

Collect_StopCondition::Collect_StopCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.Collect.StopCondition)
}
Collect_StopCondition::Collect_StopCondition(const Collect_StopCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  counts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_counts().empty()) {
    counts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_counts(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.Collect.StopCondition)
}

void Collect_StopCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collect_StopCondition_SendData_2eproto.base);
  counts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Collect_StopCondition::~Collect_StopCondition() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.Collect.StopCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Collect_StopCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  counts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Collect_StopCondition::ArenaDtor(void* object) {
  Collect_StopCondition* _this = reinterpret_cast< Collect_StopCondition* >(object);
  (void)_this;
}
void Collect_StopCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collect_StopCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collect_StopCondition& Collect_StopCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collect_StopCondition_SendData_2eproto.base);
  return *internal_default_instance();
}


void Collect_StopCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.Collect.StopCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collect_StopCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_counts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.StopCondition.counts"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collect_StopCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.Collect.StopCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string counts = 1;
  if (this->counts().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_counts().data(), static_cast<int>(this->_internal_counts().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.StopCondition.counts");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_counts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.Collect.StopCondition)
  return target;
}

size_t Collect_StopCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.Collect.StopCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string counts = 1;
  if (this->counts().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_counts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collect_StopCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.Collect.StopCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const Collect_StopCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collect_StopCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.Collect.StopCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.Collect.StopCondition)
    MergeFrom(*source);
  }
}

void Collect_StopCondition::MergeFrom(const Collect_StopCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.Collect.StopCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.counts().size() > 0) {
    _internal_set_counts(from._internal_counts());
  }
}

void Collect_StopCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.Collect.StopCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collect_StopCondition::CopyFrom(const Collect_StopCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.Collect.StopCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collect_StopCondition::IsInitialized() const {
  return true;
}

void Collect_StopCondition::InternalSwap(Collect_StopCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  counts_.Swap(&other->counts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Collect_StopCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Collect_PartList::InitAsDefaultInstance() {
  ::com::caspe::devicemanagement::util::_Collect_PartList_default_instance_._instance.get_mutable()->stopcondtion_ = const_cast< ::com::caspe::devicemanagement::util::Collect_StopCondition*>(
      ::com::caspe::devicemanagement::util::Collect_StopCondition::internal_default_instance());
}
class Collect_PartList::_Internal {
 public:
  static const ::com::caspe::devicemanagement::util::Collect_StopCondition& stopcondtion(const Collect_PartList* msg);
};

const ::com::caspe::devicemanagement::util::Collect_StopCondition&
Collect_PartList::_Internal::stopcondtion(const Collect_PartList* msg) {
  return *msg->stopcondtion_;
}
Collect_PartList::Collect_PartList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.Collect.PartList)
}
Collect_PartList::Collect_PartList(const Collect_PartList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hangle().empty()) {
    hangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hangle(),
      GetArena());
  }
  vangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vangle().empty()) {
    vangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vangle(),
      GetArena());
  }
  sangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sangle().empty()) {
    sangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sangle(),
      GetArena());
  }
  eangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eangle().empty()) {
    eangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_eangle(),
      GetArena());
  }
  iangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iangle().empty()) {
    iangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iangle(),
      GetArena());
  }
  interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interval().empty()) {
    interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interval(),
      GetArena());
  }
  scanning_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scanning().empty()) {
    scanning_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scanning(),
      GetArena());
  }
  if (from._internal_has_stopcondtion()) {
    stopcondtion_ = new ::com::caspe::devicemanagement::util::Collect_StopCondition(*from.stopcondtion_);
  } else {
    stopcondtion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.Collect.PartList)
}

void Collect_PartList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collect_PartList_SendData_2eproto.base);
  hangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scanning_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stopcondtion_ = nullptr;
}

Collect_PartList::~Collect_PartList() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.Collect.PartList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Collect_PartList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scanning_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stopcondtion_;
}

void Collect_PartList::ArenaDtor(void* object) {
  Collect_PartList* _this = reinterpret_cast< Collect_PartList* >(object);
  (void)_this;
}
void Collect_PartList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collect_PartList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collect_PartList& Collect_PartList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collect_PartList_SendData_2eproto.base);
  return *internal_default_instance();
}


void Collect_PartList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.Collect.PartList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  eangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interval_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scanning_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && stopcondtion_ != nullptr) {
    delete stopcondtion_;
  }
  stopcondtion_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collect_PartList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hAngle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.PartList.hAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vAngle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.PartList.vAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sAngle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.PartList.sAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string eAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_eangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.PartList.eAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iAngle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_iangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.PartList.iAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_interval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.PartList.interval"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scanning = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_scanning();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.PartList.scanning"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.Collect.StopCondition stopCondtion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopcondtion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collect_PartList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.Collect.PartList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hAngle = 1;
  if (this->hangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hangle().data(), static_cast<int>(this->_internal_hangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.PartList.hAngle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hangle(), target);
  }

  // string vAngle = 2;
  if (this->vangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vangle().data(), static_cast<int>(this->_internal_vangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.PartList.vAngle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vangle(), target);
  }

  // string sAngle = 3;
  if (this->sangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sangle().data(), static_cast<int>(this->_internal_sangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.PartList.sAngle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sangle(), target);
  }

  // string eAngle = 4;
  if (this->eangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eangle().data(), static_cast<int>(this->_internal_eangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.PartList.eAngle");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_eangle(), target);
  }

  // string iAngle = 5;
  if (this->iangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iangle().data(), static_cast<int>(this->_internal_iangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.PartList.iAngle");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_iangle(), target);
  }

  // string interval = 6;
  if (this->interval().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interval().data(), static_cast<int>(this->_internal_interval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.PartList.interval");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_interval(), target);
  }

  // string scanning = 7;
  if (this->scanning().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scanning().data(), static_cast<int>(this->_internal_scanning().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.PartList.scanning");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_scanning(), target);
  }

  // .com.caspe.devicemanagement.util.Collect.StopCondition stopCondtion = 8;
  if (this->has_stopcondtion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stopcondtion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.Collect.PartList)
  return target;
}

size_t Collect_PartList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.Collect.PartList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hAngle = 1;
  if (this->hangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hangle());
  }

  // string vAngle = 2;
  if (this->vangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vangle());
  }

  // string sAngle = 3;
  if (this->sangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sangle());
  }

  // string eAngle = 4;
  if (this->eangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eangle());
  }

  // string iAngle = 5;
  if (this->iangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iangle());
  }

  // string interval = 6;
  if (this->interval().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interval());
  }

  // string scanning = 7;
  if (this->scanning().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scanning());
  }

  // .com.caspe.devicemanagement.util.Collect.StopCondition stopCondtion = 8;
  if (this->has_stopcondtion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stopcondtion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collect_PartList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.Collect.PartList)
  GOOGLE_DCHECK_NE(&from, this);
  const Collect_PartList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collect_PartList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.Collect.PartList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.Collect.PartList)
    MergeFrom(*source);
  }
}

void Collect_PartList::MergeFrom(const Collect_PartList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.Collect.PartList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hangle().size() > 0) {
    _internal_set_hangle(from._internal_hangle());
  }
  if (from.vangle().size() > 0) {
    _internal_set_vangle(from._internal_vangle());
  }
  if (from.sangle().size() > 0) {
    _internal_set_sangle(from._internal_sangle());
  }
  if (from.eangle().size() > 0) {
    _internal_set_eangle(from._internal_eangle());
  }
  if (from.iangle().size() > 0) {
    _internal_set_iangle(from._internal_iangle());
  }
  if (from.interval().size() > 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from.scanning().size() > 0) {
    _internal_set_scanning(from._internal_scanning());
  }
  if (from.has_stopcondtion()) {
    _internal_mutable_stopcondtion()->::com::caspe::devicemanagement::util::Collect_StopCondition::MergeFrom(from._internal_stopcondtion());
  }
}

void Collect_PartList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.Collect.PartList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collect_PartList::CopyFrom(const Collect_PartList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.Collect.PartList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collect_PartList::IsInitialized() const {
  return true;
}

void Collect_PartList::InternalSwap(Collect_PartList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hangle_.Swap(&other->hangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vangle_.Swap(&other->vangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sangle_.Swap(&other->sangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  eangle_.Swap(&other->eangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iangle_.Swap(&other->iangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interval_.Swap(&other->interval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scanning_.Swap(&other->scanning_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stopcondtion_, other->stopcondtion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Collect_PartList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Collect::InitAsDefaultInstance() {
  ::com::caspe::devicemanagement::util::_Collect_default_instance_._instance.get_mutable()->stopcondition_ = const_cast< ::com::caspe::devicemanagement::util::Collect_StopCondition*>(
      ::com::caspe::devicemanagement::util::Collect_StopCondition::internal_default_instance());
}
class Collect::_Internal {
 public:
  static const ::com::caspe::devicemanagement::util::Collect_StopCondition& stopcondition(const Collect* msg);
};

const ::com::caspe::devicemanagement::util::Collect_StopCondition&
Collect::_Internal::stopcondition(const Collect* msg) {
  return *msg->stopcondition_;
}
Collect::Collect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partlists_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.Collect)
}
Collect::Collect(const Collect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partlists_(from.partlists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collectmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collectmode().empty()) {
    collectmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collectmode(),
      GetArena());
  }
  northangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_northangle().empty()) {
    northangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_northangle(),
      GetArena());
  }
  if (from._internal_has_stopcondition()) {
    stopcondition_ = new ::com::caspe::devicemanagement::util::Collect_StopCondition(*from.stopcondition_);
  } else {
    stopcondition_ = nullptr;
  }
  ::memcpy(&pulsecount_, &from.pulsecount_,
    static_cast<size_t>(reinterpret_cast<char*>(&pointdistance_) -
    reinterpret_cast<char*>(&pulsecount_)) + sizeof(pointdistance_));
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.Collect)
}

void Collect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collect_SendData_2eproto.base);
  collectmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  northangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stopcondition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pointdistance_) -
      reinterpret_cast<char*>(&stopcondition_)) + sizeof(pointdistance_));
}

Collect::~Collect() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.Collect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Collect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collectmode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  northangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stopcondition_;
}

void Collect::ArenaDtor(void* object) {
  Collect* _this = reinterpret_cast< Collect* >(object);
  (void)_this;
}
void Collect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collect& Collect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collect_SendData_2eproto.base);
  return *internal_default_instance();
}


void Collect::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.Collect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partlists_.Clear();
  collectmode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  northangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && stopcondition_ != nullptr) {
    delete stopcondition_;
  }
  stopcondition_ = nullptr;
  ::memset(&pulsecount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pointdistance_) -
      reinterpret_cast<char*>(&pulsecount_)) + sizeof(pointdistance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collectMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collectmode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.collectMode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string northAngle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_northangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Collect.northAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pulseCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pulsecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pointDistance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          pointdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.Collect.StopCondition stopCondition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.caspe.devicemanagement.util.Collect.PartList partLists = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partlists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.Collect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collectMode = 1;
  if (this->collectmode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectmode().data(), static_cast<int>(this->_internal_collectmode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.collectMode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collectmode(), target);
  }

  // string northAngle = 2;
  if (this->northangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_northangle().data(), static_cast<int>(this->_internal_northangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Collect.northAngle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_northangle(), target);
  }

  // int32 pulseCount = 3;
  if (this->pulsecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pulsecount(), target);
  }

  // float pointDistance = 4;
  if (!(this->pointdistance() <= 0 && this->pointdistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pointdistance(), target);
  }

  // .com.caspe.devicemanagement.util.Collect.StopCondition stopCondition = 5;
  if (this->has_stopcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stopcondition(this), target, stream);
  }

  // repeated .com.caspe.devicemanagement.util.Collect.PartList partLists = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partlists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_partlists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.Collect)
  return target;
}

size_t Collect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.Collect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.caspe.devicemanagement.util.Collect.PartList partLists = 6;
  total_size += 1UL * this->_internal_partlists_size();
  for (const auto& msg : this->partlists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string collectMode = 1;
  if (this->collectmode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectmode());
  }

  // string northAngle = 2;
  if (this->northangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_northangle());
  }

  // .com.caspe.devicemanagement.util.Collect.StopCondition stopCondition = 5;
  if (this->has_stopcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stopcondition_);
  }

  // int32 pulseCount = 3;
  if (this->pulsecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pulsecount());
  }

  // float pointDistance = 4;
  if (!(this->pointdistance() <= 0 && this->pointdistance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.Collect)
  GOOGLE_DCHECK_NE(&from, this);
  const Collect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.Collect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.Collect)
    MergeFrom(*source);
  }
}

void Collect::MergeFrom(const Collect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.Collect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partlists_.MergeFrom(from.partlists_);
  if (from.collectmode().size() > 0) {
    _internal_set_collectmode(from._internal_collectmode());
  }
  if (from.northangle().size() > 0) {
    _internal_set_northangle(from._internal_northangle());
  }
  if (from.has_stopcondition()) {
    _internal_mutable_stopcondition()->::com::caspe::devicemanagement::util::Collect_StopCondition::MergeFrom(from._internal_stopcondition());
  }
  if (from.pulsecount() != 0) {
    _internal_set_pulsecount(from._internal_pulsecount());
  }
  if (!(from.pointdistance() <= 0 && from.pointdistance() >= 0)) {
    _internal_set_pointdistance(from._internal_pointdistance());
  }
}

void Collect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.Collect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collect::CopyFrom(const Collect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.Collect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collect::IsInitialized() const {
  return true;
}

void Collect::InternalSwap(Collect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partlists_.InternalSwap(&other->partlists_);
  collectmode_.Swap(&other->collectmode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  northangle_.Swap(&other->northangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collect, pointdistance_)
      + sizeof(Collect::pointdistance_)
      - PROTOBUF_FIELD_OFFSET(Collect, stopcondition_)>(
          reinterpret_cast<char*>(&stopcondition_),
          reinterpret_cast<char*>(&other->stopcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessInfo::InitAsDefaultInstance() {
}
class ProcessInfo::_Internal {
 public:
};

ProcessInfo::ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.ProcessInfo)
}
ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode(),
      GetArena());
  }
  processid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_processid().empty()) {
    processid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_processid(),
      GetArena());
  }
  sangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sangle().empty()) {
    sangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sangle(),
      GetArena());
  }
  eangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eangle().empty()) {
    eangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_eangle(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.ProcessInfo)
}

void ProcessInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessInfo_SendData_2eproto.base);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProcessInfo::~ProcessInfo() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.ProcessInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessInfo::ArenaDtor(void* object) {
  ProcessInfo* _this = reinterpret_cast< ProcessInfo* >(object);
  (void)_this;
}
void ProcessInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessInfo& ProcessInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessInfo_SendData_2eproto.base);
  return *internal_default_instance();
}


void ProcessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  processid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  eangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.ProcessInfo.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string processId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_processid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.ProcessInfo.processId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sAngle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.ProcessInfo.sAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string eAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_eangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.ProcessInfo.eAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.ProcessInfo.mode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mode(), target);
  }

  // string processId = 2;
  if (this->processid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processid().data(), static_cast<int>(this->_internal_processid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.ProcessInfo.processId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processid(), target);
  }

  // string sAngle = 3;
  if (this->sangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sangle().data(), static_cast<int>(this->_internal_sangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.ProcessInfo.sAngle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sangle(), target);
  }

  // string eAngle = 4;
  if (this->eangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eangle().data(), static_cast<int>(this->_internal_eangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.ProcessInfo.eAngle");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_eangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.ProcessInfo)
  return target;
}

size_t ProcessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.ProcessInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mode = 1;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // string processId = 2;
  if (this->processid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processid());
  }

  // string sAngle = 3;
  if (this->sangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sangle());
  }

  // string eAngle = 4;
  if (this->eangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eangle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.ProcessInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.ProcessInfo)
    MergeFrom(*source);
  }
}

void ProcessInfo::MergeFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.processid().size() > 0) {
    _internal_set_processid(from._internal_processid());
  }
  if (from.sangle().size() > 0) {
    _internal_set_sangle(from._internal_sangle());
  }
  if (from.eangle().size() > 0) {
    _internal_set_eangle(from._internal_eangle());
  }
}

void ProcessInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {
  return true;
}

void ProcessInfo::InternalSwap(ProcessInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  processid_.Swap(&other->processid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sangle_.Swap(&other->sangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  eangle_.Swap(&other->eangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectReply::InitAsDefaultInstance() {
  ::com::caspe::devicemanagement::util::_CollectReply_default_instance_._instance.get_mutable()->process_ = const_cast< ::com::caspe::devicemanagement::util::ProcessInfo*>(
      ::com::caspe::devicemanagement::util::ProcessInfo::internal_default_instance());
}
class CollectReply::_Internal {
 public:
  static const ::com::caspe::devicemanagement::util::ProcessInfo& process(const CollectReply* msg);
};

const ::com::caspe::devicemanagement::util::ProcessInfo&
CollectReply::_Internal::process(const CollectReply* msg) {
  return *msg->process_;
}
CollectReply::CollectReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.CollectReply)
}
CollectReply::CollectReply(const CollectReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_process()) {
    process_ = new ::com::caspe::devicemanagement::util::ProcessInfo(*from.process_);
  } else {
    process_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.CollectReply)
}

void CollectReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectReply_SendData_2eproto.base);
  process_ = nullptr;
}

CollectReply::~CollectReply() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.CollectReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CollectReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete process_;
}

void CollectReply::ArenaDtor(void* object) {
  CollectReply* _this = reinterpret_cast< CollectReply* >(object);
  (void)_this;
}
void CollectReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectReply& CollectReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectReply_SendData_2eproto.base);
  return *internal_default_instance();
}


void CollectReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.CollectReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.caspe.devicemanagement.util.ProcessInfo process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.CollectReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.caspe.devicemanagement.util.ProcessInfo process = 1;
  if (this->has_process()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::process(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.CollectReply)
  return target;
}

size_t CollectReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.CollectReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.caspe.devicemanagement.util.ProcessInfo process = 1;
  if (this->has_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.CollectReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.CollectReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.CollectReply)
    MergeFrom(*source);
  }
}

void CollectReply::MergeFrom(const CollectReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.CollectReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_process()) {
    _internal_mutable_process()->::com::caspe::devicemanagement::util::ProcessInfo::MergeFrom(from._internal_process());
  }
}

void CollectReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.CollectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectReply::CopyFrom(const CollectReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.CollectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectReply::IsInitialized() const {
  return true;
}

void CollectReply::InternalSwap(CollectReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(process_, other->process_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SuspendReply::InitAsDefaultInstance() {
}
class SuspendReply::_Internal {
 public:
};

SuspendReply::SuspendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.SuspendReply)
}
SuspendReply::SuspendReply(const SuspendReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hangle().empty()) {
    hangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hangle(),
      GetArena());
  }
  vangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vangle().empty()) {
    vangle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vangle(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.SuspendReply)
}

void SuspendReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SuspendReply_SendData_2eproto.base);
  hangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vangle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SuspendReply::~SuspendReply() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.SuspendReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SuspendReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vangle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SuspendReply::ArenaDtor(void* object) {
  SuspendReply* _this = reinterpret_cast< SuspendReply* >(object);
  (void)_this;
}
void SuspendReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuspendReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuspendReply& SuspendReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuspendReply_SendData_2eproto.base);
  return *internal_default_instance();
}


void SuspendReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.SuspendReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vangle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuspendReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hAngle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SuspendReply.hAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vangle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SuspendReply.vAngle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuspendReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.SuspendReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hAngle = 3;
  if (this->hangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hangle().data(), static_cast<int>(this->_internal_hangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SuspendReply.hAngle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hangle(), target);
  }

  // string vAngle = 4;
  if (this->vangle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vangle().data(), static_cast<int>(this->_internal_vangle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SuspendReply.vAngle");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.SuspendReply)
  return target;
}

size_t SuspendReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.SuspendReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hAngle = 3;
  if (this->hangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hangle());
  }

  // string vAngle = 4;
  if (this->vangle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vangle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuspendReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.SuspendReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SuspendReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuspendReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.SuspendReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.SuspendReply)
    MergeFrom(*source);
  }
}

void SuspendReply::MergeFrom(const SuspendReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.SuspendReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hangle().size() > 0) {
    _internal_set_hangle(from._internal_hangle());
  }
  if (from.vangle().size() > 0) {
    _internal_set_vangle(from._internal_vangle());
  }
}

void SuspendReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.SuspendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuspendReply::CopyFrom(const SuspendReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.SuspendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuspendReply::IsInitialized() const {
  return true;
}

void SuspendReply::InternalSwap(SuspendReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hangle_.Swap(&other->hangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vangle_.Swap(&other->vangle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SuspendReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectComplete::InitAsDefaultInstance() {
  ::com::caspe::devicemanagement::util::_CollectComplete_default_instance_._instance.get_mutable()->process_ = const_cast< ::com::caspe::devicemanagement::util::ProcessInfo*>(
      ::com::caspe::devicemanagement::util::ProcessInfo::internal_default_instance());
}
class CollectComplete::_Internal {
 public:
  static const ::com::caspe::devicemanagement::util::ProcessInfo& process(const CollectComplete* msg);
};

const ::com::caspe::devicemanagement::util::ProcessInfo&
CollectComplete::_Internal::process(const CollectComplete* msg) {
  return *msg->process_;
}
CollectComplete::CollectComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.CollectComplete)
}
CollectComplete::CollectComplete(const CollectComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  if (from._internal_has_process()) {
    process_ = new ::com::caspe::devicemanagement::util::ProcessInfo(*from.process_);
  } else {
    process_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.CollectComplete)
}

void CollectComplete::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectComplete_SendData_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_ = nullptr;
}

CollectComplete::~CollectComplete() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.CollectComplete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CollectComplete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete process_;
}

void CollectComplete::ArenaDtor(void* object) {
  CollectComplete* _this = reinterpret_cast< CollectComplete* >(object);
  (void)_this;
}
void CollectComplete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectComplete& CollectComplete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectComplete_SendData_2eproto.base);
  return *internal_default_instance();
}


void CollectComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.CollectComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && process_ != nullptr) {
    delete process_;
  }
  process_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectComplete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.caspe.devicemanagement.util.ProcessInfo process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.CollectComplete.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectComplete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.CollectComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.caspe.devicemanagement.util.ProcessInfo process = 1;
  if (this->has_process()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::process(this), target, stream);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.CollectComplete.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.CollectComplete)
  return target;
}

size_t CollectComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.CollectComplete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .com.caspe.devicemanagement.util.ProcessInfo process = 1;
  if (this->has_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectComplete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.CollectComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectComplete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.CollectComplete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.CollectComplete)
    MergeFrom(*source);
  }
}

void CollectComplete::MergeFrom(const CollectComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.CollectComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.has_process()) {
    _internal_mutable_process()->::com::caspe::devicemanagement::util::ProcessInfo::MergeFrom(from._internal_process());
  }
}

void CollectComplete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.CollectComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectComplete::CopyFrom(const CollectComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.CollectComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectComplete::IsInitialized() const {
  return true;
}

void CollectComplete::InternalSwap(CollectComplete* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(process_, other->process_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectComplete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusReport_Status::InitAsDefaultInstance() {
}
class StatusReport_Status::_Internal {
 public:
};

StatusReport_Status::StatusReport_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.StatusReport.Status)
}
StatusReport_Status::StatusReport_Status(const StatusReport_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.StatusReport.Status)
}

void StatusReport_Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusReport_Status_SendData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StatusReport_Status::~StatusReport_Status() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.StatusReport.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusReport_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusReport_Status::ArenaDtor(void* object) {
  StatusReport_Status* _this = reinterpret_cast< StatusReport_Status* >(object);
  (void)_this;
}
void StatusReport_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusReport_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusReport_Status& StatusReport_Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusReport_Status_SendData_2eproto.base);
  return *internal_default_instance();
}


void StatusReport_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.StatusReport.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusReport_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.StatusReport.Status.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.StatusReport.Status.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.StatusReport.Status.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusReport_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.StatusReport.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.StatusReport.Status.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.StatusReport.Status.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.StatusReport.Status.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.StatusReport.Status)
  return target;
}

size_t StatusReport_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.StatusReport.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusReport_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.StatusReport.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusReport_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusReport_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.StatusReport.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.StatusReport.Status)
    MergeFrom(*source);
  }
}

void StatusReport_Status::MergeFrom(const StatusReport_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.StatusReport.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
}

void StatusReport_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.StatusReport.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusReport_Status::CopyFrom(const StatusReport_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.StatusReport.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusReport_Status::IsInitialized() const {
  return true;
}

void StatusReport_Status::InternalSwap(StatusReport_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusReport_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusReport::InitAsDefaultInstance() {
}
class StatusReport::_Internal {
 public:
};

StatusReport::StatusReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.StatusReport)
}
StatusReport::StatusReport(const StatusReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      status_(from.status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.StatusReport)
}

void StatusReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusReport_SendData_2eproto.base);
}

StatusReport::~StatusReport() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.StatusReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusReport::ArenaDtor(void* object) {
  StatusReport* _this = reinterpret_cast< StatusReport* >(object);
  (void)_this;
}
void StatusReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusReport& StatusReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusReport_SendData_2eproto.base);
  return *internal_default_instance();
}


void StatusReport::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.StatusReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.caspe.devicemanagement.util.StatusReport.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.StatusReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.caspe.devicemanagement.util.StatusReport.Status status = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.StatusReport)
  return target;
}

size_t StatusReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.StatusReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.caspe.devicemanagement.util.StatusReport.Status status = 1;
  total_size += 1UL * this->_internal_status_size();
  for (const auto& msg : this->status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.StatusReport)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.StatusReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.StatusReport)
    MergeFrom(*source);
  }
}

void StatusReport::MergeFrom(const StatusReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.StatusReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
}

void StatusReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.StatusReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusReport::CopyFrom(const StatusReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.StatusReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusReport::IsInitialized() const {
  return true;
}

void StatusReport::InternalSwap(StatusReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.InternalSwap(&other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Alg::InitAsDefaultInstance() {
}
class Alg::_Internal {
 public:
};

Alg::Alg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.Alg)
}
Alg::Alg(const Alg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extinalgorithmtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extinalgorithmtype().empty()) {
    extinalgorithmtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_extinalgorithmtype(),
      GetArena());
  }
  fixcloudyextin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fixcloudyextin().empty()) {
    fixcloudyextin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fixcloudyextin(),
      GetArena());
  }
  fixreferheight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fixreferheight().empty()) {
    fixreferheight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fixreferheight(),
      GetArena());
  }
  denoisingextin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_denoisingextin().empty()) {
    denoisingextin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_denoisingextin(),
      GetArena());
  }
  signalsplicing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signalsplicing().empty()) {
    signalsplicing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signalsplicing(),
      GetArena());
  }
  denoising_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_denoising().empty()) {
    denoising_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_denoising(),
      GetArena());
  }
  echodefault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_echodefault().empty()) {
    echodefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_echodefault(),
      GetArena());
  }
  smooth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_smooth().empty()) {
    smooth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_smooth(),
      GetArena());
  }
  visibilitydefault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_visibilitydefault().empty()) {
    visibilitydefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_visibilitydefault(),
      GetArena());
  }
  visibilityoutcloud_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_visibilityoutcloud().empty()) {
    visibilityoutcloud_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_visibilityoutcloud(),
      GetArena());
  }
  aoddefault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aoddefault().empty()) {
    aoddefault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aoddefault(),
      GetArena());
  }
  aodoutcloud_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aodoutcloud().empty()) {
    aodoutcloud_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aodoutcloud(),
      GetArena());
  }
  overlapcorrect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_overlapcorrect().empty()) {
    overlapcorrect_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_overlapcorrect(),
      GetArena());
  }
  ::memcpy(&cloudextthresh_, &from.cloudextthresh_,
    static_cast<size_t>(reinterpret_cast<char*>(&emptydistance_) -
    reinterpret_cast<char*>(&cloudextthresh_)) + sizeof(emptydistance_));
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.Alg)
}

void Alg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Alg_SendData_2eproto.base);
  extinalgorithmtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixcloudyextin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixreferheight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  denoisingextin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signalsplicing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  denoising_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  echodefault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smooth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visibilitydefault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visibilityoutcloud_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aoddefault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aodoutcloud_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overlapcorrect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cloudextthresh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emptydistance_) -
      reinterpret_cast<char*>(&cloudextthresh_)) + sizeof(emptydistance_));
}

Alg::~Alg() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.Alg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Alg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  extinalgorithmtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixcloudyextin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixreferheight_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  denoisingextin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signalsplicing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  denoising_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  echodefault_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smooth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visibilitydefault_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visibilityoutcloud_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aoddefault_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aodoutcloud_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overlapcorrect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Alg::ArenaDtor(void* object) {
  Alg* _this = reinterpret_cast< Alg* >(object);
  (void)_this;
}
void Alg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Alg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alg& Alg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Alg_SendData_2eproto.base);
  return *internal_default_instance();
}


void Alg::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.Alg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extinalgorithmtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fixcloudyextin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fixreferheight_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  denoisingextin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signalsplicing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  denoising_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  echodefault_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  smooth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visibilitydefault_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visibilityoutcloud_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aoddefault_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aodoutcloud_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  overlapcorrect_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cloudextthresh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emptydistance_) -
      reinterpret_cast<char*>(&cloudextthresh_)) + sizeof(emptydistance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string extinAlgorithmType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_extinalgorithmtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.extinAlgorithmType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fixCloudyExtin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fixcloudyextin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.fixCloudyExtin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cloudExtThresh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          cloudextthresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string fixReferHeight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fixreferheight();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.fixReferHeight"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string denoisingExtin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_denoisingextin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.denoisingExtin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signalSplicing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_signalsplicing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.signalSplicing"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float snrThreshExtin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          snrthreshextin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float refHeight532 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          refheight532_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float depolFactor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          depolfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string denoising = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_denoising();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.denoising"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float snrThreshDepol = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          snrthreshdepol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string echoDefault = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_echodefault();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.echoDefault"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float echoStart = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          echostart_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float echoEnd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          echoend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string smooth = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_smooth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.smooth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 smoothTimes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          smoothtimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 windowLength = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          windowlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pm10RatioA = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          pm10ratioa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pm10RatioB = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          pm10ratiob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pm10RatioC = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          pm10ratioc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pm25RatioA = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          pm25ratioa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pm25RatioB = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          pm25ratiob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pm25RatioC = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          pm25ratioc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string visibilityDefault = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_visibilitydefault();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.visibilityDefault"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string visibilityOutCloud = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_visibilityoutcloud();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.visibilityOutCloud"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float visibilityStartH = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          visibilitystarth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float visibilityEndH = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          visibilityendh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string aodDefault = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_aoddefault();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.aodDefault"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aodOutCloud = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_aodoutcloud();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.aodOutCloud"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float aodStartLimit = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          aodstartlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float aodEndLimit = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          aodendlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string overlapCorrect = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_overlapcorrect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Alg.overlapCorrect"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float extinCoea = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          extincoea_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float extinCoeb = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          extincoeb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 removePoint = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          removepoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float emptyDistance = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          emptydistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Alg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.Alg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string extinAlgorithmType = 1;
  if (this->extinalgorithmtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extinalgorithmtype().data(), static_cast<int>(this->_internal_extinalgorithmtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.extinAlgorithmType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_extinalgorithmtype(), target);
  }

  // string fixCloudyExtin = 2;
  if (this->fixcloudyextin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixcloudyextin().data(), static_cast<int>(this->_internal_fixcloudyextin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.fixCloudyExtin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fixcloudyextin(), target);
  }

  // float cloudExtThresh = 3;
  if (!(this->cloudextthresh() <= 0 && this->cloudextthresh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cloudextthresh(), target);
  }

  // string fixReferHeight = 4;
  if (this->fixreferheight().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixreferheight().data(), static_cast<int>(this->_internal_fixreferheight().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.fixReferHeight");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fixreferheight(), target);
  }

  // string denoisingExtin = 5;
  if (this->denoisingextin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_denoisingextin().data(), static_cast<int>(this->_internal_denoisingextin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.denoisingExtin");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_denoisingextin(), target);
  }

  // string signalSplicing = 6;
  if (this->signalsplicing().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signalsplicing().data(), static_cast<int>(this->_internal_signalsplicing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.signalSplicing");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_signalsplicing(), target);
  }

  // float snrThreshExtin = 7;
  if (!(this->snrthreshextin() <= 0 && this->snrthreshextin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_snrthreshextin(), target);
  }

  // float refHeight532 = 8;
  if (!(this->refheight532() <= 0 && this->refheight532() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_refheight532(), target);
  }

  // float depolFactor = 9;
  if (!(this->depolfactor() <= 0 && this->depolfactor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_depolfactor(), target);
  }

  // string denoising = 10;
  if (this->denoising().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_denoising().data(), static_cast<int>(this->_internal_denoising().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.denoising");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_denoising(), target);
  }

  // float snrThreshDepol = 11;
  if (!(this->snrthreshdepol() <= 0 && this->snrthreshdepol() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_snrthreshdepol(), target);
  }

  // string echoDefault = 12;
  if (this->echodefault().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_echodefault().data(), static_cast<int>(this->_internal_echodefault().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.echoDefault");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_echodefault(), target);
  }

  // float echoStart = 13;
  if (!(this->echostart() <= 0 && this->echostart() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_echostart(), target);
  }

  // float echoEnd = 14;
  if (!(this->echoend() <= 0 && this->echoend() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_echoend(), target);
  }

  // string smooth = 15;
  if (this->smooth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smooth().data(), static_cast<int>(this->_internal_smooth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.smooth");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_smooth(), target);
  }

  // int32 smoothTimes = 16;
  if (this->smoothtimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_smoothtimes(), target);
  }

  // int32 windowLength = 17;
  if (this->windowlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_windowlength(), target);
  }

  // float pm10RatioA = 18;
  if (!(this->pm10ratioa() <= 0 && this->pm10ratioa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_pm10ratioa(), target);
  }

  // float pm10RatioB = 19;
  if (!(this->pm10ratiob() <= 0 && this->pm10ratiob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_pm10ratiob(), target);
  }

  // float pm10RatioC = 20;
  if (!(this->pm10ratioc() <= 0 && this->pm10ratioc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_pm10ratioc(), target);
  }

  // float pm25RatioA = 21;
  if (!(this->pm25ratioa() <= 0 && this->pm25ratioa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_pm25ratioa(), target);
  }

  // float pm25RatioB = 22;
  if (!(this->pm25ratiob() <= 0 && this->pm25ratiob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_pm25ratiob(), target);
  }

  // float pm25RatioC = 23;
  if (!(this->pm25ratioc() <= 0 && this->pm25ratioc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_pm25ratioc(), target);
  }

  // string visibilityDefault = 24;
  if (this->visibilitydefault().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visibilitydefault().data(), static_cast<int>(this->_internal_visibilitydefault().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.visibilityDefault");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_visibilitydefault(), target);
  }

  // string visibilityOutCloud = 25;
  if (this->visibilityoutcloud().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visibilityoutcloud().data(), static_cast<int>(this->_internal_visibilityoutcloud().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.visibilityOutCloud");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_visibilityoutcloud(), target);
  }

  // float visibilityStartH = 26;
  if (!(this->visibilitystarth() <= 0 && this->visibilitystarth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_visibilitystarth(), target);
  }

  // float visibilityEndH = 27;
  if (!(this->visibilityendh() <= 0 && this->visibilityendh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_visibilityendh(), target);
  }

  // string aodDefault = 28;
  if (this->aoddefault().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aoddefault().data(), static_cast<int>(this->_internal_aoddefault().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.aodDefault");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_aoddefault(), target);
  }

  // string aodOutCloud = 29;
  if (this->aodoutcloud().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aodoutcloud().data(), static_cast<int>(this->_internal_aodoutcloud().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.aodOutCloud");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_aodoutcloud(), target);
  }

  // float aodStartLimit = 30;
  if (!(this->aodstartlimit() <= 0 && this->aodstartlimit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_aodstartlimit(), target);
  }

  // float aodEndLimit = 31;
  if (!(this->aodendlimit() <= 0 && this->aodendlimit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_aodendlimit(), target);
  }

  // string overlapCorrect = 32;
  if (this->overlapcorrect().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_overlapcorrect().data(), static_cast<int>(this->_internal_overlapcorrect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Alg.overlapCorrect");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_overlapcorrect(), target);
  }

  // float extinCoea = 33;
  if (!(this->extincoea() <= 0 && this->extincoea() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_extincoea(), target);
  }

  // float extinCoeb = 34;
  if (!(this->extincoeb() <= 0 && this->extincoeb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_extincoeb(), target);
  }

  // int32 removePoint = 35;
  if (this->removepoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_removepoint(), target);
  }

  // float emptyDistance = 36;
  if (!(this->emptydistance() <= 0 && this->emptydistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_emptydistance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.Alg)
  return target;
}

size_t Alg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.Alg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extinAlgorithmType = 1;
  if (this->extinalgorithmtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extinalgorithmtype());
  }

  // string fixCloudyExtin = 2;
  if (this->fixcloudyextin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fixcloudyextin());
  }

  // string fixReferHeight = 4;
  if (this->fixreferheight().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fixreferheight());
  }

  // string denoisingExtin = 5;
  if (this->denoisingextin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denoisingextin());
  }

  // string signalSplicing = 6;
  if (this->signalsplicing().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signalsplicing());
  }

  // string denoising = 10;
  if (this->denoising().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denoising());
  }

  // string echoDefault = 12;
  if (this->echodefault().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_echodefault());
  }

  // string smooth = 15;
  if (this->smooth().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_smooth());
  }

  // string visibilityDefault = 24;
  if (this->visibilitydefault().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visibilitydefault());
  }

  // string visibilityOutCloud = 25;
  if (this->visibilityoutcloud().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visibilityoutcloud());
  }

  // string aodDefault = 28;
  if (this->aoddefault().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aoddefault());
  }

  // string aodOutCloud = 29;
  if (this->aodoutcloud().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aodoutcloud());
  }

  // string overlapCorrect = 32;
  if (this->overlapcorrect().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_overlapcorrect());
  }

  // float cloudExtThresh = 3;
  if (!(this->cloudextthresh() <= 0 && this->cloudextthresh() >= 0)) {
    total_size += 1 + 4;
  }

  // float snrThreshExtin = 7;
  if (!(this->snrthreshextin() <= 0 && this->snrthreshextin() >= 0)) {
    total_size += 1 + 4;
  }

  // float refHeight532 = 8;
  if (!(this->refheight532() <= 0 && this->refheight532() >= 0)) {
    total_size += 1 + 4;
  }

  // float depolFactor = 9;
  if (!(this->depolfactor() <= 0 && this->depolfactor() >= 0)) {
    total_size += 1 + 4;
  }

  // float snrThreshDepol = 11;
  if (!(this->snrthreshdepol() <= 0 && this->snrthreshdepol() >= 0)) {
    total_size += 1 + 4;
  }

  // float echoStart = 13;
  if (!(this->echostart() <= 0 && this->echostart() >= 0)) {
    total_size += 1 + 4;
  }

  // float echoEnd = 14;
  if (!(this->echoend() <= 0 && this->echoend() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 smoothTimes = 16;
  if (this->smoothtimes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_smoothtimes());
  }

  // int32 windowLength = 17;
  if (this->windowlength() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_windowlength());
  }

  // float pm10RatioA = 18;
  if (!(this->pm10ratioa() <= 0 && this->pm10ratioa() >= 0)) {
    total_size += 2 + 4;
  }

  // float pm10RatioB = 19;
  if (!(this->pm10ratiob() <= 0 && this->pm10ratiob() >= 0)) {
    total_size += 2 + 4;
  }

  // float pm10RatioC = 20;
  if (!(this->pm10ratioc() <= 0 && this->pm10ratioc() >= 0)) {
    total_size += 2 + 4;
  }

  // float pm25RatioA = 21;
  if (!(this->pm25ratioa() <= 0 && this->pm25ratioa() >= 0)) {
    total_size += 2 + 4;
  }

  // float pm25RatioB = 22;
  if (!(this->pm25ratiob() <= 0 && this->pm25ratiob() >= 0)) {
    total_size += 2 + 4;
  }

  // float pm25RatioC = 23;
  if (!(this->pm25ratioc() <= 0 && this->pm25ratioc() >= 0)) {
    total_size += 2 + 4;
  }

  // float visibilityStartH = 26;
  if (!(this->visibilitystarth() <= 0 && this->visibilitystarth() >= 0)) {
    total_size += 2 + 4;
  }

  // float visibilityEndH = 27;
  if (!(this->visibilityendh() <= 0 && this->visibilityendh() >= 0)) {
    total_size += 2 + 4;
  }

  // float aodStartLimit = 30;
  if (!(this->aodstartlimit() <= 0 && this->aodstartlimit() >= 0)) {
    total_size += 2 + 4;
  }

  // float aodEndLimit = 31;
  if (!(this->aodendlimit() <= 0 && this->aodendlimit() >= 0)) {
    total_size += 2 + 4;
  }

  // float extinCoea = 33;
  if (!(this->extincoea() <= 0 && this->extincoea() >= 0)) {
    total_size += 2 + 4;
  }

  // float extinCoeb = 34;
  if (!(this->extincoeb() <= 0 && this->extincoeb() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 removePoint = 35;
  if (this->removepoint() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_removepoint());
  }

  // float emptyDistance = 36;
  if (!(this->emptydistance() <= 0 && this->emptydistance() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.Alg)
  GOOGLE_DCHECK_NE(&from, this);
  const Alg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Alg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.Alg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.Alg)
    MergeFrom(*source);
  }
}

void Alg::MergeFrom(const Alg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.Alg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.extinalgorithmtype().size() > 0) {
    _internal_set_extinalgorithmtype(from._internal_extinalgorithmtype());
  }
  if (from.fixcloudyextin().size() > 0) {
    _internal_set_fixcloudyextin(from._internal_fixcloudyextin());
  }
  if (from.fixreferheight().size() > 0) {
    _internal_set_fixreferheight(from._internal_fixreferheight());
  }
  if (from.denoisingextin().size() > 0) {
    _internal_set_denoisingextin(from._internal_denoisingextin());
  }
  if (from.signalsplicing().size() > 0) {
    _internal_set_signalsplicing(from._internal_signalsplicing());
  }
  if (from.denoising().size() > 0) {
    _internal_set_denoising(from._internal_denoising());
  }
  if (from.echodefault().size() > 0) {
    _internal_set_echodefault(from._internal_echodefault());
  }
  if (from.smooth().size() > 0) {
    _internal_set_smooth(from._internal_smooth());
  }
  if (from.visibilitydefault().size() > 0) {
    _internal_set_visibilitydefault(from._internal_visibilitydefault());
  }
  if (from.visibilityoutcloud().size() > 0) {
    _internal_set_visibilityoutcloud(from._internal_visibilityoutcloud());
  }
  if (from.aoddefault().size() > 0) {
    _internal_set_aoddefault(from._internal_aoddefault());
  }
  if (from.aodoutcloud().size() > 0) {
    _internal_set_aodoutcloud(from._internal_aodoutcloud());
  }
  if (from.overlapcorrect().size() > 0) {
    _internal_set_overlapcorrect(from._internal_overlapcorrect());
  }
  if (!(from.cloudextthresh() <= 0 && from.cloudextthresh() >= 0)) {
    _internal_set_cloudextthresh(from._internal_cloudextthresh());
  }
  if (!(from.snrthreshextin() <= 0 && from.snrthreshextin() >= 0)) {
    _internal_set_snrthreshextin(from._internal_snrthreshextin());
  }
  if (!(from.refheight532() <= 0 && from.refheight532() >= 0)) {
    _internal_set_refheight532(from._internal_refheight532());
  }
  if (!(from.depolfactor() <= 0 && from.depolfactor() >= 0)) {
    _internal_set_depolfactor(from._internal_depolfactor());
  }
  if (!(from.snrthreshdepol() <= 0 && from.snrthreshdepol() >= 0)) {
    _internal_set_snrthreshdepol(from._internal_snrthreshdepol());
  }
  if (!(from.echostart() <= 0 && from.echostart() >= 0)) {
    _internal_set_echostart(from._internal_echostart());
  }
  if (!(from.echoend() <= 0 && from.echoend() >= 0)) {
    _internal_set_echoend(from._internal_echoend());
  }
  if (from.smoothtimes() != 0) {
    _internal_set_smoothtimes(from._internal_smoothtimes());
  }
  if (from.windowlength() != 0) {
    _internal_set_windowlength(from._internal_windowlength());
  }
  if (!(from.pm10ratioa() <= 0 && from.pm10ratioa() >= 0)) {
    _internal_set_pm10ratioa(from._internal_pm10ratioa());
  }
  if (!(from.pm10ratiob() <= 0 && from.pm10ratiob() >= 0)) {
    _internal_set_pm10ratiob(from._internal_pm10ratiob());
  }
  if (!(from.pm10ratioc() <= 0 && from.pm10ratioc() >= 0)) {
    _internal_set_pm10ratioc(from._internal_pm10ratioc());
  }
  if (!(from.pm25ratioa() <= 0 && from.pm25ratioa() >= 0)) {
    _internal_set_pm25ratioa(from._internal_pm25ratioa());
  }
  if (!(from.pm25ratiob() <= 0 && from.pm25ratiob() >= 0)) {
    _internal_set_pm25ratiob(from._internal_pm25ratiob());
  }
  if (!(from.pm25ratioc() <= 0 && from.pm25ratioc() >= 0)) {
    _internal_set_pm25ratioc(from._internal_pm25ratioc());
  }
  if (!(from.visibilitystarth() <= 0 && from.visibilitystarth() >= 0)) {
    _internal_set_visibilitystarth(from._internal_visibilitystarth());
  }
  if (!(from.visibilityendh() <= 0 && from.visibilityendh() >= 0)) {
    _internal_set_visibilityendh(from._internal_visibilityendh());
  }
  if (!(from.aodstartlimit() <= 0 && from.aodstartlimit() >= 0)) {
    _internal_set_aodstartlimit(from._internal_aodstartlimit());
  }
  if (!(from.aodendlimit() <= 0 && from.aodendlimit() >= 0)) {
    _internal_set_aodendlimit(from._internal_aodendlimit());
  }
  if (!(from.extincoea() <= 0 && from.extincoea() >= 0)) {
    _internal_set_extincoea(from._internal_extincoea());
  }
  if (!(from.extincoeb() <= 0 && from.extincoeb() >= 0)) {
    _internal_set_extincoeb(from._internal_extincoeb());
  }
  if (from.removepoint() != 0) {
    _internal_set_removepoint(from._internal_removepoint());
  }
  if (!(from.emptydistance() <= 0 && from.emptydistance() >= 0)) {
    _internal_set_emptydistance(from._internal_emptydistance());
  }
}

void Alg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.Alg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alg::CopyFrom(const Alg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.Alg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alg::IsInitialized() const {
  return true;
}

void Alg::InternalSwap(Alg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  extinalgorithmtype_.Swap(&other->extinalgorithmtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fixcloudyextin_.Swap(&other->fixcloudyextin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fixreferheight_.Swap(&other->fixreferheight_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  denoisingextin_.Swap(&other->denoisingextin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signalsplicing_.Swap(&other->signalsplicing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  denoising_.Swap(&other->denoising_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  echodefault_.Swap(&other->echodefault_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  smooth_.Swap(&other->smooth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visibilitydefault_.Swap(&other->visibilitydefault_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visibilityoutcloud_.Swap(&other->visibilityoutcloud_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aoddefault_.Swap(&other->aoddefault_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aodoutcloud_.Swap(&other->aodoutcloud_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  overlapcorrect_.Swap(&other->overlapcorrect_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Alg, emptydistance_)
      + sizeof(Alg::emptydistance_)
      - PROTOBUF_FIELD_OFFSET(Alg, cloudextthresh_)>(
          reinterpret_cast<char*>(&cloudextthresh_),
          reinterpret_cast<char*>(&other->cloudextthresh_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Alg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmList_Alarm::InitAsDefaultInstance() {
}
class AlarmList_Alarm::_Internal {
 public:
};

AlarmList_Alarm::AlarmList_Alarm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.AlarmList.Alarm)
}
AlarmList_Alarm::AlarmList_Alarm(const AlarmList_Alarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level().empty()) {
    level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_level(),
      GetArena());
  }
  categoryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_categoryname().empty()) {
    categoryname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_categoryname(),
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_desc(),
      GetArena());
  }
  alarmtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alarmtime().empty()) {
    alarmtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alarmtime(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.AlarmList.Alarm)
}

void AlarmList_Alarm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmList_Alarm_SendData_2eproto.base);
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  categoryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alarmtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AlarmList_Alarm::~AlarmList_Alarm() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.AlarmList.Alarm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlarmList_Alarm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  categoryname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alarmtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlarmList_Alarm::ArenaDtor(void* object) {
  AlarmList_Alarm* _this = reinterpret_cast< AlarmList_Alarm* >(object);
  (void)_this;
}
void AlarmList_Alarm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlarmList_Alarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmList_Alarm& AlarmList_Alarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmList_Alarm_SendData_2eproto.base);
  return *internal_default_instance();
}


void AlarmList_Alarm::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.AlarmList.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  categoryname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alarmtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlarmList_Alarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.AlarmList.Alarm.level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string categoryName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_categoryname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.AlarmList.Alarm.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alarmTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alarmtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmList_Alarm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.AlarmList.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.AlarmList.Alarm.level");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_level(), target);
  }

  // string categoryName = 2;
  if (this->categoryname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_categoryname().data(), static_cast<int>(this->_internal_categoryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.AlarmList.Alarm.categoryName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_categoryname(), target);
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.AlarmList.Alarm.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // string alarmTime = 4;
  if (this->alarmtime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alarmtime().data(), static_cast<int>(this->_internal_alarmtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.AlarmList.Alarm.alarmTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alarmtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.AlarmList.Alarm)
  return target;
}

size_t AlarmList_Alarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.AlarmList.Alarm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  // string categoryName = 2;
  if (this->categoryname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_categoryname());
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string alarmTime = 4;
  if (this->alarmtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alarmtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmList_Alarm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.AlarmList.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmList_Alarm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmList_Alarm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.AlarmList.Alarm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.AlarmList.Alarm)
    MergeFrom(*source);
  }
}

void AlarmList_Alarm::MergeFrom(const AlarmList_Alarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.AlarmList.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.categoryname().size() > 0) {
    _internal_set_categoryname(from._internal_categoryname());
  }
  if (from.desc().size() > 0) {
    _internal_set_desc(from._internal_desc());
  }
  if (from.alarmtime().size() > 0) {
    _internal_set_alarmtime(from._internal_alarmtime());
  }
}

void AlarmList_Alarm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.AlarmList.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmList_Alarm::CopyFrom(const AlarmList_Alarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.AlarmList.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmList_Alarm::IsInitialized() const {
  return true;
}

void AlarmList_Alarm::InternalSwap(AlarmList_Alarm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  level_.Swap(&other->level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  categoryname_.Swap(&other->categoryname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alarmtime_.Swap(&other->alarmtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmList_Alarm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmList::InitAsDefaultInstance() {
}
class AlarmList::_Internal {
 public:
};

AlarmList::AlarmList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alarm_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.AlarmList)
}
AlarmList::AlarmList(const AlarmList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alarm_(from.alarm_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.AlarmList)
}

void AlarmList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmList_SendData_2eproto.base);
}

AlarmList::~AlarmList() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.AlarmList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlarmList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AlarmList::ArenaDtor(void* object) {
  AlarmList* _this = reinterpret_cast< AlarmList* >(object);
  (void)_this;
}
void AlarmList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlarmList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmList& AlarmList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmList_SendData_2eproto.base);
  return *internal_default_instance();
}


void AlarmList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.AlarmList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alarm_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlarmList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.caspe.devicemanagement.util.AlarmList.Alarm alarm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alarm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.AlarmList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.caspe.devicemanagement.util.AlarmList.Alarm alarm = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alarm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_alarm(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.AlarmList)
  return target;
}

size_t AlarmList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.AlarmList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.caspe.devicemanagement.util.AlarmList.Alarm alarm = 1;
  total_size += 1UL * this->_internal_alarm_size();
  for (const auto& msg : this->alarm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.AlarmList)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.AlarmList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.AlarmList)
    MergeFrom(*source);
  }
}

void AlarmList::MergeFrom(const AlarmList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.AlarmList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alarm_.MergeFrom(from.alarm_);
}

void AlarmList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.AlarmList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmList::CopyFrom(const AlarmList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.AlarmList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmList::IsInitialized() const {
  return true;
}

void AlarmList::InternalSwap(AlarmList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alarm_.InternalSwap(&other->alarm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signal_Channel::InitAsDefaultInstance() {
}
class Signal_Channel::_Internal {
 public:
};

Signal_Channel::Signal_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.Signal.Channel)
}
Signal_Channel::Signal_Channel(const Signal_Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelname().empty()) {
    channelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channelname(),
      GetArena());
  }
  ::memcpy(&pointcount_, &from.pointcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&pulsecount_) -
    reinterpret_cast<char*>(&pointcount_)) + sizeof(pulsecount_));
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.Signal.Channel)
}

void Signal_Channel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signal_Channel_SendData_2eproto.base);
  channelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pointcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulsecount_) -
      reinterpret_cast<char*>(&pointcount_)) + sizeof(pulsecount_));
}

Signal_Channel::~Signal_Channel() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.Signal.Channel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signal_Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signal_Channel::ArenaDtor(void* object) {
  Signal_Channel* _this = reinterpret_cast< Signal_Channel* >(object);
  (void)_this;
}
void Signal_Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signal_Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal_Channel& Signal_Channel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signal_Channel_SendData_2eproto.base);
  return *internal_default_instance();
}


void Signal_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.Signal.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  channelname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pointcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulsecount_) -
      reinterpret_cast<char*>(&pointcount_)) + sizeof(pulsecount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal_Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.Signal.Channel.channelName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pointCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pointcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float spaceResolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          spaceresolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 waveLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          wavelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 adcBit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          adcbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pulseCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pulsecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signal_Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.Signal.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelname().data(), static_cast<int>(this->_internal_channelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.Signal.Channel.channelName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelname(), target);
  }

  // int32 pointCount = 2;
  if (this->pointcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pointcount(), target);
  }

  // float spaceResolution = 3;
  if (!(this->spaceresolution() <= 0 && this->spaceresolution() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_spaceresolution(), target);
  }

  // int32 waveLength = 4;
  if (this->wavelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wavelength(), target);
  }

  // int32 adcBit = 5;
  if (this->adcbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_adcbit(), target);
  }

  // int32 pulseCount = 6;
  if (this->pulsecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_pulsecount(), target);
  }

  // repeated int64 data = 7;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.Signal.Channel)
  return target;
}

size_t Signal_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.Signal.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 data = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string channelName = 1;
  if (this->channelname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelname());
  }

  // int32 pointCount = 2;
  if (this->pointcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pointcount());
  }

  // float spaceResolution = 3;
  if (!(this->spaceresolution() <= 0 && this->spaceresolution() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 waveLength = 4;
  if (this->wavelength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wavelength());
  }

  // int32 adcBit = 5;
  if (this->adcbit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_adcbit());
  }

  // int32 pulseCount = 6;
  if (this->pulsecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pulsecount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_Channel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.Signal.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_Channel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signal_Channel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.Signal.Channel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.Signal.Channel)
    MergeFrom(*source);
  }
}

void Signal_Channel::MergeFrom(const Signal_Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.Signal.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.channelname().size() > 0) {
    _internal_set_channelname(from._internal_channelname());
  }
  if (from.pointcount() != 0) {
    _internal_set_pointcount(from._internal_pointcount());
  }
  if (!(from.spaceresolution() <= 0 && from.spaceresolution() >= 0)) {
    _internal_set_spaceresolution(from._internal_spaceresolution());
  }
  if (from.wavelength() != 0) {
    _internal_set_wavelength(from._internal_wavelength());
  }
  if (from.adcbit() != 0) {
    _internal_set_adcbit(from._internal_adcbit());
  }
  if (from.pulsecount() != 0) {
    _internal_set_pulsecount(from._internal_pulsecount());
  }
}

void Signal_Channel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.Signal.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_Channel::CopyFrom(const Signal_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.Signal.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_Channel::IsInitialized() const {
  return true;
}

void Signal_Channel::InternalSwap(Signal_Channel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  channelname_.Swap(&other->channelname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Signal_Channel, pulsecount_)
      + sizeof(Signal_Channel::pulsecount_)
      - PROTOBUF_FIELD_OFFSET(Signal_Channel, pointcount_)>(
          reinterpret_cast<char*>(&pointcount_),
          reinterpret_cast<char*>(&other->pointcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal_Channel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
}
class Signal::_Internal {
 public:
};

Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.Signal)
}

void Signal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signal_SendData_2eproto.base);
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.Signal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Signal::ArenaDtor(void* object) {
  Signal* _this = reinterpret_cast< Signal* >(object);
  (void)_this;
}
void Signal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal& Signal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signal_SendData_2eproto.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.caspe.devicemanagement.util.Signal.Channel channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.caspe.devicemanagement.util.Signal.Channel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.Signal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.caspe.devicemanagement.util.Signal.Channel channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.Signal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void Signal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SysParam_DefogTiming::InitAsDefaultInstance() {
}
class SysParam_DefogTiming::_Internal {
 public:
};

SysParam_DefogTiming::SysParam_DefogTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.SysParam.DefogTiming)
}
SysParam_DefogTiming::SysParam_DefogTiming(const SysParam_DefogTiming& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start(),
      GetArena());
  }
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end().empty()) {
    end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.SysParam.DefogTiming)
}

void SysParam_DefogTiming::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SysParam_DefogTiming_SendData_2eproto.base);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SysParam_DefogTiming::~SysParam_DefogTiming() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SysParam_DefogTiming::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SysParam_DefogTiming::ArenaDtor(void* object) {
  SysParam_DefogTiming* _this = reinterpret_cast< SysParam_DefogTiming* >(object);
  (void)_this;
}
void SysParam_DefogTiming::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SysParam_DefogTiming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysParam_DefogTiming& SysParam_DefogTiming::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysParam_DefogTiming_SendData_2eproto.base);
  return *internal_default_instance();
}


void SysParam_DefogTiming::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysParam_DefogTiming::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.DefogTiming.start"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.DefogTiming.end"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SysParam_DefogTiming::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.DefogTiming.start");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start(), target);
  }

  // string end = 2;
  if (this->end().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end().data(), static_cast<int>(this->_internal_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.DefogTiming.end");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  return target;
}

size_t SysParam_DefogTiming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start());
  }

  // string end = 2;
  if (this->end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysParam_DefogTiming::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  GOOGLE_DCHECK_NE(&from, this);
  const SysParam_DefogTiming* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SysParam_DefogTiming>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.SysParam.DefogTiming)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.SysParam.DefogTiming)
    MergeFrom(*source);
  }
}

void SysParam_DefogTiming::MergeFrom(const SysParam_DefogTiming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end().size() > 0) {
    _internal_set_end(from._internal_end());
  }
}

void SysParam_DefogTiming::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysParam_DefogTiming::CopyFrom(const SysParam_DefogTiming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.SysParam.DefogTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysParam_DefogTiming::IsInitialized() const {
  return true;
}

void SysParam_DefogTiming::InternalSwap(SysParam_DefogTiming* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_.Swap(&other->start_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_.Swap(&other->end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SysParam_DefogTiming::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SysParam_HeaterTiming::InitAsDefaultInstance() {
}
class SysParam_HeaterTiming::_Internal {
 public:
};

SysParam_HeaterTiming::SysParam_HeaterTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
}
SysParam_HeaterTiming::SysParam_HeaterTiming(const SysParam_HeaterTiming& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start(),
      GetArena());
  }
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end().empty()) {
    end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
}

void SysParam_HeaterTiming::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SysParam_HeaterTiming_SendData_2eproto.base);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SysParam_HeaterTiming::~SysParam_HeaterTiming() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SysParam_HeaterTiming::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SysParam_HeaterTiming::ArenaDtor(void* object) {
  SysParam_HeaterTiming* _this = reinterpret_cast< SysParam_HeaterTiming* >(object);
  (void)_this;
}
void SysParam_HeaterTiming::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SysParam_HeaterTiming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysParam_HeaterTiming& SysParam_HeaterTiming::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysParam_HeaterTiming_SendData_2eproto.base);
  return *internal_default_instance();
}


void SysParam_HeaterTiming::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysParam_HeaterTiming::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.HeaterTiming.start"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.HeaterTiming.end"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SysParam_HeaterTiming::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.HeaterTiming.start");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start(), target);
  }

  // string end = 2;
  if (this->end().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end().data(), static_cast<int>(this->_internal_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.HeaterTiming.end");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  return target;
}

size_t SysParam_HeaterTiming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start());
  }

  // string end = 2;
  if (this->end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysParam_HeaterTiming::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  GOOGLE_DCHECK_NE(&from, this);
  const SysParam_HeaterTiming* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SysParam_HeaterTiming>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
    MergeFrom(*source);
  }
}

void SysParam_HeaterTiming::MergeFrom(const SysParam_HeaterTiming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end().size() > 0) {
    _internal_set_end(from._internal_end());
  }
}

void SysParam_HeaterTiming::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysParam_HeaterTiming::CopyFrom(const SysParam_HeaterTiming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.SysParam.HeaterTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysParam_HeaterTiming::IsInitialized() const {
  return true;
}

void SysParam_HeaterTiming::InternalSwap(SysParam_HeaterTiming* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_.Swap(&other->start_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_.Swap(&other->end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SysParam_HeaterTiming::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SysParam::InitAsDefaultInstance() {
}
class SysParam::_Internal {
 public:
};

SysParam::SysParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  defogtiming_(arena),
  heatertiming_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.SysParam)
}
SysParam::SysParam(const SysParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      defogtiming_(from.defogtiming_),
      heatertiming_(from.heatertiming_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel1().empty()) {
    channel1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel1(),
      GetArena());
  }
  channel2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel2().empty()) {
    channel2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel2(),
      GetArena());
  }
  channel3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel3().empty()) {
    channel3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel3(),
      GetArena());
  }
  channel4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel4().empty()) {
    channel4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel4(),
      GetArena());
  }
  channel5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel5().empty()) {
    channel5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel5(),
      GetArena());
  }
  channel6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel6().empty()) {
    channel6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel6(),
      GetArena());
  }
  channel7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel7().empty()) {
    channel7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel7(),
      GetArena());
  }
  channel8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel8().empty()) {
    channel8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel8(),
      GetArena());
  }
  defogmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_defogmode().empty()) {
    defogmode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_defogmode(),
      GetArena());
  }
  defogautocondition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_defogautocondition().empty()) {
    defogautocondition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_defogautocondition(),
      GetArena());
  }
  heatermode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_heatermode().empty()) {
    heatermode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_heatermode(),
      GetArena());
  }
  ::memcpy(&syspointdist_, &from.syspointdist_,
    static_cast<size_t>(reinterpret_cast<char*>(&defogheat3_) -
    reinterpret_cast<char*>(&syspointdist_)) + sizeof(defogheat3_));
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.SysParam)
}

void SysParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SysParam_SendData_2eproto.base);
  channel1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defogmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defogautocondition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heatermode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&syspointdist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defogheat3_) -
      reinterpret_cast<char*>(&syspointdist_)) + sizeof(defogheat3_));
}

SysParam::~SysParam() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.SysParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SysParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defogmode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defogautocondition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heatermode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SysParam::ArenaDtor(void* object) {
  SysParam* _this = reinterpret_cast< SysParam* >(object);
  (void)_this;
}
void SysParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SysParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysParam& SysParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysParam_SendData_2eproto.base);
  return *internal_default_instance();
}


void SysParam::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.SysParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defogtiming_.Clear();
  heatertiming_.Clear();
  channel1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  defogmode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  defogautocondition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heatermode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&syspointdist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defogheat3_) -
      reinterpret_cast<char*>(&syspointdist_)) + sizeof(defogheat3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float sysPointDist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          syspointdist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 sysPulseCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          syspulsecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableGal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enablegal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableUps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enableups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableCompass = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enablecompass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableGps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enablegps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableCamera = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enablecamera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableYunCamera = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          enableyuncamera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableHeater = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          enableheater_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableDefog = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          enabledefog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableVirtualGps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          enablevirtualgps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool yunParamReset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          yunparamreset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_channel1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.channel1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_channel2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.channel2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel3 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_channel3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.channel3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel4 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_channel4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.channel4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel5 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_channel5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.channel5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel6 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_channel6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.channel6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel7 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_channel7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.channel7"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel8 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_channel8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.channel8"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 laserHertz = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          laserhertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float laserAmpere = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          laserampere_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 galSpeed = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          galspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string defogMode = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_defogmode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.defogMode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string defogAutoCondition = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_defogautocondition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.defogAutoCondition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float defogAutoValue = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          defogautovalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .com.caspe.devicemanagement.util.SysParam.DefogTiming defogTiming = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_defogtiming(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // string heaterMode = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_heatermode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SysParam.heaterMode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.caspe.devicemanagement.util.SysParam.HeaterTiming heaterTiming = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_heatertiming(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // float virtualGpsLon = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          virtualgpslon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float virtualGpsLat = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          virtualgpslat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool defogHeat1 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          defogheat1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool defogHeat2 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          defogheat2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool defogHeat3 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          defogheat3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SysParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.SysParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float sysPointDist = 1;
  if (!(this->syspointdist() <= 0 && this->syspointdist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_syspointdist(), target);
  }

  // int32 sysPulseCount = 2;
  if (this->syspulsecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_syspulsecount(), target);
  }

  // bool enableGal = 3;
  if (this->enablegal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enablegal(), target);
  }

  // bool enableUps = 4;
  if (this->enableups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enableups(), target);
  }

  // bool enableCompass = 5;
  if (this->enablecompass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enablecompass(), target);
  }

  // bool enableGps = 6;
  if (this->enablegps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enablegps(), target);
  }

  // bool enableCamera = 7;
  if (this->enablecamera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enablecamera(), target);
  }

  // bool enableYunCamera = 8;
  if (this->enableyuncamera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enableyuncamera(), target);
  }

  // bool enableHeater = 9;
  if (this->enableheater() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enableheater(), target);
  }

  // bool enableDefog = 10;
  if (this->enabledefog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_enabledefog(), target);
  }

  // bool enableVirtualGps = 11;
  if (this->enablevirtualgps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_enablevirtualgps(), target);
  }

  // bool yunParamReset = 12;
  if (this->yunparamreset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_yunparamreset(), target);
  }

  // string channel1 = 13;
  if (this->channel1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel1().data(), static_cast<int>(this->_internal_channel1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.channel1");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_channel1(), target);
  }

  // string channel2 = 14;
  if (this->channel2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel2().data(), static_cast<int>(this->_internal_channel2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.channel2");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_channel2(), target);
  }

  // string channel3 = 15;
  if (this->channel3().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel3().data(), static_cast<int>(this->_internal_channel3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.channel3");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_channel3(), target);
  }

  // string channel4 = 16;
  if (this->channel4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel4().data(), static_cast<int>(this->_internal_channel4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.channel4");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_channel4(), target);
  }

  // string channel5 = 17;
  if (this->channel5().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel5().data(), static_cast<int>(this->_internal_channel5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.channel5");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_channel5(), target);
  }

  // string channel6 = 18;
  if (this->channel6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel6().data(), static_cast<int>(this->_internal_channel6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.channel6");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_channel6(), target);
  }

  // string channel7 = 19;
  if (this->channel7().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel7().data(), static_cast<int>(this->_internal_channel7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.channel7");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_channel7(), target);
  }

  // string channel8 = 20;
  if (this->channel8().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel8().data(), static_cast<int>(this->_internal_channel8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.channel8");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_channel8(), target);
  }

  // int32 laserHertz = 21;
  if (this->laserhertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_laserhertz(), target);
  }

  // float laserAmpere = 22;
  if (!(this->laserampere() <= 0 && this->laserampere() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_laserampere(), target);
  }

  // int32 galSpeed = 23;
  if (this->galspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_galspeed(), target);
  }

  // string defogMode = 24;
  if (this->defogmode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defogmode().data(), static_cast<int>(this->_internal_defogmode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.defogMode");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_defogmode(), target);
  }

  // string defogAutoCondition = 25;
  if (this->defogautocondition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defogautocondition().data(), static_cast<int>(this->_internal_defogautocondition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.defogAutoCondition");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_defogautocondition(), target);
  }

  // float defogAutoValue = 26;
  if (!(this->defogautovalue() <= 0 && this->defogautovalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_defogautovalue(), target);
  }

  // repeated .com.caspe.devicemanagement.util.SysParam.DefogTiming defogTiming = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_defogtiming_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_defogtiming(i), target, stream);
  }

  // string heaterMode = 28;
  if (this->heatermode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_heatermode().data(), static_cast<int>(this->_internal_heatermode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SysParam.heaterMode");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_heatermode(), target);
  }

  // repeated .com.caspe.devicemanagement.util.SysParam.HeaterTiming heaterTiming = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heatertiming_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_heatertiming(i), target, stream);
  }

  // float virtualGpsLon = 30;
  if (!(this->virtualgpslon() <= 0 && this->virtualgpslon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_virtualgpslon(), target);
  }

  // float virtualGpsLat = 31;
  if (!(this->virtualgpslat() <= 0 && this->virtualgpslat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_virtualgpslat(), target);
  }

  // bool defogHeat1 = 32;
  if (this->defogheat1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_defogheat1(), target);
  }

  // bool defogHeat2 = 33;
  if (this->defogheat2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_defogheat2(), target);
  }

  // bool defogHeat3 = 34;
  if (this->defogheat3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_defogheat3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.SysParam)
  return target;
}

size_t SysParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.SysParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.caspe.devicemanagement.util.SysParam.DefogTiming defogTiming = 27;
  total_size += 2UL * this->_internal_defogtiming_size();
  for (const auto& msg : this->defogtiming_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.caspe.devicemanagement.util.SysParam.HeaterTiming heaterTiming = 29;
  total_size += 2UL * this->_internal_heatertiming_size();
  for (const auto& msg : this->heatertiming_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel1 = 13;
  if (this->channel1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel1());
  }

  // string channel2 = 14;
  if (this->channel2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel2());
  }

  // string channel3 = 15;
  if (this->channel3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel3());
  }

  // string channel4 = 16;
  if (this->channel4().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel4());
  }

  // string channel5 = 17;
  if (this->channel5().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel5());
  }

  // string channel6 = 18;
  if (this->channel6().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel6());
  }

  // string channel7 = 19;
  if (this->channel7().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel7());
  }

  // string channel8 = 20;
  if (this->channel8().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel8());
  }

  // string defogMode = 24;
  if (this->defogmode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defogmode());
  }

  // string defogAutoCondition = 25;
  if (this->defogautocondition().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defogautocondition());
  }

  // string heaterMode = 28;
  if (this->heatermode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heatermode());
  }

  // float sysPointDist = 1;
  if (!(this->syspointdist() <= 0 && this->syspointdist() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 sysPulseCount = 2;
  if (this->syspulsecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_syspulsecount());
  }

  // bool enableGal = 3;
  if (this->enablegal() != 0) {
    total_size += 1 + 1;
  }

  // bool enableUps = 4;
  if (this->enableups() != 0) {
    total_size += 1 + 1;
  }

  // bool enableCompass = 5;
  if (this->enablecompass() != 0) {
    total_size += 1 + 1;
  }

  // bool enableGps = 6;
  if (this->enablegps() != 0) {
    total_size += 1 + 1;
  }

  // bool enableCamera = 7;
  if (this->enablecamera() != 0) {
    total_size += 1 + 1;
  }

  // bool enableYunCamera = 8;
  if (this->enableyuncamera() != 0) {
    total_size += 1 + 1;
  }

  // bool enableHeater = 9;
  if (this->enableheater() != 0) {
    total_size += 1 + 1;
  }

  // bool enableDefog = 10;
  if (this->enabledefog() != 0) {
    total_size += 1 + 1;
  }

  // int32 laserHertz = 21;
  if (this->laserhertz() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_laserhertz());
  }

  // float laserAmpere = 22;
  if (!(this->laserampere() <= 0 && this->laserampere() >= 0)) {
    total_size += 2 + 4;
  }

  // bool enableVirtualGps = 11;
  if (this->enablevirtualgps() != 0) {
    total_size += 1 + 1;
  }

  // bool yunParamReset = 12;
  if (this->yunparamreset() != 0) {
    total_size += 1 + 1;
  }

  // bool defogHeat1 = 32;
  if (this->defogheat1() != 0) {
    total_size += 2 + 1;
  }

  // bool defogHeat2 = 33;
  if (this->defogheat2() != 0) {
    total_size += 2 + 1;
  }

  // int32 galSpeed = 23;
  if (this->galspeed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_galspeed());
  }

  // float defogAutoValue = 26;
  if (!(this->defogautovalue() <= 0 && this->defogautovalue() >= 0)) {
    total_size += 2 + 4;
  }

  // float virtualGpsLon = 30;
  if (!(this->virtualgpslon() <= 0 && this->virtualgpslon() >= 0)) {
    total_size += 2 + 4;
  }

  // float virtualGpsLat = 31;
  if (!(this->virtualgpslat() <= 0 && this->virtualgpslat() >= 0)) {
    total_size += 2 + 4;
  }

  // bool defogHeat3 = 34;
  if (this->defogheat3() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.SysParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SysParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SysParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.SysParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.SysParam)
    MergeFrom(*source);
  }
}

void SysParam::MergeFrom(const SysParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.SysParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defogtiming_.MergeFrom(from.defogtiming_);
  heatertiming_.MergeFrom(from.heatertiming_);
  if (from.channel1().size() > 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from.channel2().size() > 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from.channel3().size() > 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from.channel4().size() > 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from.channel5().size() > 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from.channel6().size() > 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from.channel7().size() > 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from.channel8().size() > 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from.defogmode().size() > 0) {
    _internal_set_defogmode(from._internal_defogmode());
  }
  if (from.defogautocondition().size() > 0) {
    _internal_set_defogautocondition(from._internal_defogautocondition());
  }
  if (from.heatermode().size() > 0) {
    _internal_set_heatermode(from._internal_heatermode());
  }
  if (!(from.syspointdist() <= 0 && from.syspointdist() >= 0)) {
    _internal_set_syspointdist(from._internal_syspointdist());
  }
  if (from.syspulsecount() != 0) {
    _internal_set_syspulsecount(from._internal_syspulsecount());
  }
  if (from.enablegal() != 0) {
    _internal_set_enablegal(from._internal_enablegal());
  }
  if (from.enableups() != 0) {
    _internal_set_enableups(from._internal_enableups());
  }
  if (from.enablecompass() != 0) {
    _internal_set_enablecompass(from._internal_enablecompass());
  }
  if (from.enablegps() != 0) {
    _internal_set_enablegps(from._internal_enablegps());
  }
  if (from.enablecamera() != 0) {
    _internal_set_enablecamera(from._internal_enablecamera());
  }
  if (from.enableyuncamera() != 0) {
    _internal_set_enableyuncamera(from._internal_enableyuncamera());
  }
  if (from.enableheater() != 0) {
    _internal_set_enableheater(from._internal_enableheater());
  }
  if (from.enabledefog() != 0) {
    _internal_set_enabledefog(from._internal_enabledefog());
  }
  if (from.laserhertz() != 0) {
    _internal_set_laserhertz(from._internal_laserhertz());
  }
  if (!(from.laserampere() <= 0 && from.laserampere() >= 0)) {
    _internal_set_laserampere(from._internal_laserampere());
  }
  if (from.enablevirtualgps() != 0) {
    _internal_set_enablevirtualgps(from._internal_enablevirtualgps());
  }
  if (from.yunparamreset() != 0) {
    _internal_set_yunparamreset(from._internal_yunparamreset());
  }
  if (from.defogheat1() != 0) {
    _internal_set_defogheat1(from._internal_defogheat1());
  }
  if (from.defogheat2() != 0) {
    _internal_set_defogheat2(from._internal_defogheat2());
  }
  if (from.galspeed() != 0) {
    _internal_set_galspeed(from._internal_galspeed());
  }
  if (!(from.defogautovalue() <= 0 && from.defogautovalue() >= 0)) {
    _internal_set_defogautovalue(from._internal_defogautovalue());
  }
  if (!(from.virtualgpslon() <= 0 && from.virtualgpslon() >= 0)) {
    _internal_set_virtualgpslon(from._internal_virtualgpslon());
  }
  if (!(from.virtualgpslat() <= 0 && from.virtualgpslat() >= 0)) {
    _internal_set_virtualgpslat(from._internal_virtualgpslat());
  }
  if (from.defogheat3() != 0) {
    _internal_set_defogheat3(from._internal_defogheat3());
  }
}

void SysParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.SysParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysParam::CopyFrom(const SysParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.SysParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysParam::IsInitialized() const {
  return true;
}

void SysParam::InternalSwap(SysParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  defogtiming_.InternalSwap(&other->defogtiming_);
  heatertiming_.InternalSwap(&other->heatertiming_);
  channel1_.Swap(&other->channel1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel2_.Swap(&other->channel2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel3_.Swap(&other->channel3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel4_.Swap(&other->channel4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel5_.Swap(&other->channel5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel6_.Swap(&other->channel6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel7_.Swap(&other->channel7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel8_.Swap(&other->channel8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  defogmode_.Swap(&other->defogmode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  defogautocondition_.Swap(&other->defogautocondition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heatermode_.Swap(&other->heatermode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysParam, defogheat3_)
      + sizeof(SysParam::defogheat3_)
      - PROTOBUF_FIELD_OFFSET(SysParam, syspointdist_)>(
          reinterpret_cast<char*>(&syspointdist_),
          reinterpret_cast<char*>(&other->syspointdist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendData::InitAsDefaultInstance() {
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.ready_ = const_cast< ::com::caspe::devicemanagement::util::Ready*>(
      ::com::caspe::devicemanagement::util::Ready::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.detaillog_ = const_cast< ::com::caspe::devicemanagement::util::DetailLog*>(
      ::com::caspe::devicemanagement::util::DetailLog::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.collect_ = const_cast< ::com::caspe::devicemanagement::util::Collect*>(
      ::com::caspe::devicemanagement::util::Collect::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.collectreply_ = const_cast< ::com::caspe::devicemanagement::util::CollectReply*>(
      ::com::caspe::devicemanagement::util::CollectReply::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.suspend_ = const_cast< ::com::caspe::devicemanagement::util::SuspendReply*>(
      ::com::caspe::devicemanagement::util::SuspendReply::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.collectcomplete_ = const_cast< ::com::caspe::devicemanagement::util::CollectComplete*>(
      ::com::caspe::devicemanagement::util::CollectComplete::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.statusreport_ = const_cast< ::com::caspe::devicemanagement::util::StatusReport*>(
      ::com::caspe::devicemanagement::util::StatusReport::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.alg_ = const_cast< ::com::caspe::devicemanagement::util::Alg*>(
      ::com::caspe::devicemanagement::util::Alg::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.alarmlist_ = const_cast< ::com::caspe::devicemanagement::util::AlarmList*>(
      ::com::caspe::devicemanagement::util::AlarmList::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.sysparam_ = const_cast< ::com::caspe::devicemanagement::util::SysParam*>(
      ::com::caspe::devicemanagement::util::SysParam::internal_default_instance());
  ::com::caspe::devicemanagement::util::_SendData_default_instance_.signal_ = const_cast< ::com::caspe::devicemanagement::util::Signal*>(
      ::com::caspe::devicemanagement::util::Signal::internal_default_instance());
}
class SendData::_Internal {
 public:
  static const ::com::caspe::devicemanagement::util::Ready& ready(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::DetailLog& detaillog(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::Collect& collect(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::CollectReply& collectreply(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::SuspendReply& suspend(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::CollectComplete& collectcomplete(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::StatusReport& statusreport(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::Alg& alg(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::AlarmList& alarmlist(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::SysParam& sysparam(const SendData* msg);
  static const ::com::caspe::devicemanagement::util::Signal& signal(const SendData* msg);
};

const ::com::caspe::devicemanagement::util::Ready&
SendData::_Internal::ready(const SendData* msg) {
  return *msg->data_.ready_;
}
const ::com::caspe::devicemanagement::util::DetailLog&
SendData::_Internal::detaillog(const SendData* msg) {
  return *msg->data_.detaillog_;
}
const ::com::caspe::devicemanagement::util::Collect&
SendData::_Internal::collect(const SendData* msg) {
  return *msg->data_.collect_;
}
const ::com::caspe::devicemanagement::util::CollectReply&
SendData::_Internal::collectreply(const SendData* msg) {
  return *msg->data_.collectreply_;
}
const ::com::caspe::devicemanagement::util::SuspendReply&
SendData::_Internal::suspend(const SendData* msg) {
  return *msg->data_.suspend_;
}
const ::com::caspe::devicemanagement::util::CollectComplete&
SendData::_Internal::collectcomplete(const SendData* msg) {
  return *msg->data_.collectcomplete_;
}
const ::com::caspe::devicemanagement::util::StatusReport&
SendData::_Internal::statusreport(const SendData* msg) {
  return *msg->data_.statusreport_;
}
const ::com::caspe::devicemanagement::util::Alg&
SendData::_Internal::alg(const SendData* msg) {
  return *msg->data_.alg_;
}
const ::com::caspe::devicemanagement::util::AlarmList&
SendData::_Internal::alarmlist(const SendData* msg) {
  return *msg->data_.alarmlist_;
}
const ::com::caspe::devicemanagement::util::SysParam&
SendData::_Internal::sysparam(const SendData* msg) {
  return *msg->data_.sysparam_;
}
const ::com::caspe::devicemanagement::util::Signal&
SendData::_Internal::signal(const SendData* msg) {
  return *msg->data_.signal_;
}
void SendData::set_allocated_ready(::com::caspe::devicemanagement::util::Ready* ready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (ready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ready);
    if (message_arena != submessage_arena) {
      ready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ready, submessage_arena);
    }
    set_has_ready();
    data_.ready_ = ready;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.ready)
}
void SendData::set_allocated_detaillog(::com::caspe::devicemanagement::util::DetailLog* detaillog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (detaillog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detaillog);
    if (message_arena != submessage_arena) {
      detaillog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detaillog, submessage_arena);
    }
    set_has_detaillog();
    data_.detaillog_ = detaillog;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.detailLog)
}
void SendData::set_allocated_collect(::com::caspe::devicemanagement::util::Collect* collect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (collect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(collect);
    if (message_arena != submessage_arena) {
      collect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collect, submessage_arena);
    }
    set_has_collect();
    data_.collect_ = collect;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.collect)
}
void SendData::set_allocated_collectreply(::com::caspe::devicemanagement::util::CollectReply* collectreply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (collectreply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(collectreply);
    if (message_arena != submessage_arena) {
      collectreply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collectreply, submessage_arena);
    }
    set_has_collectreply();
    data_.collectreply_ = collectreply;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.collectReply)
}
void SendData::set_allocated_suspend(::com::caspe::devicemanagement::util::SuspendReply* suspend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (suspend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(suspend);
    if (message_arena != submessage_arena) {
      suspend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suspend, submessage_arena);
    }
    set_has_suspend();
    data_.suspend_ = suspend;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.suspend)
}
void SendData::set_allocated_collectcomplete(::com::caspe::devicemanagement::util::CollectComplete* collectcomplete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (collectcomplete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(collectcomplete);
    if (message_arena != submessage_arena) {
      collectcomplete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collectcomplete, submessage_arena);
    }
    set_has_collectcomplete();
    data_.collectcomplete_ = collectcomplete;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.collectComplete)
}
void SendData::set_allocated_statusreport(::com::caspe::devicemanagement::util::StatusReport* statusreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (statusreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(statusreport);
    if (message_arena != submessage_arena) {
      statusreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusreport, submessage_arena);
    }
    set_has_statusreport();
    data_.statusreport_ = statusreport;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.statusReport)
}
void SendData::set_allocated_alg(::com::caspe::devicemanagement::util::Alg* alg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (alg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alg);
    if (message_arena != submessage_arena) {
      alg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alg, submessage_arena);
    }
    set_has_alg();
    data_.alg_ = alg;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.alg)
}
void SendData::set_allocated_alarmlist(::com::caspe::devicemanagement::util::AlarmList* alarmlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (alarmlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alarmlist);
    if (message_arena != submessage_arena) {
      alarmlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alarmlist, submessage_arena);
    }
    set_has_alarmlist();
    data_.alarmlist_ = alarmlist;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.alarmList)
}
void SendData::set_allocated_sysparam(::com::caspe::devicemanagement::util::SysParam* sysparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (sysparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sysparam);
    if (message_arena != submessage_arena) {
      sysparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sysparam, submessage_arena);
    }
    set_has_sysparam();
    data_.sysparam_ = sysparam;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.sysParam)
}
void SendData::set_allocated_signal(::com::caspe::devicemanagement::util::Signal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signal);
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    set_has_signal();
    data_.signal_ = signal;
  }
  // @@protoc_insertion_point(field_set_allocated:com.caspe.devicemanagement.util.SendData.signal)
}
SendData::SendData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.caspe.devicemanagement.util.SendData)
}
SendData::SendData(const SendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serianum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serianum().empty()) {
    serianum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serianum(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action(),
      GetArena());
  }
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_success().empty()) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_success(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  sncode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sncode().empty()) {
    sncode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sncode(),
      GetArena());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  clear_has_data();
  switch (from.data_case()) {
    case kReady: {
      _internal_mutable_ready()->::com::caspe::devicemanagement::util::Ready::MergeFrom(from._internal_ready());
      break;
    }
    case kDetailLog: {
      _internal_mutable_detaillog()->::com::caspe::devicemanagement::util::DetailLog::MergeFrom(from._internal_detaillog());
      break;
    }
    case kCollect: {
      _internal_mutable_collect()->::com::caspe::devicemanagement::util::Collect::MergeFrom(from._internal_collect());
      break;
    }
    case kCollectReply: {
      _internal_mutable_collectreply()->::com::caspe::devicemanagement::util::CollectReply::MergeFrom(from._internal_collectreply());
      break;
    }
    case kSuspend: {
      _internal_mutable_suspend()->::com::caspe::devicemanagement::util::SuspendReply::MergeFrom(from._internal_suspend());
      break;
    }
    case kCollectComplete: {
      _internal_mutable_collectcomplete()->::com::caspe::devicemanagement::util::CollectComplete::MergeFrom(from._internal_collectcomplete());
      break;
    }
    case kStatusReport: {
      _internal_mutable_statusreport()->::com::caspe::devicemanagement::util::StatusReport::MergeFrom(from._internal_statusreport());
      break;
    }
    case kAlg: {
      _internal_mutable_alg()->::com::caspe::devicemanagement::util::Alg::MergeFrom(from._internal_alg());
      break;
    }
    case kAlarmList: {
      _internal_mutable_alarmlist()->::com::caspe::devicemanagement::util::AlarmList::MergeFrom(from._internal_alarmlist());
      break;
    }
    case kSysParam: {
      _internal_mutable_sysparam()->::com::caspe::devicemanagement::util::SysParam::MergeFrom(from._internal_sysparam());
      break;
    }
    case kSignal: {
      _internal_mutable_signal()->::com::caspe::devicemanagement::util::Signal::MergeFrom(from._internal_signal());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.caspe.devicemanagement.util.SendData)
}

void SendData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendData_SendData_2eproto.base);
  serianum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sncode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}

SendData::~SendData() {
  // @@protoc_insertion_point(destructor:com.caspe.devicemanagement.util.SendData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serianum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sncode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void SendData::ArenaDtor(void* object) {
  SendData* _this = reinterpret_cast< SendData* >(object);
  (void)_this;
}
void SendData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendData& SendData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendData_SendData_2eproto.base);
  return *internal_default_instance();
}


void SendData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:com.caspe.devicemanagement.util.SendData)
  switch (data_case()) {
    case kReady: {
      if (GetArena() == nullptr) {
        delete data_.ready_;
      }
      break;
    }
    case kDetailLog: {
      if (GetArena() == nullptr) {
        delete data_.detaillog_;
      }
      break;
    }
    case kCollect: {
      if (GetArena() == nullptr) {
        delete data_.collect_;
      }
      break;
    }
    case kCollectReply: {
      if (GetArena() == nullptr) {
        delete data_.collectreply_;
      }
      break;
    }
    case kSuspend: {
      if (GetArena() == nullptr) {
        delete data_.suspend_;
      }
      break;
    }
    case kCollectComplete: {
      if (GetArena() == nullptr) {
        delete data_.collectcomplete_;
      }
      break;
    }
    case kStatusReport: {
      if (GetArena() == nullptr) {
        delete data_.statusreport_;
      }
      break;
    }
    case kAlg: {
      if (GetArena() == nullptr) {
        delete data_.alg_;
      }
      break;
    }
    case kAlarmList: {
      if (GetArena() == nullptr) {
        delete data_.alarmlist_;
      }
      break;
    }
    case kSysParam: {
      if (GetArena() == nullptr) {
        delete data_.sysparam_;
      }
      break;
    }
    case kSignal: {
      if (GetArena() == nullptr) {
        delete data_.signal_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SendData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.caspe.devicemanagement.util.SendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serianum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sncode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string seriaNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serianum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SendData.seriaNum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SendData.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SendData.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_success();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SendData.success"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SendData.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sncode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SendData.snCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.caspe.devicemanagement.util.SendData.userId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.Ready ready = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_ready(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.DetailLog detailLog = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_detaillog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.Collect collect = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_collect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.CollectReply collectReply = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_collectreply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.SuspendReply suspend = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_suspend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.CollectComplete collectComplete = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_collectcomplete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.StatusReport statusReport = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusreport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.Alg alg = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_alg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.AlarmList alarmList = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_alarmlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.SysParam sysParam = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sysparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.caspe.devicemanagement.util.Signal signal = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caspe.devicemanagement.util.SendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string seriaNum = 1;
  if (this->serianum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serianum().data(), static_cast<int>(this->_internal_serianum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SendData.seriaNum");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serianum(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SendData.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SendData.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // string success = 4;
  if (this->success().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SendData.success");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_success(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SendData.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  // string snCode = 6;
  if (this->sncode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sncode().data(), static_cast<int>(this->_internal_sncode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SendData.snCode");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sncode(), target);
  }

  // string userId = 7;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.caspe.devicemanagement.util.SendData.userId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_userid(), target);
  }

  // .com.caspe.devicemanagement.util.Ready ready = 60;
  if (_internal_has_ready()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::ready(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.DetailLog detailLog = 61;
  if (_internal_has_detaillog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        61, _Internal::detaillog(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.Collect collect = 62;
  if (_internal_has_collect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        62, _Internal::collect(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.CollectReply collectReply = 63;
  if (_internal_has_collectreply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        63, _Internal::collectreply(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.SuspendReply suspend = 64;
  if (_internal_has_suspend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        64, _Internal::suspend(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.CollectComplete collectComplete = 65;
  if (_internal_has_collectcomplete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        65, _Internal::collectcomplete(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.StatusReport statusReport = 66;
  if (_internal_has_statusreport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        66, _Internal::statusreport(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.Alg alg = 67;
  if (_internal_has_alg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        67, _Internal::alg(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.AlarmList alarmList = 68;
  if (_internal_has_alarmlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        68, _Internal::alarmlist(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.SysParam sysParam = 69;
  if (_internal_has_sysparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        69, _Internal::sysparam(this), target, stream);
  }

  // .com.caspe.devicemanagement.util.Signal signal = 70;
  if (_internal_has_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::signal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caspe.devicemanagement.util.SendData)
  return target;
}

size_t SendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.caspe.devicemanagement.util.SendData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string seriaNum = 1;
  if (this->serianum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serianum());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string success = 4;
  if (this->success().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string snCode = 6;
  if (this->sncode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sncode());
  }

  // string userId = 7;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  switch (data_case()) {
    // .com.caspe.devicemanagement.util.Ready ready = 60;
    case kReady: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.ready_);
      break;
    }
    // .com.caspe.devicemanagement.util.DetailLog detailLog = 61;
    case kDetailLog: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.detaillog_);
      break;
    }
    // .com.caspe.devicemanagement.util.Collect collect = 62;
    case kCollect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.collect_);
      break;
    }
    // .com.caspe.devicemanagement.util.CollectReply collectReply = 63;
    case kCollectReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.collectreply_);
      break;
    }
    // .com.caspe.devicemanagement.util.SuspendReply suspend = 64;
    case kSuspend: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.suspend_);
      break;
    }
    // .com.caspe.devicemanagement.util.CollectComplete collectComplete = 65;
    case kCollectComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.collectcomplete_);
      break;
    }
    // .com.caspe.devicemanagement.util.StatusReport statusReport = 66;
    case kStatusReport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.statusreport_);
      break;
    }
    // .com.caspe.devicemanagement.util.Alg alg = 67;
    case kAlg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.alg_);
      break;
    }
    // .com.caspe.devicemanagement.util.AlarmList alarmList = 68;
    case kAlarmList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.alarmlist_);
      break;
    }
    // .com.caspe.devicemanagement.util.SysParam sysParam = 69;
    case kSysParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.sysparam_);
      break;
    }
    // .com.caspe.devicemanagement.util.Signal signal = 70;
    case kSignal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.signal_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.caspe.devicemanagement.util.SendData)
  GOOGLE_DCHECK_NE(&from, this);
  const SendData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.caspe.devicemanagement.util.SendData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.caspe.devicemanagement.util.SendData)
    MergeFrom(*source);
  }
}

void SendData::MergeFrom(const SendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.caspe.devicemanagement.util.SendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serianum().size() > 0) {
    _internal_set_serianum(from._internal_serianum());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.success().size() > 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.sncode().size() > 0) {
    _internal_set_sncode(from._internal_sncode());
  }
  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
  switch (from.data_case()) {
    case kReady: {
      _internal_mutable_ready()->::com::caspe::devicemanagement::util::Ready::MergeFrom(from._internal_ready());
      break;
    }
    case kDetailLog: {
      _internal_mutable_detaillog()->::com::caspe::devicemanagement::util::DetailLog::MergeFrom(from._internal_detaillog());
      break;
    }
    case kCollect: {
      _internal_mutable_collect()->::com::caspe::devicemanagement::util::Collect::MergeFrom(from._internal_collect());
      break;
    }
    case kCollectReply: {
      _internal_mutable_collectreply()->::com::caspe::devicemanagement::util::CollectReply::MergeFrom(from._internal_collectreply());
      break;
    }
    case kSuspend: {
      _internal_mutable_suspend()->::com::caspe::devicemanagement::util::SuspendReply::MergeFrom(from._internal_suspend());
      break;
    }
    case kCollectComplete: {
      _internal_mutable_collectcomplete()->::com::caspe::devicemanagement::util::CollectComplete::MergeFrom(from._internal_collectcomplete());
      break;
    }
    case kStatusReport: {
      _internal_mutable_statusreport()->::com::caspe::devicemanagement::util::StatusReport::MergeFrom(from._internal_statusreport());
      break;
    }
    case kAlg: {
      _internal_mutable_alg()->::com::caspe::devicemanagement::util::Alg::MergeFrom(from._internal_alg());
      break;
    }
    case kAlarmList: {
      _internal_mutable_alarmlist()->::com::caspe::devicemanagement::util::AlarmList::MergeFrom(from._internal_alarmlist());
      break;
    }
    case kSysParam: {
      _internal_mutable_sysparam()->::com::caspe::devicemanagement::util::SysParam::MergeFrom(from._internal_sysparam());
      break;
    }
    case kSignal: {
      _internal_mutable_signal()->::com::caspe::devicemanagement::util::Signal::MergeFrom(from._internal_signal());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void SendData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.caspe.devicemanagement.util.SendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendData::CopyFrom(const SendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.caspe.devicemanagement.util.SendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendData::IsInitialized() const {
  return true;
}

void SendData::InternalSwap(SendData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serianum_.Swap(&other->serianum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.Swap(&other->success_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sncode_.Swap(&other->sncode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace util
}  // namespace devicemanagement
}  // namespace caspe
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::Ready* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::Ready >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::Ready >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::DetailLog* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::DetailLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::DetailLog >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::Collect_StopCondition* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::Collect_StopCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::Collect_StopCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::Collect_PartList* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::Collect_PartList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::Collect_PartList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::Collect* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::Collect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::Collect >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::ProcessInfo* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::ProcessInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::ProcessInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::CollectReply* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::CollectReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::CollectReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::SuspendReply* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::SuspendReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::SuspendReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::CollectComplete* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::CollectComplete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::CollectComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::StatusReport_Status* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::StatusReport_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::StatusReport_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::StatusReport* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::StatusReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::StatusReport >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::Alg* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::Alg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::Alg >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::AlarmList_Alarm* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::AlarmList_Alarm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::AlarmList_Alarm >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::AlarmList* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::AlarmList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::AlarmList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::Signal_Channel* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::Signal_Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::Signal_Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::Signal* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::Signal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::SysParam_DefogTiming* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::SysParam_DefogTiming >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::SysParam_DefogTiming >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::SysParam_HeaterTiming* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::SysParam_HeaterTiming >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::SysParam_HeaterTiming >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::SysParam* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::SysParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::SysParam >(arena);
}
template<> PROTOBUF_NOINLINE ::com::caspe::devicemanagement::util::SendData* Arena::CreateMaybeMessage< ::com::caspe::devicemanagement::util::SendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::caspe::devicemanagement::util::SendData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
